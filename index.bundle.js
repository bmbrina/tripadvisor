/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var e={9669:(e,n,t)=>{e.exports=t(1609)},5448:(e,n,t)=>{"use strict";var r=t(4867),o=t(6026),a=t(4372),i=t(5327),l=t(4097),s=t(4109),c=t(7985),u=t(5061),d=t(5655),f=t(5263);e.exports=function(e){return new Promise((function(n,t){var p,m=e.data,g=e.headers,h=e.responseType;function b(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}r.isFormData(m)&&delete g["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var v=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";g.Authorization="Basic "+btoa(v+":"+w)}var A=l(e.baseURL,e.url);function k(){if(y){var r="getAllResponseHeaders"in y?s(y.getAllResponseHeaders()):null,a={data:h&&"text"!==h&&"json"!==h?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};o((function(e){n(e),b()}),(function(e){t(e),b()}),a),y=null}}if(y.open(e.method.toUpperCase(),i(A,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=k:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(k)},y.onabort=function(){y&&(t(u("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){t(u("Network Error",e,null,y)),y=null},y.ontimeout=function(){var n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||d.transitional;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(u(n,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var C=(e.withCredentials||c(A))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;C&&(g[e.xsrfHeaderName]=C)}"setRequestHeader"in y&&r.forEach(g,(function(e,n){void 0===m&&"content-type"===n.toLowerCase()?delete g[n]:y.setRequestHeader(n,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),h&&"json"!==h&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){y&&(t(!e||e&&e.type?new f("canceled"):e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),m||(m=null),y.send(m)}))}},1609:(e,n,t)=>{"use strict";var r=t(4867),o=t(1849),a=t(321),i=t(7185),l=function e(n){var t=new a(n),l=o(a.prototype.request,t);return r.extend(l,a.prototype,t),r.extend(l,t),l.create=function(t){return e(i(n,t))},l}(t(5655));l.Axios=a,l.Cancel=t(5263),l.CancelToken=t(4972),l.isCancel=t(6502),l.VERSION=t(7288).version,l.all=function(e){return Promise.all(e)},l.spread=t(8713),l.isAxiosError=t(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},4972:(e,n,t)=>{"use strict";var r=t(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;this.promise.then((function(e){if(t._listeners){var n,r=t._listeners.length;for(n=0;n<r;n++)t._listeners[n](e);t._listeners=null}})),this.promise.then=function(e){var n,r=new Promise((function(e){t.subscribe(e),n=e})).then(e);return r.cancel=function(){t.unsubscribe(n)},r},e((function(e){t.reason||(t.reason=new r(e),n(t.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},o.source=function(){var e;return{token:new o((function(n){e=n})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,n,t)=>{"use strict";var r=t(4867),o=t(5327),a=t(782),i=t(3572),l=t(7185),s=t(4875),c=s.validators;function u(e){this.defaults=e,this.interceptors={request:new a,response:new a}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=e.transitional;void 0!==n&&s.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var t=[],r=!0;this.interceptors.request.forEach((function(n){"function"==typeof n.runWhen&&!1===n.runWhen(e)||(r=r&&n.synchronous,t.unshift(n.fulfilled,n.rejected))}));var o,a=[];if(this.interceptors.response.forEach((function(e){a.push(e.fulfilled,e.rejected)})),!r){var u=[i,void 0];for(Array.prototype.unshift.apply(u,t),u=u.concat(a),o=Promise.resolve(e);u.length;)o=o.then(u.shift(),u.shift());return o}for(var d=e;t.length;){var f=t.shift(),p=t.shift();try{d=f(d)}catch(e){p(e);break}}try{o=i(d)}catch(e){return Promise.reject(e)}for(;a.length;)o=o.then(a.shift(),a.shift());return o},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(n,t){return this.request(l(t||{},{method:e,url:n,data:(t||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(n,t,r){return this.request(l(r||{},{method:e,url:n,data:t}))}})),e.exports=u},782:(e,n,t)=>{"use strict";var r=t(4867);function o(){this.handlers=[]}o.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=o},4097:(e,n,t)=>{"use strict";var r=t(1793),o=t(7303);e.exports=function(e,n){return e&&!r(n)?o(e,n):n}},5061:(e,n,t)=>{"use strict";var r=t(481);e.exports=function(e,n,t,o,a){var i=new Error(e);return r(i,n,t,o,a)}},3572:(e,n,t)=>{"use strict";var r=t(4867),o=t(8527),a=t(6502),i=t(5655),l=t(5263);function s(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new l("canceled")}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||i.adapter)(e).then((function(n){return s(e),n.data=o.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return a(n)||(s(e),n&&n.response&&(n.response.data=o.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},481:e=>{"use strict";e.exports=function(e,n,t,r,o){return e.config=n,t&&(e.code=t),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e,n){n=n||{};var t={};function o(e,n){return r.isPlainObject(e)&&r.isPlainObject(n)?r.merge(e,n):r.isPlainObject(n)?r.merge({},n):r.isArray(n)?n.slice():n}function a(t){return r.isUndefined(n[t])?r.isUndefined(e[t])?void 0:o(void 0,e[t]):o(e[t],n[t])}function i(e){if(!r.isUndefined(n[e]))return o(void 0,n[e])}function l(t){return r.isUndefined(n[t])?r.isUndefined(e[t])?void 0:o(void 0,e[t]):o(void 0,n[t])}function s(t){return t in n?o(e[t],n[t]):t in e?o(void 0,e[t]):void 0}var c={url:i,method:i,data:i,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:s};return r.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=c[e]||a,o=n(e);r.isUndefined(o)&&n!==s||(t[e]=o)})),t}},6026:(e,n,t)=>{"use strict";var r=t(5061);e.exports=function(e,n,t){var o=t.config.validateStatus;t.status&&o&&!o(t.status)?n(r("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},8527:(e,n,t)=>{"use strict";var r=t(4867),o=t(5655);e.exports=function(e,n,t){var a=this||o;return r.forEach(t,(function(t){e=t.call(a,e,n)})),e}},5655:(e,n,t)=>{"use strict";var r=t(4867),o=t(6016),a=t(481),i={"Content-Type":"application/x-www-form-urlencoded"};function l(e,n){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var s,c={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=t(5448)),s),transformRequest:[function(e,n){return o(n,"Accept"),o(n,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(l(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||n&&"application/json"===n["Content-Type"]?(l(n,"application/json"),function(e,n,t){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||c.transitional,t=n&&n.silentJSONParsing,o=n&&n.forcedJSONParsing,i=!t&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(i)})),e.exports=c},7288:e=>{e.exports={version:"0.24.0"}},1849:e=>{"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];return e.apply(n,t)}}},5327:(e,n,t)=>{"use strict";var r=t(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var a;if(t)a=t(n);else if(r.isURLSearchParams(n))a=n.toString();else{var i=[];r.forEach(n,(function(e,n){null!=e&&(r.isArray(e)?n+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(n)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},4372:(e,n,t)=>{"use strict";var r=t(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,n,t,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(n)),r.isNumber(t)&&l.push("expires="+new Date(t).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,n,t)=>{"use strict";var r=t(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function o(e){var r=e;return n&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=o(window.location.href),function(n){var t=r.isString(n)?o(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},6016:(e,n,t)=>{"use strict";var r=t(4867);e.exports=function(e,n){r.forEach(e,(function(t,r){r!==n&&r.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[r])}))}},4109:(e,n,t)=>{"use strict";var r=t(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),n=r.trim(e.substr(0,a)).toLowerCase(),t=r.trim(e.substr(a+1)),n){if(i[n]&&o.indexOf(n)>=0)return;i[n]="set-cookie"===n?(i[n]?i[n]:[]).concat([t]):i[n]?i[n]+", "+t:t}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},4875:(e,n,t)=>{"use strict";var r=t(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){o[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var a={};o.transitional=function(e,n,t){function o(e,n){return"[Axios v"+r+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,r,i){if(!1===e)throw new Error(o(r," has been removed"+(n?" in "+n:"")));return n&&!a[r]&&(a[r]=!0,console.warn(o(r," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,r,i)}},e.exports={assertOptions:function(e,n,t){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],i=n[a];if(i){var l=e[a],s=void 0===l||i(l,a,e);if(!0!==s)throw new TypeError("option "+a+" must be "+s)}else if(!0!==t)throw Error("Unknown option "+a)}},validators:o}},4867:(e,n,t)=>{"use strict";var r=t(1849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function u(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var t=0,r=e.length;t<r;t++)n.call(null,e[t],t,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var n={};function t(t,r){s(n[r])&&s(t)?n[r]=e(n[r],t):s(t)?n[r]=e({},t):a(t)?n[r]=t.slice():n[r]=t}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],t);return n},extend:function(e,n,t){return u(n,(function(n,o){e[o]=t&&"function"==typeof n?r(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},4804:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(7537),o=t.n(r),a=t(3645),i=t.n(a)()(o());i.push([e.id,'.markdown-body{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;margin:0;color:#24292f;background-color:#ffffff;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";font-size:16px;line-height:1.5;word-wrap:break-word}.markdown-body .octicon{display:inline-block;fill:currentColor;vertical-align:text-bottom}.markdown-body h1:hover .anchor .octicon-link:before,.markdown-body h2:hover .anchor .octicon-link:before,.markdown-body h3:hover .anchor .octicon-link:before,.markdown-body h4:hover .anchor .octicon-link:before,.markdown-body h5:hover .anchor .octicon-link:before,.markdown-body h6:hover .anchor .octicon-link:before{width:16px;height:16px;content:\' \';display:inline-block;background-color:currentColor;-webkit-mask-image:url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");mask-image:url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>")}.markdown-body details,.markdown-body figcaption,.markdown-body figure{display:block}.markdown-body summary{display:list-item}.markdown-body [hidden]{display:none !important}.markdown-body a{background-color:transparent;color:#0969da;text-decoration:none}.markdown-body a:active,.markdown-body a:hover{outline-width:0}.markdown-body abbr[title]{border-bottom:none;text-decoration:underline dotted}.markdown-body b,.markdown-body strong{font-weight:600}.markdown-body dfn{font-style:italic}.markdown-body h1{margin:.67em 0;font-weight:600;padding-bottom:.3em;font-size:2em;border-bottom:1px solid #d8dee4}.markdown-body mark{background-color:#fff8c5;color:#24292f}.markdown-body small{font-size:90%}.markdown-body sub,.markdown-body sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.markdown-body sub{bottom:-0.25em}.markdown-body sup{top:-0.5em}.markdown-body img{border-style:none;max-width:100%;box-sizing:content-box;background-color:#ffffff}.markdown-body code,.markdown-body kbd,.markdown-body pre,.markdown-body samp{font-family:monospace,monospace;font-size:1em}.markdown-body figure{margin:1em 40px}.markdown-body hr{box-sizing:content-box;overflow:hidden;background:transparent;border-bottom:1px solid #d8dee4;height:.25em;padding:0;margin:24px 0;background-color:#d0d7de;border:0}.markdown-body input{font:inherit;margin:0;overflow:visible;font-family:inherit;font-size:inherit;line-height:inherit}.markdown-body [type=button],.markdown-body [type=reset],.markdown-body [type=submit]{-webkit-appearance:button}.markdown-body [type=button]::-moz-focus-inner,.markdown-body [type=reset]::-moz-focus-inner,.markdown-body [type=submit]::-moz-focus-inner{border-style:none;padding:0}.markdown-body [type=button]:-moz-focusring,.markdown-body [type=reset]:-moz-focusring,.markdown-body [type=submit]:-moz-focusring{outline:1px dotted ButtonText}.markdown-body [type=checkbox],.markdown-body [type=radio]{box-sizing:border-box;padding:0}.markdown-body [type=number]::-webkit-inner-spin-button,.markdown-body [type=number]::-webkit-outer-spin-button{height:auto}.markdown-body [type=search]{-webkit-appearance:textfield;outline-offset:-2px}.markdown-body [type=search]::-webkit-search-cancel-button,.markdown-body [type=search]::-webkit-search-decoration{-webkit-appearance:none}.markdown-body ::-webkit-input-placeholder{color:inherit;opacity:.54}.markdown-body ::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.markdown-body a:hover{text-decoration:underline}.markdown-body hr::before{display:table;content:""}.markdown-body hr::after{display:table;clear:both;content:""}.markdown-body table{border-spacing:0;border-collapse:collapse;display:block;width:max-content;max-width:100%;overflow:auto}.markdown-body td,.markdown-body th{padding:0}.markdown-body details summary{cursor:pointer}.markdown-body details:not([open])>*:not(summary){display:none !important}.markdown-body kbd{display:inline-block;padding:3px 5px;font:11px ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;line-height:10px;color:#24292f;vertical-align:middle;background-color:#f6f8fa;border:solid 1px rgba(175,184,193,0.2);border-bottom-color:rgba(175,184,193,0.2);border-radius:6px;box-shadow:inset 0 -1px 0 rgba(175,184,193,0.2)}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.markdown-body h2{font-weight:600;padding-bottom:.3em;font-size:1.5em;border-bottom:1px solid #d8dee4}.markdown-body h3{font-weight:600;font-size:1.25em}.markdown-body h4{font-weight:600;font-size:1em}.markdown-body h5{font-weight:600;font-size:.875em}.markdown-body h6{font-weight:600;font-size:.85em;color:#57606a}.markdown-body p{margin-top:0;margin-bottom:10px}.markdown-body blockquote{margin:0;padding:0 1em;color:#57606a;border-left:.25em solid #d0d7de}.markdown-body ul,.markdown-body ol{margin-top:0;margin-bottom:0;padding-left:2em}.markdown-body ol ol,.markdown-body ul ol{list-style-type:lower-roman}.markdown-body ul ul ol,.markdown-body ul ol ol,.markdown-body ol ul ol,.markdown-body ol ol ol{list-style-type:lower-alpha}.markdown-body dd{margin-left:0}.markdown-body tt,.markdown-body code{font-family:ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;font-size:12px}.markdown-body pre{margin-top:0;margin-bottom:0;font-family:ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;font-size:12px;word-wrap:normal}.markdown-body .octicon{display:inline-block;overflow:visible !important;vertical-align:text-bottom;fill:currentColor}.markdown-body ::placeholder{color:#6e7781;opacity:1}.markdown-body input::-webkit-outer-spin-button,.markdown-body input::-webkit-inner-spin-button{margin:0;-webkit-appearance:none;appearance:none}.markdown-body .pl-c{color:#6e7781}.markdown-body .pl-c1,.markdown-body .pl-s .pl-v{color:#0550ae}.markdown-body .pl-e,.markdown-body .pl-en{color:#8250df}.markdown-body .pl-smi,.markdown-body .pl-s .pl-s1{color:#24292f}.markdown-body .pl-ent{color:#116329}.markdown-body .pl-k{color:#cf222e}.markdown-body .pl-s,.markdown-body .pl-pds,.markdown-body .pl-s .pl-pse .pl-s1,.markdown-body .pl-sr,.markdown-body .pl-sr .pl-cce,.markdown-body .pl-sr .pl-sre,.markdown-body .pl-sr .pl-sra{color:#0a3069}.markdown-body .pl-v,.markdown-body .pl-smw{color:#953800}.markdown-body .pl-bu{color:#82071e}.markdown-body .pl-ii{color:#f6f8fa;background-color:#82071e}.markdown-body .pl-c2{color:#f6f8fa;background-color:#cf222e}.markdown-body .pl-sr .pl-cce{font-weight:bold;color:#116329}.markdown-body .pl-ml{color:#3b2300}.markdown-body .pl-mh,.markdown-body .pl-mh .pl-en,.markdown-body .pl-ms{font-weight:bold;color:#0550ae}.markdown-body .pl-mi{font-style:italic;color:#24292f}.markdown-body .pl-mb{font-weight:bold;color:#24292f}.markdown-body .pl-md{color:#82071e;background-color:#FFEBE9}.markdown-body .pl-mi1{color:#116329;background-color:#dafbe1}.markdown-body .pl-mc{color:#953800;background-color:#ffd8b5}.markdown-body .pl-mi2{color:#eaeef2;background-color:#0550ae}.markdown-body .pl-mdr{font-weight:bold;color:#8250df}.markdown-body .pl-ba{color:#57606a}.markdown-body .pl-sg{color:#8c959f}.markdown-body .pl-corl{text-decoration:underline;color:#0a3069}.markdown-body [data-catalyst]{display:block}.markdown-body g-emoji{font-family:"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";font-size:1em;font-style:normal !important;font-weight:400;line-height:1;vertical-align:-0.075em}.markdown-body g-emoji img{width:1em;height:1em}.markdown-body::before{display:table;content:""}.markdown-body::after{display:table;clear:both;content:""}.markdown-body>*:first-child{margin-top:0 !important}.markdown-body>*:last-child{margin-bottom:0 !important}.markdown-body a:not([href]){color:inherit;text-decoration:none}.markdown-body .absent{color:#cf222e}.markdown-body .anchor{float:left;padding-right:4px;margin-left:-20px;line-height:1}.markdown-body .anchor:focus{outline:none}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body details{margin-top:0;margin-bottom:16px}.markdown-body blockquote>:first-child{margin-top:0}.markdown-body blockquote>:last-child{margin-bottom:0}.markdown-body sup>a::before{content:"["}.markdown-body sup>a::after{content:"]"}.markdown-body h1 .octicon-link,.markdown-body h2 .octicon-link,.markdown-body h3 .octicon-link,.markdown-body h4 .octicon-link,.markdown-body h5 .octicon-link,.markdown-body h6 .octicon-link{color:#24292f;vertical-align:middle;visibility:hidden}.markdown-body h1:hover .anchor,.markdown-body h2:hover .anchor,.markdown-body h3:hover .anchor,.markdown-body h4:hover .anchor,.markdown-body h5:hover .anchor,.markdown-body h6:hover .anchor{text-decoration:none}.markdown-body h1:hover .anchor .octicon-link,.markdown-body h2:hover .anchor .octicon-link,.markdown-body h3:hover .anchor .octicon-link,.markdown-body h4:hover .anchor .octicon-link,.markdown-body h5:hover .anchor .octicon-link,.markdown-body h6:hover .anchor .octicon-link{visibility:visible}.markdown-body h1 tt,.markdown-body h1 code,.markdown-body h2 tt,.markdown-body h2 code,.markdown-body h3 tt,.markdown-body h3 code,.markdown-body h4 tt,.markdown-body h4 code,.markdown-body h5 tt,.markdown-body h5 code,.markdown-body h6 tt,.markdown-body h6 code{padding:0 .2em;font-size:inherit}.markdown-body ul.no-list,.markdown-body ol.no-list{padding:0;list-style-type:none}.markdown-body ol[type="1"]{list-style-type:decimal}.markdown-body ol[type=a]{list-style-type:lower-alpha}.markdown-body ol[type=i]{list-style-type:lower-roman}.markdown-body div>ol:not([type]){list-style-type:decimal}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul{margin-top:0;margin-bottom:0}.markdown-body li>p{margin-top:16px}.markdown-body li+li{margin-top:.25em}.markdown-body dl{padding:0}.markdown-body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:600}.markdown-body dl dd{padding:0 16px;margin-bottom:16px}.markdown-body table th{font-weight:600}.markdown-body table th,.markdown-body table td{padding:6px 13px;border:1px solid #d0d7de}.markdown-body table tr{background-color:#ffffff;border-top:1px solid #d8dee4}.markdown-body table tr:nth-child(2n){background-color:#f6f8fa}.markdown-body table img{background-color:transparent}.markdown-body img[align=right]{padding-left:20px}.markdown-body img[align=left]{padding-right:20px}.markdown-body .emoji{max-width:none;vertical-align:text-top;background-color:transparent}.markdown-body span.frame{display:block;overflow:hidden}.markdown-body span.frame>span{display:block;float:left;width:auto;padding:7px;margin:13px 0 0;overflow:hidden;border:1px solid #d0d7de}.markdown-body span.frame span img{display:block;float:left}.markdown-body span.frame span span{display:block;padding:5px 0 0;clear:both;color:#24292f}.markdown-body span.align-center{display:block;overflow:hidden;clear:both}.markdown-body span.align-center>span{display:block;margin:13px auto 0;overflow:hidden;text-align:center}.markdown-body span.align-center span img{margin:0 auto;text-align:center}.markdown-body span.align-right{display:block;overflow:hidden;clear:both}.markdown-body span.align-right>span{display:block;margin:13px 0 0;overflow:hidden;text-align:right}.markdown-body span.align-right span img{margin:0;text-align:right}.markdown-body span.float-left{display:block;float:left;margin-right:13px;overflow:hidden}.markdown-body span.float-left span{margin:13px 0 0}.markdown-body span.float-right{display:block;float:right;margin-left:13px;overflow:hidden}.markdown-body span.float-right>span{display:block;margin:13px auto 0;overflow:hidden;text-align:right}.markdown-body code,.markdown-body tt{padding:.2em .4em;margin:0;font-size:85%;background-color:rgba(175,184,193,0.2);border-radius:6px}.markdown-body code br,.markdown-body tt br{display:none}.markdown-body del code{text-decoration:inherit}.markdown-body pre code{font-size:100%}.markdown-body pre>code{padding:0;margin:0;word-break:normal;white-space:pre;background:transparent;border:0}.markdown-body .highlight{margin-bottom:16px}.markdown-body .highlight pre{margin-bottom:0;word-break:normal}.markdown-body .highlight pre,.markdown-body pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;background-color:#f6f8fa;border-radius:6px}.markdown-body pre code,.markdown-body pre tt{display:inline;max-width:auto;padding:0;margin:0;overflow:visible;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}.markdown-body .csv-data td,.markdown-body .csv-data th{padding:5px;overflow:hidden;font-size:12px;line-height:1;text-align:left;white-space:nowrap}.markdown-body .csv-data .blob-num{padding:10px 8px 9px;text-align:right;background:#ffffff;border:0}.markdown-body .csv-data tr{border-top:0}.markdown-body .csv-data th{font-weight:600;background:#f6f8fa;border-top:0}.markdown-body .footnotes{font-size:12px;color:#57606a;border-top:1px solid #d0d7de}.markdown-body .footnotes ol{padding-left:16px}.markdown-body .footnotes li{position:relative}.markdown-body .footnotes li:target::before{position:absolute;top:-8px;right:-8px;bottom:-8px;left:-24px;pointer-events:none;content:"";border:2px solid #0969da;border-radius:6px}.markdown-body .footnotes li:target{color:#24292f}.markdown-body .footnotes .data-footnote-backref g-emoji{font-family:monospace}.markdown-body .task-list-item{list-style-type:none}.markdown-body .task-list-item label{font-weight:400}.markdown-body .task-list-item.enabled label{cursor:pointer}.markdown-body .task-list-item+.task-list-item{margin-top:3px}.markdown-body .task-list-item .handle{display:none}.markdown-body .task-list-item-checkbox{margin:0 .2em .25em -1.6em;vertical-align:middle}.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox{margin:0 -1.6em .25em .2em}.markdown-body ::-webkit-calendar-picker-indicator{filter:invert(50%)}\n',"",{version:3,sources:["webpack://./node_modules/github-markdown-css/github-markdown-light.css"],names:[],mappings:"AAAA,eACE,yBAA0B,CAC1B,6BAA8B,CAC9B,QAAS,CACT,aAAc,CACd,wBAAyB,CACzB,uHAAwH,CACxH,cAAe,CACf,eAAgB,CAChB,oBAAqB,CACtB,wBAGC,oBAAqB,CACrB,iBAAkB,CAClB,0BAA2B,CAC5B,8TAQC,UAAW,CACX,WAAY,CACZ,WAAY,CACZ,oBAAqB,CACrB,6BAA8B,CAC9B,qhBAAshB,CACthB,6gBAA8gB,CAC/gB,uEAKC,aAAc,CACf,uBAGC,iBAAkB,CACnB,wBAGC,uBAAwB,CACzB,iBAGC,4BAA6B,CAC7B,aAAc,CACd,oBAAqB,CACtB,+CAIC,eAAgB,CACjB,2BAGC,kBAAmB,CACnB,gCAAiC,CAClC,uCAIC,eAAgB,CACjB,mBAGC,iBAAkB,CACnB,kBAGC,cAAe,CACf,eAAgB,CAChB,mBAAoB,CACpB,aAAc,CACd,+BAA4C,CAC7C,oBAGC,wBAAyB,CACzB,aAAc,CACf,qBAGC,aAAc,CACf,sCAIC,aAAc,CACd,aAAc,CACd,iBAAkB,CAClB,uBAAwB,CACzB,mBAGC,cAAe,CAChB,mBAGC,UAAW,CACZ,mBAGC,iBAAkB,CAClB,cAAe,CACf,sBAAuB,CACvB,wBAAyB,CAC1B,8EAMC,+BAAgC,CAChC,aAAc,CACf,sBAGC,eAAgB,CACjB,kBAGC,sBAAuB,CACvB,eAAgB,CAChB,sBAAuB,CACvB,+BAA4C,CAC5C,YAAa,CACb,SAAU,CACV,aAAc,CACd,wBAAyB,CACzB,QAAS,CACV,qBAGC,YAAa,CACb,QAAS,CACT,gBAAiB,CACjB,mBAAoB,CACpB,iBAAkB,CAClB,mBAAoB,CACrB,sFAKC,yBAA0B,CAC3B,4IAKC,iBAAkB,CAClB,SAAU,CACX,mIAKC,6BAA8B,CAC/B,2DAIC,qBAAsB,CACtB,SAAU,CACX,gHAIC,WAAY,CACb,6BAGC,4BAA6B,CAC7B,mBAAoB,CACrB,mHAIC,uBAAwB,CACzB,2CAGC,aAAc,CACd,WAAY,CACb,4CAGC,yBAA0B,CAC1B,YAAa,CACd,uBAGC,yBAA0B,CAC3B,0BAGC,aAAc,CACd,UAAW,CACZ,yBAGC,aAAc,CACd,UAAW,CACX,UAAW,CACZ,qBAGC,gBAAiB,CACjB,wBAAyB,CACzB,aAAc,CACd,iBAAkB,CAClB,cAAe,CACf,aAAc,CACf,oCAIC,SAAU,CACX,+BAGC,cAAe,CAChB,kDAGC,uBAAwB,CACzB,mBAGC,oBAAqB,CACrB,eAAgB,CAChB,sFAAuF,CACvF,gBAAiB,CACjB,aAAc,CACd,qBAAsB,CACtB,wBAAyB,CACzB,sCAAuC,CACvC,yCAA0C,CAC1C,iBAAkB,CAClB,+CAAgD,CACjD,4GAQC,eAAgB,CAChB,kBAAmB,CACnB,eAAgB,CAChB,gBAAiB,CAClB,kBAGC,eAAgB,CAChB,mBAAoB,CACpB,eAAgB,CAChB,+BAA4C,CAC7C,kBAGC,eAAgB,CAChB,gBAAiB,CAClB,kBAGC,eAAgB,CAChB,aAAc,CACf,kBAGC,eAAgB,CAChB,gBAAiB,CAClB,kBAGC,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACf,iBAGC,YAAa,CACb,kBAAmB,CACpB,0BAGC,QAAS,CACT,aAAc,CACd,aAAc,CACd,+BAAgC,CACjC,oCAIC,YAAa,CACb,eAAgB,CAChB,gBAAiB,CAClB,0CAIC,2BAA4B,CAC7B,gGAMC,2BAA4B,CAC7B,kBAGC,aAAc,CACf,sCAIC,wFAAyF,CACzF,cAAe,CAChB,mBAGC,YAAa,CACb,eAAgB,CAChB,wFAAyF,CACzF,cAAe,CACf,gBAAiB,CAClB,wBAGC,oBAAqB,CACrB,2BAA4B,CAC5B,0BAA2B,CAC3B,iBAAkB,CACnB,6BAGC,aAAc,CACd,SAAU,CACX,gGAIC,QAAS,CACT,uBAAwB,CACxB,eAAgB,CACjB,qBAGC,aAAc,CACf,iDAIC,aAAc,CACf,2CAIC,aAAc,CACf,mDAIC,aAAc,CACf,uBAGC,aAAc,CACf,qBAGC,aAAc,CACf,gMASC,aAAc,CACf,4CAIC,aAAc,CACf,sBAGC,aAAc,CACf,sBAGC,aAAc,CACd,wBAAyB,CAC1B,sBAGC,aAAc,CACd,wBAAyB,CAC1B,8BAGC,gBAAiB,CACjB,aAAc,CACf,sBAGC,aAAc,CACf,yEAKC,gBAAiB,CACjB,aAAc,CACf,sBAGC,iBAAkB,CAClB,aAAc,CACf,sBAGC,gBAAiB,CACjB,aAAc,CACf,sBAGC,aAAc,CACd,wBAAyB,CAC1B,uBAGC,aAAc,CACd,wBAAyB,CAC1B,sBAGC,aAAc,CACd,wBAAyB,CAC1B,uBAGC,aAAc,CACd,wBAAyB,CAC1B,uBAGC,gBAAiB,CACjB,aAAc,CACf,sBAGC,aAAc,CACf,sBAGC,aAAc,CACf,wBAGC,yBAA0B,CAC1B,aAAc,CACf,+BAGC,aAAc,CACf,uBAGC,kEAAmE,CACnE,aAAc,CACd,4BAA6B,CAC7B,eAAgB,CAChB,aAAc,CACd,uBAAwB,CACzB,2BAGC,SAAU,CACV,UAAW,CACZ,uBAGC,aAAc,CACd,UAAW,CACZ,sBAGC,aAAc,CACd,UAAW,CACX,UAAW,CACZ,6BAGC,uBAAwB,CACzB,4BAGC,0BAA2B,CAC5B,6BAGC,aAAc,CACd,oBAAqB,CACtB,uBAGC,aAAc,CACf,uBAGC,UAAW,CACX,iBAAkB,CAClB,iBAAkB,CAClB,aAAc,CACf,6BAGC,YAAa,CACd,gKAUC,YAAa,CACb,kBAAmB,CACpB,uCAGC,YAAa,CACd,sCAGC,eAAgB,CACjB,6BAGC,WAAY,CACb,4BAGC,WAAY,CACb,gMAQC,aAAc,CACd,qBAAsB,CACtB,iBAAkB,CACnB,gMAQC,oBAAqB,CACtB,oRAQC,kBAAmB,CACpB,wQAcC,cAAe,CACf,iBAAkB,CACnB,oDAIC,SAAU,CACV,oBAAqB,CACtB,4BAGC,uBAAwB,CACzB,0BAGC,2BAA4B,CAC7B,0BAGC,2BAA4B,CAC7B,kCAGC,uBAAwB,CACzB,oFAMC,YAAa,CACb,eAAgB,CACjB,oBAGC,eAAgB,CACjB,qBAGC,gBAAiB,CAClB,kBAGC,SAAU,CACX,qBAGC,SAAU,CACV,eAAgB,CAChB,aAAc,CACd,iBAAkB,CAClB,eAAgB,CACjB,qBAGC,cAAe,CACf,kBAAmB,CACpB,wBAGC,eAAgB,CACjB,gDAIC,gBAAiB,CACjB,wBAAyB,CAC1B,wBAGC,wBAAyB,CACzB,4BAAyC,CAC1C,sCAGC,wBAAyB,CAC1B,yBAGC,4BAA6B,CAC9B,gCAGC,iBAAkB,CACnB,+BAGC,kBAAmB,CACpB,sBAGC,cAAe,CACf,uBAAwB,CACxB,4BAA6B,CAC9B,0BAGC,aAAc,CACd,eAAgB,CACjB,+BAGC,aAAc,CACd,UAAW,CACX,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,wBAAyB,CAC1B,mCAGC,aAAc,CACd,UAAW,CACZ,oCAGC,aAAc,CACd,eAAgB,CAChB,UAAW,CACX,aAAc,CACf,iCAGC,aAAc,CACd,eAAgB,CAChB,UAAW,CACZ,sCAGC,aAAc,CACd,kBAAmB,CACnB,eAAgB,CAChB,iBAAkB,CACnB,0CAGC,aAAc,CACd,iBAAkB,CACnB,gCAGC,aAAc,CACd,eAAgB,CAChB,UAAW,CACZ,qCAGC,aAAc,CACd,eAAgB,CAChB,eAAgB,CAChB,gBAAiB,CAClB,yCAGC,QAAS,CACT,gBAAiB,CAClB,+BAGC,aAAc,CACd,UAAW,CACX,iBAAkB,CAClB,eAAgB,CACjB,oCAGC,eAAgB,CACjB,gCAGC,aAAc,CACd,WAAY,CACZ,gBAAiB,CACjB,eAAgB,CACjB,qCAGC,aAAc,CACd,kBAAmB,CACnB,eAAgB,CAChB,gBAAiB,CAClB,sCAIC,iBAAkB,CAClB,QAAS,CACT,aAAc,CACd,sCAAuC,CACvC,iBAAkB,CACnB,4CAIC,YAAa,CACd,wBAGC,uBAAwB,CACzB,wBAGC,cAAe,CAChB,wBAGC,SAAU,CACV,QAAS,CACT,iBAAkB,CAClB,eAAgB,CAChB,sBAAuB,CACvB,QAAS,CACV,0BAGC,kBAAmB,CACpB,8BAGC,eAAgB,CAChB,iBAAkB,CACnB,iDAIC,YAAa,CACb,aAAc,CACd,aAAc,CACd,gBAAiB,CACjB,wBAAyB,CACzB,iBAAkB,CACnB,8CAIC,cAAe,CACf,cAAe,CACf,SAAU,CACV,QAAS,CACT,gBAAiB,CACjB,mBAAoB,CACpB,gBAAiB,CACjB,4BAA6B,CAC7B,QAAS,CACV,wDAIC,WAAY,CACZ,eAAgB,CAChB,cAAe,CACf,aAAc,CACd,eAAgB,CAChB,kBAAmB,CACpB,mCAGC,oBAAqB,CACrB,gBAAiB,CACjB,kBAAmB,CACnB,QAAS,CACV,4BAGC,YAAa,CACd,4BAGC,eAAgB,CAChB,kBAAmB,CACnB,YAAa,CACd,0BAGC,cAAe,CACf,aAAc,CACd,4BAA6B,CAC9B,6BAGC,iBAAkB,CACnB,6BAGC,iBAAkB,CACnB,4CAGC,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,WAAY,CACZ,UAAW,CACX,mBAAoB,CACpB,UAAW,CACX,wBAAyB,CACzB,iBAAkB,CACnB,oCAGC,aAAc,CACf,yDAGC,qBAAsB,CACvB,+BAGC,oBAAqB,CACtB,qCAGC,eAAgB,CACjB,6CAGC,cAAe,CAChB,+CAGC,cAAe,CAChB,uCAGC,YAAa,CACd,wCAGC,0BAA2B,CAC3B,qBAAsB,CACvB,qEAGC,0BAA2B,CAC5B,mDAGC,kBAAmB",sourcesContent:['.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  margin: 0;\n  color: #24292f;\n  background-color: #ffffff;\n  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n\n.markdown-body h1:hover .anchor .octicon-link:before,\n.markdown-body h2:hover .anchor .octicon-link:before,\n.markdown-body h3:hover .anchor .octicon-link:before,\n.markdown-body h4:hover .anchor .octicon-link:before,\n.markdown-body h5:hover .anchor .octicon-link:before,\n.markdown-body h6:hover .anchor .octicon-link:before {\n  width: 16px;\n  height: 16px;\n  content: \' \';\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n  mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n}\n\n.markdown-body details,\n.markdown-body figcaption,\n.markdown-body figure {\n  display: block;\n}\n\n.markdown-body summary {\n  display: list-item;\n}\n\n.markdown-body [hidden] {\n  display: none !important;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  color: #0969da;\n  text-decoration: none;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline-width: 0;\n}\n\n.markdown-body abbr[title] {\n  border-bottom: none;\n  text-decoration: underline dotted;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: 600;\n}\n\n.markdown-body dfn {\n  font-style: italic;\n}\n\n.markdown-body h1 {\n  margin: .67em 0;\n  font-weight: 600;\n  padding-bottom: .3em;\n  font-size: 2em;\n  border-bottom: 1px solid hsla(210,18%,87%,1);\n}\n\n.markdown-body mark {\n  background-color: #fff8c5;\n  color: #24292f;\n}\n\n.markdown-body small {\n  font-size: 90%;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body sup {\n  top: -0.5em;\n}\n\n.markdown-body img {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: #ffffff;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace,monospace;\n  font-size: 1em;\n}\n\n.markdown-body figure {\n  margin: 1em 40px;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid hsla(210,18%,87%,1);\n  height: .25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: #d0d7de;\n  border: 0;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body [type=button],\n.markdown-body [type=reset],\n.markdown-body [type=submit] {\n  -webkit-appearance: button;\n}\n\n.markdown-body [type=button]::-moz-focus-inner,\n.markdown-body [type=reset]::-moz-focus-inner,\n.markdown-body [type=submit]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n.markdown-body [type=button]:-moz-focusring,\n.markdown-body [type=reset]:-moz-focusring,\n.markdown-body [type=submit]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n.markdown-body [type=checkbox],\n.markdown-body [type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body [type=number]::-webkit-inner-spin-button,\n.markdown-body [type=number]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n.markdown-body [type=search] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\n.markdown-body [type=search]::-webkit-search-cancel-button,\n.markdown-body [type=search]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n.markdown-body ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: .54;\n}\n\n.markdown-body ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body details summary {\n  cursor: pointer;\n}\n\n.markdown-body details:not([open])>*:not(summary) {\n  display: none !important;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  line-height: 10px;\n  color: #24292f;\n  vertical-align: middle;\n  background-color: #f6f8fa;\n  border: solid 1px rgba(175,184,193,0.2);\n  border-bottom-color: rgba(175,184,193,0.2);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 rgba(175,184,193,0.2);\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.markdown-body h2 {\n  font-weight: 600;\n  padding-bottom: .3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid hsla(210,18%,87%,1);\n}\n\n.markdown-body h3 {\n  font-weight: 600;\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-weight: 600;\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-weight: 600;\n  font-size: .875em;\n}\n\n.markdown-body h6 {\n  font-weight: 600;\n  font-size: .85em;\n  color: #57606a;\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: #57606a;\n  border-left: .25em solid #d0d7de;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body tt,\n.markdown-body code {\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n\n.markdown-body ::placeholder {\n  color: #6e7781;\n  opacity: 1;\n}\n\n.markdown-body input::-webkit-outer-spin-button,\n.markdown-body input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n.markdown-body .pl-c {\n  color: #6e7781;\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: #0550ae;\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: #8250df;\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: #24292f;\n}\n\n.markdown-body .pl-ent {\n  color: #116329;\n}\n\n.markdown-body .pl-k {\n  color: #cf222e;\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: #0a3069;\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: #953800;\n}\n\n.markdown-body .pl-bu {\n  color: #82071e;\n}\n\n.markdown-body .pl-ii {\n  color: #f6f8fa;\n  background-color: #82071e;\n}\n\n.markdown-body .pl-c2 {\n  color: #f6f8fa;\n  background-color: #cf222e;\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: #116329;\n}\n\n.markdown-body .pl-ml {\n  color: #3b2300;\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: #0550ae;\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: #24292f;\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: #24292f;\n}\n\n.markdown-body .pl-md {\n  color: #82071e;\n  background-color: #FFEBE9;\n}\n\n.markdown-body .pl-mi1 {\n  color: #116329;\n  background-color: #dafbe1;\n}\n\n.markdown-body .pl-mc {\n  color: #953800;\n  background-color: #ffd8b5;\n}\n\n.markdown-body .pl-mi2 {\n  color: #eaeef2;\n  background-color: #0550ae;\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: #8250df;\n}\n\n.markdown-body .pl-ba {\n  color: #57606a;\n}\n\n.markdown-body .pl-sg {\n  color: #8c959f;\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: #0a3069;\n}\n\n.markdown-body [data-catalyst] {\n  display: block;\n}\n\n.markdown-body g-emoji {\n  font-family: "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";\n  font-size: 1em;\n  font-style: normal !important;\n  font-weight: 400;\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n\n.markdown-body g-emoji img {\n  width: 1em;\n  height: 1em;\n}\n\n.markdown-body::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .absent {\n  color: #cf222e;\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body sup>a::before {\n  content: "[";\n}\n\n.markdown-body sup>a::after {\n  content: "]";\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: #24292f;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 tt,\n.markdown-body h1 code,\n.markdown-body h2 tt,\n.markdown-body h2 code,\n.markdown-body h3 tt,\n.markdown-body h3 code,\n.markdown-body h4 tt,\n.markdown-body h4 code,\n.markdown-body h5 tt,\n.markdown-body h5 code,\n.markdown-body h6 tt,\n.markdown-body h6 code {\n  padding: 0 .2em;\n  font-size: inherit;\n}\n\n.markdown-body ul.no-list,\n.markdown-body ol.no-list {\n  padding: 0;\n  list-style-type: none;\n}\n\n.markdown-body ol[type="1"] {\n  list-style-type: decimal;\n}\n\n.markdown-body ol[type=a] {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body ol[type=i] {\n  list-style-type: lower-roman;\n}\n\n.markdown-body div>ol:not([type]) {\n  list-style-type: decimal;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: .25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table th {\n  font-weight: 600;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #d0d7de;\n}\n\n.markdown-body table tr {\n  background-color: #ffffff;\n  border-top: 1px solid hsla(210,18%,87%,1);\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\n.markdown-body table img {\n  background-color: transparent;\n}\n\n.markdown-body img[align=right] {\n  padding-left: 20px;\n}\n\n.markdown-body img[align=left] {\n  padding-right: 20px;\n}\n\n.markdown-body .emoji {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n\n.markdown-body span.frame {\n  display: block;\n  overflow: hidden;\n}\n\n.markdown-body span.frame>span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid #d0d7de;\n}\n\n.markdown-body span.frame span img {\n  display: block;\n  float: left;\n}\n\n.markdown-body span.frame span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: #24292f;\n}\n\n.markdown-body span.align-center {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-center>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n\n.markdown-body span.align-center span img {\n  margin: 0 auto;\n  text-align: center;\n}\n\n.markdown-body span.align-right {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-right>span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body span.align-right span img {\n  margin: 0;\n  text-align: right;\n}\n\n.markdown-body span.float-left {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-left span {\n  margin: 13px 0 0;\n}\n\n.markdown-body span.float-right {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-right>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body code,\n.markdown-body tt {\n  padding: .2em .4em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(175,184,193,0.2);\n  border-radius: 6px;\n}\n\n.markdown-body code br,\n.markdown-body tt br {\n  display: none;\n}\n\n.markdown-body del code {\n  text-decoration: inherit;\n}\n\n.markdown-body pre code {\n  font-size: 100%;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f6f8fa;\n  border-radius: 6px;\n}\n\n.markdown-body pre code,\n.markdown-body pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body .csv-data td,\n.markdown-body .csv-data th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n\n.markdown-body .csv-data .blob-num {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: #ffffff;\n  border: 0;\n}\n\n.markdown-body .csv-data tr {\n  border-top: 0;\n}\n\n.markdown-body .csv-data th {\n  font-weight: 600;\n  background: #f6f8fa;\n  border-top: 0;\n}\n\n.markdown-body .footnotes {\n  font-size: 12px;\n  color: #57606a;\n  border-top: 1px solid #d0d7de;\n}\n\n.markdown-body .footnotes ol {\n  padding-left: 16px;\n}\n\n.markdown-body .footnotes li {\n  position: relative;\n}\n\n.markdown-body .footnotes li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: "";\n  border: 2px solid #0969da;\n  border-radius: 6px;\n}\n\n.markdown-body .footnotes li:target {\n  color: #24292f;\n}\n\n.markdown-body .footnotes .data-footnote-backref g-emoji {\n  font-family: monospace;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item label {\n  font-weight: 400;\n}\n\n.markdown-body .task-list-item.enabled label {\n  cursor: pointer;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item .handle {\n  display: none;\n}\n\n.markdown-body .task-list-item-checkbox {\n  margin: 0 .2em .25em -1.6em;\n  vertical-align: middle;\n}\n\n.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox {\n  margin: 0 -1.6em .25em .2em;\n}\n\n.markdown-body ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n'],sourceRoot:""}]);const l=i},2232:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var r=t(7537),o=t.n(r),a=t(3645),i=t.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;700&display=swap);"]),i.push([e.id,"html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font:inherit;font-size:100%;margin:0;padding:0;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:''}table{border-collapse:collapse;border-spacing:0}*{box-sizing:border-box}body{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;line-height:1}button{appearance:none;background-color:transparent;border:0;cursor:pointer;padding:0}button:focus,button:active{outline:0}a{text-decoration:none}b{font-weight:bold}i{font-style:italic}html{scroll-behavior:smooth}body{color:#000;font-family:\"Open Sans\",sans-serif;font-size:16px;font-style:normal}.search__label{display:block;margin-bottom:10px}.search__container{align-items:flex-end;display:flex;margin-bottom:8px}.search__input{background-color:#fff;border:2px solid #F6F8FA;border-radius:4px 0 0 4px;font-family:\"Open Sans\",sans-serif;font-size:16px;height:45px;margin:0;padding:10px;transition:border-color .15s ease-in-out;width:100%}.search__input:active,.search__input:focus{border-color:#b4c5d6;outline:0}@media (min-width: 768px){.search__input{min-width:350px;width:auto}}.search__btn{background-color:#F6F8FA;background-position:center;background-repeat:no-repeat;border-radius:0 4px 4px 0;height:45px;padding:0 10px}.search__btn:active,.search__btn:focus,.search__btn:hover{background-color:#d5dfe8}.search__error-message{color:#E97158;font-size:14px}.search--error .search__input{border-color:#E97158}.search--error .search__input:active,.search--error .search__input:focus{border-color:#E97158}.search--error .search__btn{background-color:#E97158;color:#fff}.search--error .search__btn:active,.search--error .search__btn:focus,.search--error .search__btn:hover{background-color:#E97158}@keyframes spinnerAnim{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}.loader--show .loader__spinner{display:block}.loader__spinner{display:none;margin:0 auto}.loader__spinner::after{animation:spinnerAnim 1.5s linear infinite;border:5px solid #F6F8FA;border-radius:50%;border-right-color:#94acc3;border-top-color:#94acc3;content:'';display:block;height:30px;width:30px}.comment{border:2px solid #F6F8FA;border-radius:4px;margin-bottom:30px}.comment__header{background-color:#F6F8FA;padding:10px}.comment__title{font-weight:500}.comment__title span{color:#56799b;font-size:14px;font-weight:normal}.comment__body{padding:20px}.issues__container{margin:20px auto;width:95%}.issues__title{font-size:32px;font-weight:bold;margin:30px 0}.issues__content{align-items:center;display:flex;justify-content:center;margin-top:50px}.issues__table-container{overflow-x:scroll;width:100%}.issues__table{text-align:left;width:100%}.issues__table-header{background-color:#56799b;color:#fff;font-size:14px;font-weight:500;padding:20px;text-transform:uppercase}.issues__table-body tr{cursor:pointer}.issues__table-body tr:nth-child(even) td{background-color:#F6F8FA}.issues__table-data{padding:20px}.issues tr :first-child{padding-left:15px}.issue{min-height:100vh}.issue--fetching{align-items:center;display:flex;justify-content:center}.issue--fetching .issue__container{margin:0;width:0}.issue__container{margin:20px auto;width:90%}.issue__link{color:#56799b;display:inline-block;font-size:14px;margin-bottom:15px;text-transform:uppercase}.issue__link:hover{text-decoration:underline}.issue__title{font-size:24px;font-weight:bold;margin-bottom:15px}.issue__subtitle{font-size:20px;font-weight:bold;margin-bottom:30px}.issue__text{margin-bottom:10px}.issue__text span{color:#000;font-weight:500;text-transform:uppercase}.issue__divider{background-color:#94acc3;border:0;height:1px;margin:20px 0}.issue__content{border:2px solid #F6F8FA;border-radius:4px;padding:20px}.issue__comments{margin-top:30px}.issue__state{text-transform:capitalize}.issue__state--open{color:#A0BC57}.issue__state--closed{color:#E97158}@media (min-width: 768px){.issue__container{width:75%}.issue__title{font-size:32px}.issue__subtitle{font-size:28px}}\n","",{version:3,sources:["webpack://./src/styles/base/_reset.scss","webpack://./src/styles/index.scss","webpack://./src/styles/base/_theme.scss","webpack://./src/styles/components/_search.scss","webpack://./src/styles/base/_mixins.scss","webpack://./src/styles/components/_loader.scss","webpack://./src/styles/components/_comment-card.scss","webpack://./src/styles/views/_issues.scss","webpack://./src/styles/views/_issue.scss"],names:[],mappings:"AAKA,2ZAiFC,QAAS,CACT,YAAa,CACb,cAAe,CACf,QAAS,CACT,SAAU,CACV,uBAAwB,CACxB,8EAcA,aAAc,CACd,MAIA,eAAgB,CAChB,aAIA,WAAY,CAFb,oDAME,UAAW,CACX,MAID,wBAAyB,CACzB,gBAAiB,CACjB,EAIA,qBAAsB,CACtB,KAGA,iCAAkC,CAClC,kCAAmC,CACnC,aAAc,CACd,OAGA,eAAgB,CAChB,4BAA6B,CAC7B,QAAS,CACT,cAAe,CACf,SAAU,CALX,2BASE,SAAU,CACV,EAID,oBAAqB,CACrB,EAGA,gBAAiB,CACjB,EAGA,iBAAkB,CC7JnB,KACC,sBAAuB,CACvB,KAGA,UCHiB,CDIjB,kCCRqC,CDSrC,cAAe,CACf,iBAAkB,CAClB,eEZC,aAAc,CACd,kBAAmB,CACnB,mBAGA,oBAAqB,CACrB,YAAa,CACb,iBAAkB,CAClB,eAGA,qBDPgB,CCQhB,wBDNwB,CCOxB,yBAA0B,CAC1B,kCDboC,CCcpC,cAAe,CACf,WAAY,CACZ,QAAS,CACT,YAAa,CACb,wCAAyC,CACzC,UAAW,CAVX,2CAcC,oBAA4C,CAC5C,SAAU,CCzBZ,0BDUA,eAmBE,eAAgB,CAChB,UAAW,CAEZ,CAED,aACC,wBD7BwB,CC8BxB,0BAA2B,CAC3B,2BAA4B,CAC5B,yBAA0B,CAC1B,WAAY,CACZ,cAAe,CANf,0DAWC,wBAAgD,CAChD,uBAID,aD3CiB,CC4CjB,cAAe,CACf,8BAIC,oBDjDgB,CC+CjB,yEAME,oBDrDe,CC+CjB,4BAWC,wBD1DgB,CC2DhB,UD9De,CCkDhB,uGAiBE,wBDhEe,CCiEf,uBExEH,KAAO,sBAAuB,CAC9B,GAAK,wBAAyB,CAAA,CAI7B,+BAEC,aAAc,CACd,iBAID,YAAa,CACb,aAAc,CAFd,wBAKC,0CAA2C,CAC3C,wBHXuB,CGYvB,iBAAkB,CAClB,0BAAkD,CAClD,wBAAgD,CAChD,UAAW,CACX,aAAc,CACd,WAAY,CACZ,UAAW,CACX,SC1BF,wBJOyB,CINzB,iBAAkB,CAClB,kBAAmB,CAEnB,iBACC,wBJEwB,CIDxB,YAAa,CACb,gBAGA,eAAgB,CADhB,qBAIC,aAAqC,CACrC,cAAe,CACf,kBAAmB,CACnB,eAID,YAAa,CACb,mBCpBA,gBAAiB,CACjB,SAAU,CACV,eAGA,cAAe,CACf,gBAAiB,CACjB,aAAc,CACd,iBAGA,kBAAmB,CACnB,YAAa,CACb,sBAAuB,CACvB,eAAgB,CAChB,yBAGA,iBAAkB,CAClB,UAAW,CACX,eAGA,eAAgB,CAChB,UAAW,CACX,sBAGA,wBAAgD,CAChD,ULzBgB,CK0BhB,cAAe,CACf,eAAgB,CAChB,YAAa,CACb,wBAAyB,CACzB,uBAIC,cAAe,CAFhB,0CAMG,wBLpCqB,CKqCrB,oBAMH,YAAa,CAnDf,wBAwDG,iBAAkB,CAClB,OCxDF,gBAAiB,CAEjB,iBACC,kBAAmB,CACnB,YAAa,CACb,sBAAuB,CAHvB,mCAMC,QAAS,CACT,OAAQ,CACR,kBAID,gBAAiB,CACjB,SAAU,CACV,aAGA,aAAqC,CACrC,oBAAqB,CACrB,cAAe,CACf,kBAAmB,CACnB,wBAAyB,CALzB,mBAQC,yBAA0B,CAC1B,cAID,cAAe,CACf,gBAAiB,CACjB,kBAAmB,CACnB,iBAGA,cAAe,CACf,gBAAiB,CACjB,kBAAmB,CACnB,aAGA,kBAAmB,CADnB,kBAIC,UNxCe,CMyCf,eAAgB,CAChB,wBAAyB,CACzB,gBAID,wBAAgD,CAChD,QAAS,CACT,UAAW,CACX,aAAc,CACd,gBAGA,wBNrDwB,CMsDxB,iBAAkB,CAClB,YAAa,CACb,iBAGA,eAAgB,CAChB,cAGA,yBAA0B,CAE1B,oBACC,aNhEkB,CMiElB,sBAGA,aNrEgB,CEPlB,0BIiFC,kBACC,SAAU,CACV,cAGA,cAAe,CACf,iBAGA,cAAe,CACf",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/\n\tv2.0 | 20110126\n\tLicense: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n\tborder: 0;\n\tfont: inherit;\n\tfont-size: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n\tdisplay: block;\n}\n\nol,\nul {\n\tlist-style: none;\n}\n\nblockquote,\nq {\n\tquotes: none;\n\n\t&:before,\n\t&:after {\n\t\tcontent: '';\n\t}\n}\n\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* Custom reset */\n* {\n\tbox-sizing: border-box;\n}\n\nbody {\n\t-moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes\n\t-webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes\n\tline-height: 1;\n}\n\nbutton {\n\tappearance: none;\n\tbackground-color: transparent;\n\tborder: 0;\n\tcursor: pointer;\n\tpadding: 0;\n\n\t&:focus,\n\t&:active {\n\t\toutline: 0;\n\t}\n}\n\na {\n\ttext-decoration: none;\n}\n\nb {\n\tfont-weight: bold;\n}\n\ni {\n\tfont-style: italic;\n}","/* Base styles */\n@import 'base/reset';\n@import 'base/mixins';\n@import 'base/theme';\n\nhtml {\n\tscroll-behavior: smooth;\n}\n\nbody {\n\tcolor: $color-black;\n\tfont-family: $font-primary;\n\tfont-size: 16px;\n\tfont-style: normal;\n}\n\n/* Components */\n@import 'components/search';\n@import 'components/loader';\n@import 'components/comment-card';\n\n/* Views */\n@import 'views/issues';\n@import 'views/issue';\n","/* Fonts */\n@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;700&display=swap');\n\n$font-primary: 'Open Sans', sans-serif;\n\n/* Colors */\n$color-white: #FFF;\n$color-black: #000;\n$color-light-gray: #F6F8FA;\n$color-red: #E97158;\n$color-green: #A0BC57;\n",".search {\n\t&__label {\n\t\tdisplay: block;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t&__container {\n\t\talign-items: flex-end;\n\t\tdisplay: flex;\n\t\tmargin-bottom: 8px;\n\t}\n\n\t&__input {\n\t\tbackground-color: $color-white;\n\t\tborder: 2px solid $color-light-gray;\n\t\tborder-radius: 4px 0 0 4px;\n\t\tfont-family: $font-primary;\n\t\tfont-size: 16px;\n\t\theight: 45px;\n\t\tmargin: 0;\n\t\tpadding: 10px;\n\t\ttransition: border-color .15s ease-in-out;\n\t\twidth: 100%;\n\n\t\t&:active,\n\t\t&:focus {\n\t\t\tborder-color: darken($color-light-gray, 20%);\n\t\t\toutline: 0;\n\t\t}\n\n\t\t@include breakpoint-tablet {\n\t\t\tmin-width: 350px;\n\t\t\twidth: auto;\n\t\t}\n\t}\n\n\t&__btn {\n\t\tbackground-color: $color-light-gray;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\tborder-radius: 0 4px 4px 0;\n\t\theight: 45px;\n\t\tpadding: 0 10px;\n\n\t\t&:active,\n\t\t&:focus,\n\t\t&:hover {\n\t\t\tbackground-color: darken($color-light-gray, 10%);\n\t\t}\n\t}\n\n\t&__error-message {\n\t\tcolor: $color-red;\n\t\tfont-size: 14px;\n\t}\n\n\t&--error {\n\t\t.search__input {\n\t\t\tborder-color: $color-red;\n\n\t\t\t&:active,\n\t\t\t&:focus {\n\t\t\t\tborder-color: $color-red;\n\t\t\t}\n\t\t}\n\n\t\t.search__btn {\n\t\t\tbackground-color: $color-red;\n\t\t\tcolor: $color-white;\n\n\t\t\t&:active,\n\t\t\t&:focus,\n\t\t\t&:hover {\n\t\t\t\tbackground-color: $color-red;\n\t\t\t}\n\t\t}\n\t}\n}\n","/* Responsive mixins */\n@mixin media-min-width($width) {\n\t@media (min-width: $width) {\n\t\t@content;\n\t}\n}\n\n/* Mobile first breakpoints */\n@mixin breakpoint-tablet {\n\t@include media-min-width(768px) {\n\t\t@content;\n\t}\n}\n\n@mixin breakpoint-laptop {\n\t@include media-min-width(1024px) {\n\t\t@content;\n\t}\n}\n\n@mixin breakpoint-desktop {\n\t@include media-min-width(1280px) {\n\t\t@content;\n\t}\n}\n\n@mixin breakpoint-hd {\n\t@include media-min-width(1440px) {\n\t\t@content;\n\t}\n}","\n@keyframes spinnerAnim {\n\tfrom { transform: rotate(0deg); }\n\tto { transform: rotate(360deg); }\n}\n\n.loader {\n\t&--show {\n\t\t.loader__spinner {\n\t\t\tdisplay: block;\n\t\t}\n\t}\n\n\t&__spinner {\n\t\tdisplay: none;\n\t\tmargin: 0 auto;\n\n\t\t&::after {\n\t\t\tanimation: spinnerAnim 1.5s linear infinite;\n\t\t\tborder: 5px solid $color-light-gray;\n\t\t\tborder-radius: 50%;\n\t\t\tborder-right-color: darken($color-light-gray, 30%);\n\t\t\tborder-top-color: darken($color-light-gray, 30%);\n\t\t\tcontent: '';\n\t\t\tdisplay: block;\n\t\t\theight: 30px;\n\t\t\twidth: 30px;\n\t\t}\n\t}\n}\n",".comment {\n\tborder: 2px solid $color-light-gray;\n\tborder-radius: 4px;\n\tmargin-bottom: 30px;\n\n\t&__header {\n\t\tbackground-color: $color-light-gray;\n\t\tpadding: 10px;\n\t}\n\n\t&__title {\n\t\tfont-weight: 500;\n\n\t\tspan {\n\t\t\tcolor: darken($color-light-gray, 50%);\n\t\t\tfont-size: 14px;\n\t\t\tfont-weight: normal;\n\t\t}\n\t}\n\n\t&__body {\n\t\tpadding: 20px;\n\t}\n}\n",".issues {\n\t&__container {\n\t\tmargin: 20px auto;\n\t\twidth: 95%;\n\t}\n\n\t&__title {\n\t\tfont-size: 32px;\n\t\tfont-weight: bold;\n\t\tmargin: 30px 0;\n\t}\n\n\t&__content {\n\t\talign-items: center;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\tmargin-top: 50px;\n\t}\n\n\t&__table-container {\n\t\toverflow-x: scroll;\n\t\twidth: 100%;\n\t}\n\n\t&__table {\n\t\ttext-align: left;\n\t\twidth: 100%;\n\t}\n\n\t&__table-header {\n\t\tbackground-color: darken($color-light-gray, 50%);\n\t\tcolor: $color-white;\n\t\tfont-size: 14px;\n\t\tfont-weight: 500;\n\t\tpadding: 20px;\n\t\ttext-transform: uppercase;\n\t}\n\n\t&__table-body {\n\t\ttr {\n\t\t\tcursor: pointer;\n\n\t\t\t&:nth-child(even) {\n\t\t\t\ttd {\n\t\t\t\t\tbackground-color: $color-light-gray;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&__table-data {\n\t\tpadding: 20px;\n\t}\n\n\ttr {\n\t\t:first-child {\n\t\t\tpadding-left: 15px;\n\t\t}\n\t}\n}\n",".issue {\n\tmin-height: 100vh;\n\n\t&--fetching {\n\t\talign-items: center;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\n\t\t.issue__container {\n\t\t\tmargin: 0;\n\t\t\twidth: 0;\n\t\t}\n\t}\n\n\t&__container {\n\t\tmargin: 20px auto;\n\t\twidth: 90%;\n\t}\n\n\t&__link {\n\t\tcolor: darken($color-light-gray, 50%);\n\t\tdisplay: inline-block;\n\t\tfont-size: 14px;\n\t\tmargin-bottom: 15px;\n\t\ttext-transform: uppercase;\n\n\t\t&:hover {\n\t\t\ttext-decoration: underline;\n\t\t}\n\t}\n\n\t&__title {\n\t\tfont-size: 24px;\n\t\tfont-weight: bold;\n\t\tmargin-bottom: 15px;\n\t}\n\n\t&__subtitle {\n\t\tfont-size: 20px;\n\t\tfont-weight: bold;\n\t\tmargin-bottom: 30px;\n\t}\n\n\t&__text {\n\t\tmargin-bottom: 10px;\n\n\t\tspan {\n\t\t\tcolor: $color-black;\n\t\t\tfont-weight: 500;\n\t\t\ttext-transform: uppercase;\n\t\t}\n\t}\n\n\t&__divider {\n\t\tbackground-color: darken($color-light-gray, 30%);\n\t\tborder: 0;\n\t\theight: 1px;\n\t\tmargin: 20px 0;\n\t}\n\n\t&__content {\n\t\tborder: 2px solid $color-light-gray;\n\t\tborder-radius: 4px;\n\t\tpadding: 20px;\n\t}\n\n\t&__comments {\n\t\tmargin-top: 30px;\n\t}\n\n\t&__state {\n\t\ttext-transform: capitalize;\n\n\t\t&--open {\n\t\t\tcolor: $color-green;\n\t\t}\n\n\t\t&--closed {\n\t\t\tcolor: $color-red;\n\t\t}\n\t}\n\n\t@include breakpoint-tablet {\n\t\t&__container {\n\t\t\twidth: 75%;\n\t\t}\n\n\t\t&__title {\n\t\t\tfont-size: 32px;\n\t\t}\n\n\t\t&__subtitle {\n\t\t\tfont-size: 28px;\n\t\t}\n\t}\n}\n"],sourceRoot:""}]);const l=i},3645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},7537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},4470:e=>{"use strict";var n=Object.prototype.hasOwnProperty,t=Object.prototype.toString,r=Object.defineProperty,o=Object.getOwnPropertyDescriptor,a=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===t.call(e)},i=function(e){if(!e||"[object Object]"!==t.call(e))return!1;var r,o=n.call(e,"constructor"),a=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!a)return!1;for(r in e);return void 0===r||n.call(e,r)},l=function(e,n){r&&"__proto__"===n.name?r(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},s=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var n,t,r,o,c,u,d=arguments[0],f=1,p=arguments.length,m=!1;for("boolean"==typeof d&&(m=d,d=arguments[1]||{},f=2),(null==d||"object"!=typeof d&&"function"!=typeof d)&&(d={});f<p;++f)if(null!=(n=arguments[f]))for(t in n)r=s(d,t),d!==(o=s(n,t))&&(m&&o&&(i(o)||(c=a(o)))?(c?(c=!1,u=r&&a(r)?r:[]):u=r&&i(r)?r:{},l(d,{name:t,newValue:e(m,u,o)})):void 0!==o&&l(d,{name:t,newValue:o}));return d}},6291:e=>{!function(){var n;function t(e){for(var n,t,r,o,a=1,i=[].slice.call(arguments),l=0,s=e.length,c="",u=!1,d=!1,f=function(){return i[a++]},p=function(){for(var t="";/\d/.test(e[l]);)t+=e[l++],n=e[l];return t.length>0?parseInt(t):null};l<s;++l)if(n=e[l],u)switch(u=!1,"."==n?(d=!1,n=e[++l]):"0"==n&&"."==e[l+1]?(d=!0,n=e[l+=2]):d=!0,o=p(),n){case"b":c+=parseInt(f(),10).toString(2);break;case"c":c+="string"==typeof(t=f())||t instanceof String?t:String.fromCharCode(parseInt(t,10));break;case"d":c+=parseInt(f(),10);break;case"f":r=String(parseFloat(f()).toFixed(o||6)),c+=d?r:r.replace(/^0/,"");break;case"j":c+=JSON.stringify(f());break;case"o":c+="0"+parseInt(f(),10).toString(8);break;case"s":c+=f();break;case"x":c+="0x"+parseInt(f(),10).toString(16);break;case"X":c+="0x"+parseInt(f(),10).toString(16).toUpperCase();break;default:c+=n}else"%"===n?u=!0:c+=n;return c}(n=e.exports=t).format=t,n.vsprintf=function(e,n){return t.apply(null,[e].concat(n))},"undefined"!=typeof console&&"function"==typeof console.log&&(n.printf=function(){console.log(t.apply(null,arguments))})}()},8139:e=>{var n=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,t=/\n/g,r=/^\s*/,o=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,a=/^:\s*/,i=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,l=/^[;\s]*/,s=/^\s+|\s+$/g,c="";function u(e){return e?e.replace(s,c):c}e.exports=function(e,s){if("string"!=typeof e)throw new TypeError("First argument must be a string");if(!e)return[];s=s||{};var d=1,f=1;function p(e){var n=e.match(t);n&&(d+=n.length);var r=e.lastIndexOf("\n");f=~r?e.length-r:f+e.length}function m(){var e={line:d,column:f};return function(n){return n.position=new g(e),v(),n}}function g(e){this.start=e,this.end={line:d,column:f},this.source=s.source}g.prototype.content=e;var h=[];function b(n){var t=new Error(s.source+":"+d+":"+f+": "+n);if(t.reason=n,t.filename=s.source,t.line=d,t.column=f,t.source=e,!s.silent)throw t;h.push(t)}function y(n){var t=n.exec(e);if(t){var r=t[0];return p(r),e=e.slice(r.length),t}}function v(){y(r)}function w(e){var n;for(e=e||[];n=A();)!1!==n&&e.push(n);return e}function A(){var n=m();if("/"==e.charAt(0)&&"*"==e.charAt(1)){for(var t=2;c!=e.charAt(t)&&("*"!=e.charAt(t)||"/"!=e.charAt(t+1));)++t;if(t+=2,c===e.charAt(t-1))return b("End of comment missing");var r=e.slice(2,t-2);return f+=2,p(r),e=e.slice(t),f+=2,n({type:"comment",comment:r})}}function k(){var e=m(),t=y(o);if(t){if(A(),!y(a))return b("property missing ':'");var r=y(i),s=e({type:"declaration",property:u(t[0].replace(n,c)),value:r?u(r[0].replace(n,c)):c});return y(l),s}}return v(),function(){var e,n=[];for(w(n);e=k();)!1!==e&&(n.push(e),w(n));return n}()}},8738:e=>{e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},729:e=>{"use strict";var n={};function t(e,r,o){var a,i,l,s,c,u="";for("string"!=typeof r&&(o=r,r=t.defaultChars),void 0===o&&(o=!0),c=function(e){var t,r,o=n[e];if(o)return o;for(o=n[e]=[],t=0;t<128;t++)r=String.fromCharCode(t),/^[0-9a-z]$/i.test(r)?o.push(r):o.push("%"+("0"+t.toString(16).toUpperCase()).slice(-2));for(t=0;t<e.length;t++)o[e.charCodeAt(t)]=e[t];return o}(r),a=0,i=e.length;a<i;a++)if(l=e.charCodeAt(a),o&&37===l&&a+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(a+1,a+3)))u+=e.slice(a,a+3),a+=2;else if(l<128)u+=c[l];else if(l>=55296&&l<=57343){if(l>=55296&&l<=56319&&a+1<i&&(s=e.charCodeAt(a+1))>=56320&&s<=57343){u+=encodeURIComponent(e[a]+e[a+1]),a++;continue}u+="%EF%BF%BD"}else u+=encodeURIComponent(e[a]);return u}t.defaultChars=";/?:@&=+$,-_.!~*'()#",t.componentChars="-_.!~*'()",e.exports=t},7418:e=>{"use strict";var n=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),c=1;c<arguments.length;c++){for(var u in i=Object(arguments[c]))t.call(i,u)&&(s[u]=i[u]);if(n){l=n(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},2703:(e,n,t)=>{"use strict";var r=t(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:a,resetWarningCache:o};return t.PropTypes=t,t}},5697:(e,n,t)=>{e.exports=t(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,n,t)=>{"use strict";var r=t(7294),o=t(7418),a=t(3840);function i(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,s={};function c(e,n){u(e,n),u(e+"Capture",n)}function u(e,n){for(s[e]=n,e=0;e<n.length;e++)l.add(n[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},g={};function h(e,n,t,r,o,a,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a,this.removeEmptyString=i}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];b[n]=new h(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function w(e,n,t,r){var o=b.hasOwnProperty(n)?b[n]:null;(null!==o?0===o.type:!r&&2<n.length&&("o"===n[0]||"O"===n[0])&&("n"===n[1]||"N"===n[1]))||(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,o,r)&&(t=null),r||null===o?function(e){return!!p.call(g,e)||!p.call(m,e)&&(f.test(e)?g[e]=!0:(m[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):o.mustUseProperty?e[o.propertyName]=null===t?3!==o.type&&"":t:(n=o.attributeName,r=o.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(o=o.type)||4===o&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(y,v);b[n]=new h(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(y,v);b[n]=new h(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(y,v);b[n]=new h(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,C=60106,_=60107,x=60108,E=60114,S=60109,B=60110,N=60112,O=60113,M=60120,T=60115,I=60116,R=60121,L=60128,D=60129,P=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),C=F("react.portal"),_=F("react.fragment"),x=F("react.strict_mode"),E=F("react.profiler"),S=F("react.provider"),B=F("react.context"),N=F("react.forward_ref"),O=F("react.suspense"),M=F("react.suspense_list"),T=F("react.memo"),I=F("react.lazy"),R=F("react.block"),F("react.scope"),L=F("react.opaque.id"),D=F("react.debug_trace_mode"),P=F("react.offscreen"),z=F("react.legacy_hidden")}var j,U="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function q(e){if(void 0===j)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);j=n&&n[1]||""}return"\n"+j+e}var H=!1;function G(e,n){if(!e||H)return"";H=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?q(e):""}function W(e){switch(e.tag){case 5:return q(e.type);case 16:return q("Lazy");case 13:return q("Suspense");case 19:return q("SuspenseList");case 0:case 2:case 15:return G(e.type,!1);case 11:return G(e.type.render,!1);case 22:return G(e.type._render,!1);case 1:return G(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case C:return"Portal";case E:return"Profiler";case x:return"StrictMode";case O:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case N:var n=e.render;return n=n.displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case T:return K(e.type);case R:return K(e._render);case I:n=e._payload,e=e._init;try{return K(e(n))}catch(e){}}return null}function V(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Z(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var n=Z(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function X(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=Z(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function J(e,n){var t=n.checked;return o({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function ee(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function ne(e,n){null!=(n=n.checked)&&w(e,"checked",n,!1)}function te(e,n){ne(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?oe(e,n.type,t):n.hasOwnProperty("defaultValue")&&oe(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function re(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function oe(e,n,t){"number"===n&&Y(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}function ae(e,n){return e=o({children:void 0},n),(n=function(e){var n="";return r.Children.forEach(e,(function(e){null!=e&&(n+=e)})),n}(n.children))&&(e.children=n),e}function ie(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function le(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(i(91));return o({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(i(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(i(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function ce(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ue(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var me,ge,he=(ge=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,n)}))}:ge);function be(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ve=["Webkit","ms","Moz","O"];function we(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||ye.hasOwnProperty(e)&&ye[e]?(""+n).trim():n+"px"}function Ae(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),o=we(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,o):e[t]=o}}Object.keys(ye).forEach((function(e){ve.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),ye[n]=ye[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ce(e,n){if(n){if(ke[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(i(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(i(62))}}function _e(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Se=null,Be=null;function Ne(e){if(e=to(e)){if("function"!=typeof Ee)throw Error(i(280));var n=e.stateNode;n&&(n=oo(n),Ee(e.stateNode,e.type,n))}}function Oe(e){Se?Be?Be.push(e):Be=[e]:Se=e}function Me(){if(Se){var e=Se,n=Be;if(Be=Se=null,Ne(e),n)for(e=0;e<n.length;e++)Ne(n[e])}}function Te(e,n){return e(n)}function Ie(e,n,t,r,o){return e(n,t,r,o)}function Re(){}var Le=Te,De=!1,Pe=!1;function ze(){null===Se&&null===Be||(Re(),Me())}function Fe(e,n){var t=e.stateNode;if(null===t)return null;var r=oo(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var je=!1;if(d)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){je=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(ge){je=!1}function $e(e,n,t,r,o,a,i,l,s){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(e){this.onError(e)}}var qe=!1,He=null,Ge=!1,We=null,Ke={onError:function(e){qe=!0,He=e}};function Ve(e,n,t,r,o,a,i,l,s){qe=!1,He=null,$e.apply(Ke,arguments)}function Ze(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(1026&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Qe(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function Xe(e){if(Ze(e)!==e)throw Error(i(188))}function Ye(e){if(e=function(e){var n=e.alternate;if(!n){if(null===(n=Ze(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return Xe(o),e;if(a===r)return Xe(o),n;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===t){l=!0,t=o,r=a;break}if(s===r){l=!0,r=o,t=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===t){l=!0,t=a,r=o;break}if(s===r){l=!0,r=a,t=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(e),!e)return null;for(var n=e;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===e)break;for(;!n.sibling;){if(!n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}function Je(e,n){for(var t=e.alternate;null!==n;){if(n===e||n===t)return!0;n=n.return}return!1}var en,nn,tn,rn,on=!1,an=[],ln=null,sn=null,cn=null,un=new Map,dn=new Map,fn=[],pn="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function mn(e,n,t,r,o){return{blockedOn:e,domEventName:n,eventSystemFlags:16|t,nativeEvent:o,targetContainers:[r]}}function gn(e,n){switch(e){case"focusin":case"focusout":ln=null;break;case"dragenter":case"dragleave":sn=null;break;case"mouseover":case"mouseout":cn=null;break;case"pointerover":case"pointerout":un.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":dn.delete(n.pointerId)}}function hn(e,n,t,r,o,a){return null===e||e.nativeEvent!==a?(e=mn(n,t,r,o,a),null!==n&&null!==(n=to(n))&&nn(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function bn(e){var n=no(e.target);if(null!==n){var t=Ze(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Qe(t)))return e.blockedOn=n,void rn(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){tn(t)}))}))}else if(3===n&&t.stateNode.hydrate)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function yn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Jn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=to(t))&&nn(n),e.blockedOn=t,!1;n.shift()}return!0}function vn(e,n,t){yn(e)&&t.delete(n)}function wn(){for(on=!1;0<an.length;){var e=an[0];if(null!==e.blockedOn){null!==(e=to(e.blockedOn))&&en(e);break}for(var n=e.targetContainers;0<n.length;){var t=Jn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t){e.blockedOn=t;break}n.shift()}null===e.blockedOn&&an.shift()}null!==ln&&yn(ln)&&(ln=null),null!==sn&&yn(sn)&&(sn=null),null!==cn&&yn(cn)&&(cn=null),un.forEach(vn),dn.forEach(vn)}function An(e,n){e.blockedOn===n&&(e.blockedOn=null,on||(on=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wn)))}function kn(e){function n(n){return An(n,e)}if(0<an.length){An(an[0],e);for(var t=1;t<an.length;t++){var r=an[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ln&&An(ln,e),null!==sn&&An(sn,e),null!==cn&&An(cn,e),un.forEach(n),dn.forEach(n),t=0;t<fn.length;t++)(r=fn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<fn.length&&null===(t=fn[0]).blockedOn;)bn(t),null===t.blockedOn&&fn.shift()}function Cn(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var _n={animationend:Cn("Animation","AnimationEnd"),animationiteration:Cn("Animation","AnimationIteration"),animationstart:Cn("Animation","AnimationStart"),transitionend:Cn("Transition","TransitionEnd")},xn={},En={};function Sn(e){if(xn[e])return xn[e];if(!_n[e])return e;var n,t=_n[e];for(n in t)if(t.hasOwnProperty(n)&&n in En)return xn[e]=t[n];return e}d&&(En=document.createElement("div").style,"AnimationEvent"in window||(delete _n.animationend.animation,delete _n.animationiteration.animation,delete _n.animationstart.animation),"TransitionEvent"in window||delete _n.transitionend.transition);var Bn=Sn("animationend"),Nn=Sn("animationiteration"),On=Sn("animationstart"),Mn=Sn("transitionend"),Tn=new Map,In=new Map,Rn=["abort","abort",Bn,"animationEnd",Nn,"animationIteration",On,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mn,"transitionEnd","waiting","waiting"];function Ln(e,n){for(var t=0;t<e.length;t+=2){var r=e[t],o=e[t+1];o="on"+(o[0].toUpperCase()+o.slice(1)),In.set(r,n),Tn.set(r,o),c(o,[r])}}(0,a.unstable_now)();var Dn=8;function Pn(e){if(0!=(1&e))return Dn=15,1;if(0!=(2&e))return Dn=14,2;if(0!=(4&e))return Dn=13,4;var n=24&e;return 0!==n?(Dn=12,n):0!=(32&e)?(Dn=11,32):0!=(n=192&e)?(Dn=10,n):0!=(256&e)?(Dn=9,256):0!=(n=3584&e)?(Dn=8,n):0!=(4096&e)?(Dn=7,4096):0!=(n=4186112&e)?(Dn=6,n):0!=(n=62914560&e)?(Dn=5,n):67108864&e?(Dn=4,67108864):0!=(134217728&e)?(Dn=3,134217728):0!=(n=805306368&e)?(Dn=2,n):0!=(1073741824&e)?(Dn=1,1073741824):(Dn=8,e)}function zn(e,n){var t=e.pendingLanes;if(0===t)return Dn=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Dn=15;else if(0!=(a=134217727&t)){var s=a&~i;0!==s?(r=Pn(s),o=Dn):0!=(l&=a)&&(r=Pn(l),o=Dn)}else 0!=(a=t&~i)?(r=Pn(a),o=Dn):0!==l&&(r=Pn(l),o=Dn);if(0===r)return 0;if(r=t&((0>(r=31-Hn(r))?0:1<<r)<<1)-1,0!==n&&n!==r&&0==(n&i)){if(Pn(n),o<=Dn)return n;Dn=o}if(0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)o=1<<(t=31-Hn(n)),r|=e[t],n&=~o;return r}function Fn(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function jn(e,n){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Un(24&~n))?jn(10,n):e;case 10:return 0===(e=Un(192&~n))?jn(8,n):e;case 8:return 0===(e=Un(3584&~n))&&0===(e=Un(4186112&~n))&&(e=512),e;case 2:return 0===(n=Un(805306368&~n))&&(n=268435456),n}throw Error(i(358,e))}function Un(e){return e&-e}function $n(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function qn(e,n,t){e.pendingLanes|=n;var r=n-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[n=31-Hn(n)]=t}var Hn=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Gn(e)/Wn|0)|0},Gn=Math.log,Wn=Math.LN2,Kn=a.unstable_UserBlockingPriority,Vn=a.unstable_runWithPriority,Zn=!0;function Qn(e,n,t,r){De||Re();var o=Yn,a=De;De=!0;try{Ie(o,e,n,t,r)}finally{(De=a)||ze()}}function Xn(e,n,t,r){Vn(Kn,Yn.bind(null,e,n,t,r))}function Yn(e,n,t,r){var o;if(Zn)if((o=0==(4&n))&&0<an.length&&-1<pn.indexOf(e))e=mn(null,e,n,t,r),an.push(e);else{var a=Jn(e,n,t,r);if(null===a)o&&gn(e,r);else{if(o){if(-1<pn.indexOf(e))return e=mn(a,e,n,t,r),void an.push(e);if(function(e,n,t,r,o){switch(n){case"focusin":return ln=hn(ln,e,n,t,r,o),!0;case"dragenter":return sn=hn(sn,e,n,t,r,o),!0;case"mouseover":return cn=hn(cn,e,n,t,r,o),!0;case"pointerover":var a=o.pointerId;return un.set(a,hn(un.get(a)||null,e,n,t,r,o)),!0;case"gotpointercapture":return a=o.pointerId,dn.set(a,hn(dn.get(a)||null,e,n,t,r,o)),!0}return!1}(a,e,n,t,r))return;gn(e,r)}Rr(e,n,r,null,t)}}}function Jn(e,n,t,r){var o=xe(r);if(null!==(o=no(o))){var a=Ze(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Qe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Rr(e,n,r,o,t),null}var et=null,nt=null,tt=null;function rt(){if(tt)return tt;var e,n,t=nt,r=t.length,o="value"in et?et.value:et.textContent,a=o.length;for(e=0;e<r&&t[e]===o[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===o[a-n];n++);return tt=o.slice(e,1<n?1-n:void 0)}function ot(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function at(){return!0}function it(){return!1}function lt(e){function n(n,t,r,o,a){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?at:it,this.isPropagationStopped=it,this}return o(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=at)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=at)},persist:function(){},isPersistent:at}),n}var st,ct,ut,dt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ft=lt(dt),pt=o({},dt,{view:0,detail:0}),mt=lt(pt),gt=o({},pt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:St,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ut&&(ut&&"mousemove"===e.type?(st=e.screenX-ut.screenX,ct=e.screenY-ut.screenY):ct=st=0,ut=e),st)},movementY:function(e){return"movementY"in e?e.movementY:ct}}),ht=lt(gt),bt=lt(o({},gt,{dataTransfer:0})),yt=lt(o({},pt,{relatedTarget:0})),vt=lt(o({},dt,{animationName:0,elapsedTime:0,pseudoElement:0})),wt=o({},dt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),At=lt(wt),kt=lt(o({},dt,{data:0})),Ct={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},_t={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Et(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=xt[e])&&!!n[e]}function St(){return Et}var Bt=o({},pt,{key:function(e){if(e.key){var n=Ct[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=ot(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?_t[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:St,charCode:function(e){return"keypress"===e.type?ot(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ot(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nt=lt(Bt),Ot=lt(o({},gt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mt=lt(o({},pt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:St})),Tt=lt(o({},dt,{propertyName:0,elapsedTime:0,pseudoElement:0})),It=o({},gt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rt=lt(It),Lt=[9,13,27,32],Dt=d&&"CompositionEvent"in window,Pt=null;d&&"documentMode"in document&&(Pt=document.documentMode);var zt=d&&"TextEvent"in window&&!Pt,Ft=d&&(!Dt||Pt&&8<Pt&&11>=Pt),jt=String.fromCharCode(32),Ut=!1;function $t(e,n){switch(e){case"keyup":return-1!==Lt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ht=!1,Gt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Gt[e.type]:"textarea"===n}function Kt(e,n,t,r){Oe(r),0<(n=Dr(n,"onChange")).length&&(t=new ft("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Vt=null,Zt=null;function Qt(e){Br(e,0)}function Xt(e){if(X(ro(e)))return e}function Yt(e,n){if("change"===e)return n}var Jt=!1;if(d){var er;if(d){var nr="oninput"in document;if(!nr){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),nr="function"==typeof tr.oninput}er=nr}else er=!1;Jt=er&&(!document.documentMode||9<document.documentMode)}function rr(){Vt&&(Vt.detachEvent("onpropertychange",or),Zt=Vt=null)}function or(e){if("value"===e.propertyName&&Xt(Zt)){var n=[];if(Kt(n,Zt,e,xe(e)),e=Qt,De)e(n);else{De=!0;try{Te(e,n)}finally{De=!1,ze()}}}}function ar(e,n,t){"focusin"===e?(rr(),Zt=t,(Vt=n).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xt(Zt)}function lr(e,n){if("click"===e)return Xt(n)}function sr(e,n){if("input"===e||"change"===e)return Xt(n)}var cr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},ur=Object.prototype.hasOwnProperty;function dr(e,n){if(cr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++)if(!ur.call(n,t[r])||!cr(e[t[r]],n[t[r]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,n){var t,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function mr(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?mr(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function gr(){for(var e=window,n=Y();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=Y((e=n.contentWindow).document)}return n}function hr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var br=d&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,wr=null,Ar=!1;function kr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;Ar||null==yr||yr!==Y(r)||(r="selectionStart"in(r=yr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&dr(wr,r)||(wr=r,0<(r=Dr(vr,"onSelect")).length&&(n=new ft("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=yr)))}Ln("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ln("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ln(Rn,2);for(var Cr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),_r=0;_r<Cr.length;_r++)In.set(Cr[_r],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function Sr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,o,a,l,s,c){if(Ve.apply(this,arguments),qe){if(!qe)throw Error(i(198));var u=He;qe=!1,He=null,Ge||(Ge=!0,We=u)}}(r,n,void 0,e),e.currentTarget=null}function Br(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,c=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Sr(o,l,c),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,c=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Sr(o,l,c),a=s}}}if(Ge)throw e=We,Ge=!1,We=null,e}function Nr(e,n){var t=ao(n),r=e+"__bubble";t.has(r)||(Ir(n,e,2,!1),t.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Mr(e){e[Or]||(e[Or]=!0,l.forEach((function(n){Er.has(n)||Tr(n,!1,e,null),Tr(n,!0,e,null)})))}function Tr(e,n,t,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=t;if("selectionchange"===e&&9!==t.nodeType&&(a=t.ownerDocument),null!==r&&!n&&Er.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(n?"capture":"bubble");i.has(l)||(n&&(o|=4),Ir(a,e,o,n),i.add(l))}function Ir(e,n,t,r){var o=In.get(n);switch(void 0===o?2:o){case 0:o=Qn;break;case 1:o=Xn;break;default:o=Yn}t=o.bind(null,n,t,e),o=void 0,!je||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Rr(e,n,t,r,o){var a=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=no(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,n,t){if(Pe)return e();Pe=!0;try{Le(e,n,t)}finally{Pe=!1,ze()}}((function(){var r=a,o=xe(t),i=[];e:{var l=Tn.get(e);if(void 0!==l){var s=ft,c=e;switch(e){case"keypress":if(0===ot(t))break e;case"keydown":case"keyup":s=Nt;break;case"focusin":c="focus",s=yt;break;case"focusout":c="blur",s=yt;break;case"beforeblur":case"afterblur":s=yt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=ht;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=bt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Mt;break;case Bn:case Nn:case On:s=vt;break;case Mn:s=Tt;break;case"scroll":s=mt;break;case"wheel":s=Rt;break;case"copy":case"cut":case"paste":s=At;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Ot}var u=0!=(4&n),d=!u&&"scroll"===e,f=u?null!==l?l+"Capture":null:l;u=[];for(var p,m=r;null!==m;){var g=(p=m).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==f&&null!=(g=Fe(m,f))&&u.push(Lr(m,g,p))),d)break;m=m.return}0<u.length&&(l=new s(l,c,null,t,o),i.push({event:l,listeners:u}))}}if(0==(7&n)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&n)||!(c=t.relatedTarget||t.fromElement)||!no(c)&&!c[Jr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(c=(c=t.relatedTarget||t.toElement)?no(c):null)&&(c!==(d=Ze(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=ht,g="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(u=Ot,g="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==s?l:ro(s),p=null==c?l:ro(c),(l=new u(g,m+"leave",s,t,o)).target=d,l.relatedTarget=p,g=null,no(o)===r&&((u=new u(f,m+"enter",c,t,o)).target=p,u.relatedTarget=d,g=u),d=g,s&&c)e:{for(f=c,m=0,p=u=s;p;p=Pr(p))m++;for(p=0,g=f;g;g=Pr(g))p++;for(;0<m-p;)u=Pr(u),m--;for(;0<p-m;)f=Pr(f),p--;for(;m--;){if(u===f||null!==f&&u===f.alternate)break e;u=Pr(u),f=Pr(f)}u=null}else u=null;null!==s&&zr(i,l,s,u,!1),null!==c&&null!==d&&zr(i,d,c,u,!0)}if("select"===(s=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var h=Yt;else if(Wt(l))if(Jt)h=sr;else{h=ir;var b=ar}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(h=lr);switch(h&&(h=h(e,r))?Kt(i,h,t,o):(b&&b(e,l,r),"focusout"===e&&(b=l._wrapperState)&&b.controlled&&"number"===l.type&&oe(l,"number",l.value)),b=r?ro(r):window,e){case"focusin":(Wt(b)||"true"===b.contentEditable)&&(yr=b,vr=r,wr=null);break;case"focusout":wr=vr=yr=null;break;case"mousedown":Ar=!0;break;case"contextmenu":case"mouseup":case"dragend":Ar=!1,kr(i,t,o);break;case"selectionchange":if(br)break;case"keydown":case"keyup":kr(i,t,o)}var y;if(Dt)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Ht?$t(e,t)&&(v="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(v="onCompositionStart");v&&(Ft&&"ko"!==t.locale&&(Ht||"onCompositionStart"!==v?"onCompositionEnd"===v&&Ht&&(y=rt()):(nt="value"in(et=o)?et.value:et.textContent,Ht=!0)),0<(b=Dr(r,v)).length&&(v=new kt(v,e,null,t,o),i.push({event:v,listeners:b}),(y||null!==(y=qt(t)))&&(v.data=y))),(y=zt?function(e,n){switch(e){case"compositionend":return qt(n);case"keypress":return 32!==n.which?null:(Ut=!0,jt);case"textInput":return(e=n.data)===jt&&Ut?null:e;default:return null}}(e,t):function(e,n){if(Ht)return"compositionend"===e||!Dt&&$t(e,n)?(e=rt(),tt=nt=et=null,Ht=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Ft&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(r=Dr(r,"onBeforeInput")).length&&(o=new kt("onBeforeInput","beforeinput",null,t,o),i.push({event:o,listeners:r}),o.data=y)}Br(i,n)}))}function Lr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Dr(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,t))&&r.unshift(Lr(e,a,o)),null!=(a=Fe(e,n))&&r.push(Lr(e,a,o))),e=e.return}return r}function Pr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,n,t,r,o){for(var a=n._reactName,i=[];null!==t&&t!==r;){var l=t,s=l.alternate,c=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(s=Fe(t,a))&&i.unshift(Lr(t,s,l)):o||null!=(s=Fe(t,a))&&i.push(Lr(t,s,l))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}function Fr(){}var jr=null,Ur=null;function $r(e,n){switch(e){case"button":case"input":case"select":case"textarea":return!!n.autoFocus}return!1}function qr(e,n){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,Gr="function"==typeof clearTimeout?clearTimeout:void 0;function Wr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break}return e}function Vr(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var Zr=0,Qr=Math.random().toString(36).slice(2),Xr="__reactFiber$"+Qr,Yr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function no(e){var n=e[Xr];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Jr]||t[Xr]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=Vr(e);null!==e;){if(t=e[Xr])return t;e=Vr(e)}return n}t=(e=t).parentNode}return null}function to(e){return!(e=e[Xr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Yr]||null}function ao(e){var n=e[eo];return void 0===n&&(n=e[eo]=new Set),n}var io=[],lo=-1;function so(e){return{current:e}}function co(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function uo(e,n){lo++,io[lo]=e.current,e.current=n}var fo={},po=so(fo),mo=so(!1),go=fo;function ho(e,n){var t=e.type.contextTypes;if(!t)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in t)a[o]=n[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=a),a}function bo(e){return null!=e.childContextTypes}function yo(){co(mo),co(po)}function vo(e,n,t){if(po.current!==fo)throw Error(i(168));uo(po,n),uo(mo,t)}function wo(e,n,t){var r=e.stateNode;if(e=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,K(n)||"Unknown",a));return o({},t,r)}function Ao(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,go=po.current,uo(po,e),uo(mo,mo.current),!0}function ko(e,n,t){var r=e.stateNode;if(!r)throw Error(i(169));t?(e=wo(e,n,go),r.__reactInternalMemoizedMergedChildContext=e,co(mo),co(po),uo(po,e)):co(mo),uo(mo,t)}var Co=null,_o=null,xo=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,So=a.unstable_cancelCallback,Bo=a.unstable_shouldYield,No=a.unstable_requestPaint,Oo=a.unstable_now,Mo=a.unstable_getCurrentPriorityLevel,To=a.unstable_ImmediatePriority,Io=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Do=a.unstable_IdlePriority,Po={},zo=void 0!==No?No:function(){},Fo=null,jo=null,Uo=!1,$o=Oo(),qo=1e4>$o?Oo:function(){return Oo()-$o};function Ho(){switch(Mo()){case To:return 99;case Io:return 98;case Ro:return 97;case Lo:return 96;case Do:return 95;default:throw Error(i(332))}}function Go(e){switch(e){case 99:return To;case 98:return Io;case 97:return Ro;case 96:return Lo;case 95:return Do;default:throw Error(i(332))}}function Wo(e,n){return e=Go(e),xo(e,n)}function Ko(e,n,t){return e=Go(e),Eo(e,n,t)}function Vo(){if(null!==jo){var e=jo;jo=null,So(e)}Zo()}function Zo(){if(!Uo&&null!==Fo){Uo=!0;var e=0;try{var n=Fo;Wo(99,(function(){for(;e<n.length;e++){var t=n[e];do{t=t(!0)}while(null!==t)}})),Fo=null}catch(n){throw null!==Fo&&(Fo=Fo.slice(e+1)),Eo(To,Vo),n}finally{Uo=!1}}}var Qo=A.ReactCurrentBatchConfig;function Xo(e,n){if(e&&e.defaultProps){for(var t in n=o({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var Yo=so(null),Jo=null,ea=null,na=null;function ta(){na=ea=Jo=null}function ra(e){var n=Yo.current;co(Yo),e.type._context._currentValue=n}function oa(e,n){for(;null!==e;){var t=e.alternate;if((e.childLanes&n)===n){if(null===t||(t.childLanes&n)===n)break;t.childLanes|=n}else e.childLanes|=n,null!==t&&(t.childLanes|=n);e=e.return}}function aa(e,n){Jo=e,na=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(Di=!0),e.firstContext=null)}function ia(e,n){if(na!==e&&!1!==n&&0!==n)if("number"==typeof n&&1073741823!==n||(na=e,n=1073741823),n={context:e,observedBits:n,next:null},null===ea){if(null===Jo)throw Error(i(308));ea=n,Jo.dependencies={lanes:0,firstContext:n,responders:null}}else ea=ea.next=n;return e._currentValue}var la=!1;function sa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ca(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function da(e,n){if(null!==(e=e.updateQueue)){var t=(e=e.shared).pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}}function fa(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===a?o=a=i:a=a.next=i,t=t.next}while(null!==t);null===a?o=a=n:a=a.next=n}else o=a=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function pa(e,n,t,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var c=s,u=c.next;c.next=null,null===l?i=u:l.next=u,l=c;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=c)}}if(null!==i){for(f=a.baseState,l=0,d=u=c=null;;){s=i.lane;var p=i.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,g=i;switch(s=n,p=t,g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(p,f,s);break e}f=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(s="function"==typeof(m=g.payload)?m.call(p,f,s):m))break e;f=o({},f,s);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(s=a.effects)?a.effects=[i]:s.push(i))}else p={eventTime:p,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(u=d=p,c=f):d=d.next=p,l|=s;if(null===(i=i.next)){if(null===(s=a.shared.pending))break;i=s.next,s.next=null,a.lastBaseUpdate=s,a.shared.pending=null}}null===d&&(c=f),a.baseState=c,a.firstBaseUpdate=u,a.lastBaseUpdate=d,zl|=l,e.lanes=l,e.memoizedState=f}}function ma(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],o=r.callback;if(null!==o){if(r.callback=null,r=t,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ga=(new r.Component).refs;function ha(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:o({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var ba={isMounted:function(e){return!!(e=e._reactInternals)&&Ze(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=cs(),o=us(e),a=ua(r,o);a.payload=n,null!=t&&(a.callback=t),da(e,a),ds(e,o,r)},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=cs(),o=us(e),a=ua(r,o);a.tag=1,a.payload=n,null!=t&&(a.callback=t),da(e,a),ds(e,o,r)},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=cs(),r=us(e),o=ua(t,r);o.tag=2,null!=n&&(o.callback=n),da(e,o),ds(e,r,t)}};function ya(e,n,t,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(n.prototype&&n.prototype.isPureReactComponent&&dr(t,r)&&dr(o,a))}function va(e,n,t){var r=!1,o=fo,a=n.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=bo(n)?go:po.current,a=(r=null!=(r=n.contextTypes))?ho(e,o):fo),n=new n(t,a),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=ba,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),n}function wa(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&ba.enqueueReplaceState(n,n.state,null)}function Aa(e,n,t,r){var o=e.stateNode;o.props=t,o.state=e.memoizedState,o.refs=ga,sa(e);var a=n.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=bo(n)?go:po.current,o.context=ho(e,a)),pa(e,t,o,r),o.state=e.memoizedState,"function"==typeof(a=n.getDerivedStateFromProps)&&(ha(e,n,a,t),o.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&ba.enqueueReplaceState(o,o.state,null),pa(e,t,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ka=Array.isArray;function Ca(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(i(309));var r=t.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===o?n.ref:(n=function(e){var n=r.refs;n===ga&&(n=r.refs={}),null===e?delete n[o]:n[o]=e},n._stringRef=o,n)}if("string"!=typeof e)throw Error(i(284));if(!t._owner)throw Error(i(290,e))}return e}function _a(e,n){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(n)?"object with keys {"+Object.keys(n).join(", ")+"}":n))}function xa(e){function n(n,t){if(e){var r=n.lastEffect;null!==r?(r.nextEffect=t,n.lastEffect=t):n.firstEffect=n.lastEffect=t,t.nextEffect=null,t.flags=8}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function o(e,n){return(e=qs(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags=2,t):r:(n.flags=2,t):t}function l(n){return e&&null===n.alternate&&(n.flags=2),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Ks(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function c(e,n,t,r){return null!==n&&n.elementType===t.type?((r=o(n,t.props)).ref=Ca(e,n,t),r.return=e,r):((r=Hs(t.type,t.key,t.props,null,e.mode,r)).ref=Ca(e,n,t),r.return=e,r)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Vs(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function d(e,n,t,r,a){return null===n||7!==n.tag?((n=Gs(t,e.mode,r,a)).return=e,n):((n=o(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n||"number"==typeof n)return(n=Ks(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return(t=Hs(n.type,n.key,n.props,null,e.mode,t)).ref=Ca(e,null,n),t.return=e,t;case C:return(n=Vs(n,e.mode,t)).return=e,n}if(ka(n)||$(n))return(n=Gs(n,e.mode,t,null)).return=e,n;_a(e,n)}return null}function p(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t||"number"==typeof t)return null!==o?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return t.key===o?t.type===_?d(e,n,t.props.children,r,o):c(e,n,t,r):null;case C:return t.key===o?u(e,n,t,r):null}if(ka(t)||$(t))return null!==o?null:d(e,n,t,r,null);_a(e,t)}return null}function m(e,n,t,r,o){if("string"==typeof r||"number"==typeof r)return s(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?t:r.key)||null,r.type===_?d(n,e,r.props.children,o,r.key):c(n,e,r,o);case C:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o)}if(ka(r)||$(r))return d(n,e=e.get(t)||null,r,o,null);_a(n,r)}return null}function g(o,i,l,s){for(var c=null,u=null,d=i,g=i=0,h=null;null!==d&&g<l.length;g++){d.index>g?(h=d,d=null):h=d.sibling;var b=p(o,d,l[g],s);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&n(o,d),i=a(b,i,g),null===u?c=b:u.sibling=b,u=b,d=h}if(g===l.length)return t(o,d),c;if(null===d){for(;g<l.length;g++)null!==(d=f(o,l[g],s))&&(i=a(d,i,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);g<l.length;g++)null!==(h=m(d,o,g,l[g],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?g:h.key),i=a(h,i,g),null===u?c=h:u.sibling=h,u=h);return e&&d.forEach((function(e){return n(o,e)})),c}function h(o,l,s,c){var u=$(s);if("function"!=typeof u)throw Error(i(150));if(null==(s=u.call(s)))throw Error(i(151));for(var d=u=null,g=l,h=l=0,b=null,y=s.next();null!==g&&!y.done;h++,y=s.next()){g.index>h?(b=g,g=null):b=g.sibling;var v=p(o,g,y.value,c);if(null===v){null===g&&(g=b);break}e&&g&&null===v.alternate&&n(o,g),l=a(v,l,h),null===d?u=v:d.sibling=v,d=v,g=b}if(y.done)return t(o,g),u;if(null===g){for(;!y.done;h++,y=s.next())null!==(y=f(o,y.value,c))&&(l=a(y,l,h),null===d?u=y:d.sibling=y,d=y);return u}for(g=r(o,g);!y.done;h++,y=s.next())null!==(y=m(g,o,h,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?h:y.key),l=a(y,l,h),null===d?u=y:d.sibling=y,d=y);return e&&g.forEach((function(e){return n(o,e)})),u}return function(e,r,a,s){var c="object"==typeof a&&null!==a&&a.type===_&&null===a.key;c&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case k:e:{for(u=a.key,c=r;null!==c;){if(c.key===u){if(7===c.tag){if(a.type===_){t(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}}else if(c.elementType===a.type){t(e,c.sibling),(r=o(c,a.props)).ref=Ca(e,c,a),r.return=e,e=r;break e}t(e,c);break}n(e,c),c=c.sibling}a.type===_?((r=Gs(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Hs(a.type,a.key,a.props,null,e.mode,s)).ref=Ca(e,r,a),s.return=e,e=s)}return l(e);case C:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){t(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}t(e,r);break}n(e,r),r=r.sibling}(r=Vs(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(t(e,r.sibling),(r=o(r,a)).return=e,e=r):(t(e,r),(r=Ks(a,e.mode,s)).return=e,e=r),l(e);if(ka(a))return g(e,r,a,s);if($(a))return h(e,r,a,s);if(u&&_a(e,a),void 0===a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,K(e.type)||"Component"))}return t(e,r)}}var Ea=xa(!0),Sa=xa(!1),Ba={},Na=so(Ba),Oa=so(Ba),Ma=so(Ba);function Ta(e){if(e===Ba)throw Error(i(174));return e}function Ia(e,n){switch(uo(Ma,n),uo(Oa,e),uo(Na,Ba),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:pe(null,"");break;default:n=pe(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}co(Na),uo(Na,n)}function Ra(){co(Na),co(Oa),co(Ma)}function La(e){Ta(Ma.current);var n=Ta(Na.current),t=pe(n,e.type);n!==t&&(uo(Oa,e),uo(Na,t))}function Da(e){Oa.current===e&&(co(Na),co(Oa))}var Pa=so(0);function za(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(64&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var Fa=null,ja=null,Ua=!1;function $a(e,n){var t=Us(5,null,null,0);t.elementType="DELETED",t.type="DELETED",t.stateNode=n,t.return=e,t.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=t,e.lastEffect=t):e.firstEffect=e.lastEffect=t}function qa(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,!0);default:return!1}}function Ha(e){if(Ua){var n=ja;if(n){var t=n;if(!qa(e,n)){if(!(n=Kr(t.nextSibling))||!qa(e,n))return e.flags=-1025&e.flags|2,Ua=!1,void(Fa=e);$a(Fa,t)}Fa=e,ja=Kr(n.firstChild)}else e.flags=-1025&e.flags|2,Ua=!1,Fa=e}}function Ga(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fa=e}function Wa(e){if(e!==Fa)return!1;if(!Ua)return Ga(e),Ua=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!qr(n,e.memoizedProps))for(n=ja;n;)$a(e,n),n=Kr(n.nextSibling);if(Ga(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ja=Kr(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ja=null}}else ja=Fa?Kr(e.stateNode.nextSibling):null;return!0}function Ka(){ja=Fa=null,Ua=!1}var Va=[];function Za(){for(var e=0;e<Va.length;e++)Va[e]._workInProgressVersionPrimary=null;Va.length=0}var Qa=A.ReactCurrentDispatcher,Xa=A.ReactCurrentBatchConfig,Ya=0,Ja=null,ei=null,ni=null,ti=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!cr(e[t],n[t]))return!1;return!0}function ii(e,n,t,r,o,a){if(Ya=a,Ja=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,Qa.current=null===e||null===e.memoizedState?Ti:Ii,e=t(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ni=ei=null,n.updateQueue=null,Qa.current=Ri,e=t(r,o)}while(ri)}if(Qa.current=Mi,n=null!==ei&&null!==ei.next,Ya=0,ni=ei=Ja=null,ti=!1,n)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ni?Ja.memoizedState=ni=e:ni=ni.next=e,ni}function si(){if(null===ei){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var n=null===ni?Ja.memoizedState:ni.next;if(null!==n)ni=n,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ni?Ja.memoizedState=ni=e:ni=ni.next=e}return ni}function ci(e,n){return"function"==typeof n?n(e):n}function ui(e){var n=si(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=t.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,t.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=a=null,c=o;do{var u=c.lane;if((Ya&u)===u)null!==s&&(s=s.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===s?(l=s=d,a=r):s=s.next=d,Ja.lanes|=u,zl|=u}c=c.next}while(null!==c&&c!==o);null===s?a=r:s.next=l,cr(r,n.memoizedState)||(Di=!0),n.memoizedState=r,n.baseState=a,n.baseQueue=s,t.lastRenderedState=r}return[n.memoizedState,t.dispatch]}function di(e){var n=si(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);cr(a,n.memoizedState)||(Di=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function fi(e,n,t){var r=n._getVersion;r=r(n._source);var o=n._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ya&e)===e)&&(n._workInProgressVersionPrimary=r,Va.push(n))),e)return t(n._source);throw Va.push(n),Error(i(350))}function pi(e,n,t,r){var o=Ol;if(null===o)throw Error(i(349));var a=n._getVersion,l=a(n._source),s=Qa.current,c=s.useState((function(){return fi(o,n,t)})),u=c[1],d=c[0];c=ni;var f=e.memoizedState,p=f.refs,m=p.getSnapshot,g=f.source;f=f.subscribe;var h=Ja;return e.memoizedState={refs:p,source:n,subscribe:r},s.useEffect((function(){p.getSnapshot=t,p.setSnapshot=u;var e=a(n._source);if(!cr(l,e)){e=t(n._source),cr(d,e)||(u(e),e=us(h),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var s=31-Hn(i),c=1<<s;r[s]|=e,i&=~c}}}),[t,n,r]),s.useEffect((function(){return r(n._source,(function(){var e=p.getSnapshot,t=p.setSnapshot;try{t(e(n._source));var r=us(h);o.mutableReadLanes|=r&o.pendingLanes}catch(e){t((function(){throw e}))}}))}),[n,r]),cr(m,t)&&cr(g,n)&&cr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ci,lastRenderedState:d}).dispatch=u=Oi.bind(null,Ja,e),c.queue=e,c.baseQueue=null,d=fi(o,n,t),c.memoizedState=c.baseState=d),d}function mi(e,n,t){return pi(si(),e,n,t)}function gi(e){var n=li();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:ci,lastRenderedState:e}).dispatch=Oi.bind(null,Ja,e),[n.memoizedState,e]}function hi(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=Ja.updateQueue)?(n={lastEffect:null},Ja.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function bi(e){return e={current:e},li().memoizedState=e}function yi(){return si().memoizedState}function vi(e,n,t,r){var o=li();Ja.flags|=e,o.memoizedState=hi(1|n,t,void 0,void 0===r?null:r)}function wi(e,n,t,r){var o=si();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void hi(n,t,a,r)}Ja.flags|=e,o.memoizedState=hi(1|n,t,a,r)}function Ai(e,n){return vi(516,4,e,n)}function ki(e,n){return wi(516,4,e,n)}function Ci(e,n){return wi(4,2,e,n)}function _i(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function xi(e,n,t){return t=null!=t?t.concat([e]):null,wi(4,2,_i.bind(null,n,e),t)}function Ei(){}function Si(e,n){var t=si();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ai(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Bi(e,n){var t=si();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ai(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Ni(e,n){var t=Ho();Wo(98>t?98:t,(function(){e(!0)})),Wo(97<t?97:t,(function(){var t=Xa.transition;Xa.transition=1;try{e(!1),n()}finally{Xa.transition=t}}))}function Oi(e,n,t){var r=cs(),o=us(e),a={lane:o,action:t,eagerReducer:null,eagerState:null,next:null},i=n.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),n.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ti=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=n.lastRenderedReducer))try{var l=n.lastRenderedState,s=i(l,t);if(a.eagerReducer=i,a.eagerState=s,cr(s,l))return}catch(e){}ds(e,o,r)}}var Mi={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},Ti={readContext:ia,useCallback:function(e,n){return li().memoizedState=[e,void 0===n?null:n],e},useContext:ia,useEffect:Ai,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,vi(4,2,_i.bind(null,n,e),t)},useLayoutEffect:function(e,n){return vi(4,2,e,n)},useMemo:function(e,n){var t=li();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=li();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:n}).dispatch=Oi.bind(null,Ja,e),[r.memoizedState,e]},useRef:bi,useState:gi,useDebugValue:Ei,useDeferredValue:function(e){var n=gi(e),t=n[0],r=n[1];return Ai((function(){var n=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=n}}),[e]),t},useTransition:function(){var e=gi(!1),n=e[0];return bi(e=Ni.bind(null,e[1])),[e,n]},useMutableSource:function(e,n,t){var r=li();return r.memoizedState={refs:{getSnapshot:n,setSnapshot:null},source:e,subscribe:t},pi(r,e,n,t)},useOpaqueIdentifier:function(){if(Ua){var e=!1,n=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,t("r:"+(Zr++).toString(36))),Error(i(355))})),t=gi(n)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,hi(5,(function(){t("r:"+(Zr++).toString(36))}),void 0,null)),n}return gi(n="r:"+(Zr++).toString(36)),n},unstable_isNewReconciler:!1},Ii={readContext:ia,useCallback:Si,useContext:ia,useEffect:ki,useImperativeHandle:xi,useLayoutEffect:Ci,useMemo:Bi,useReducer:ui,useRef:yi,useState:function(){return ui(ci)},useDebugValue:Ei,useDeferredValue:function(e){var n=ui(ci),t=n[0],r=n[1];return ki((function(){var n=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=n}}),[e]),t},useTransition:function(){var e=ui(ci)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return ui(ci)[0]},unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:Si,useContext:ia,useEffect:ki,useImperativeHandle:xi,useLayoutEffect:Ci,useMemo:Bi,useReducer:di,useRef:yi,useState:function(){return di(ci)},useDebugValue:Ei,useDeferredValue:function(e){var n=di(ci),t=n[0],r=n[1];return ki((function(){var n=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=n}}),[e]),t},useTransition:function(){var e=di(ci)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return di(ci)[0]},unstable_isNewReconciler:!1},Li=A.ReactCurrentOwner,Di=!1;function Pi(e,n,t,r){n.child=null===e?Sa(n,null,t,r):Ea(n,e.child,t,r)}function zi(e,n,t,r,o){t=t.render;var a=n.ref;return aa(n,o),r=ii(e,n,t,r,a,o),null===e||Di?(n.flags|=1,Pi(e,n,r,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-517,e.lanes&=~o,tl(e,n,o))}function Fi(e,n,t,r,o,a){if(null===e){var i=t.type;return"function"!=typeof i||$s(i)||void 0!==i.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Hs(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=i,ji(e,n,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(t=null!==(t=t.compare)?t:dr)(o,r)&&e.ref===n.ref)?tl(e,n,a):(n.flags|=1,(e=qs(i,r)).ref=n.ref,e.return=n,n.child=e)}function ji(e,n,t,r,o,a){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===n.ref){if(Di=!1,0==(a&o))return n.lanes=e.lanes,tl(e,n,a);0!=(16384&e.flags)&&(Di=!0)}return qi(e,n,t,r,a)}function Ui(e,n,t){var r=n.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&n.mode))n.memoizedState={baseLanes:0},vs(0,t);else{if(0==(1073741824&t))return e=null!==a?a.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e},vs(0,e),null;n.memoizedState={baseLanes:0},vs(0,null!==a?a.baseLanes:t)}else null!==a?(r=a.baseLanes|t,n.memoizedState=null):r=t,vs(0,r);return Pi(e,n,o,t),n.child}function $i(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=128)}function qi(e,n,t,r,o){var a=bo(t)?go:po.current;return a=ho(n,a),aa(n,o),t=ii(e,n,t,r,a,o),null===e||Di?(n.flags|=1,Pi(e,n,t,o),n.child):(n.updateQueue=e.updateQueue,n.flags&=-517,e.lanes&=~o,tl(e,n,o))}function Hi(e,n,t,r,o){if(bo(t)){var a=!0;Ao(n)}else a=!1;if(aa(n,o),null===n.stateNode)null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),va(n,t,r),Aa(n,t,r,o),r=!0;else if(null===e){var i=n.stateNode,l=n.memoizedProps;i.props=l;var s=i.context,c=t.contextType;c="object"==typeof c&&null!==c?ia(c):ho(n,c=bo(t)?go:po.current);var u=t.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&wa(n,i,r,c),la=!1;var f=n.memoizedState;i.state=f,pa(n,r,i,o),s=n.memoizedState,l!==r||f!==s||mo.current||la?("function"==typeof u&&(ha(n,t,u,r),s=n.memoizedState),(l=la||ya(n,t,l,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4)):("function"==typeof i.componentDidMount&&(n.flags|=4),n.memoizedProps=r,n.memoizedState=s),i.props=r,i.state=s,i.context=c,r=l):("function"==typeof i.componentDidMount&&(n.flags|=4),r=!1)}else{i=n.stateNode,ca(e,n),l=n.memoizedProps,c=n.type===n.elementType?l:Xo(n.type,l),i.props=c,d=n.pendingProps,f=i.context,s="object"==typeof(s=t.contextType)&&null!==s?ia(s):ho(n,s=bo(t)?go:po.current);var p=t.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&wa(n,i,r,s),la=!1,f=n.memoizedState,i.state=f,pa(n,r,i,o);var m=n.memoizedState;l!==d||f!==m||mo.current||la?("function"==typeof p&&(ha(n,t,p,r),m=n.memoizedState),(c=la||ya(n,t,c,r,f,m,s))?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=256),n.memoizedProps=r,n.memoizedState=m),i.props=r,i.state=m,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=256),r=!1)}return Gi(e,n,t,r,a,o)}function Gi(e,n,t,r,o,a){$i(e,n);var i=0!=(64&n.flags);if(!r&&!i)return o&&ko(n,t,!1),tl(e,n,a);r=n.stateNode,Li.current=n;var l=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=Ea(n,e.child,null,a),n.child=Ea(n,null,l,a)):Pi(e,n,l,a),n.memoizedState=r.state,o&&ko(n,t,!0),n.child}function Wi(e){var n=e.stateNode;n.pendingContext?vo(0,n.pendingContext,n.pendingContext!==n.context):n.context&&vo(0,n.context,!1),Ia(e,n.containerInfo)}var Ki,Vi,Zi,Qi={dehydrated:null,retryLane:0};function Xi(e,n,t){var r,o=n.pendingProps,a=Pa.current,i=!1;return(r=0!=(64&n.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,n.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(Pa,1&a),null===e?(void 0!==o.fallback&&Ha(n),e=o.children,a=o.fallback,i?(e=Yi(n,e,a,t),n.child.memoizedState={baseLanes:t},n.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Yi(n,e,a,t),n.child.memoizedState={baseLanes:t},n.memoizedState=Qi,n.lanes=33554432,e):((t=Ws({mode:"visible",children:e},n.mode,t,null)).return=n,n.child=t)):(e.memoizedState,i?(o=function(e,n,t,r,o){var a=n.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:t};return 0==(2&a)&&n.child!==i?((t=n.child).childLanes=0,t.pendingProps=l,null!==(i=t.lastEffect)?(n.firstEffect=t.firstEffect,n.lastEffect=i,i.nextEffect=null):n.firstEffect=n.lastEffect=null):t=qs(i,l),null!==e?r=qs(e,r):(r=Gs(r,a,o,null)).flags|=2,r.return=n,t.return=n,t.sibling=r,n.child=t,r}(e,n,o.children,o.fallback,t),i=n.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:t}:{baseLanes:a.baseLanes|t},i.childLanes=e.childLanes&~t,n.memoizedState=Qi,o):(t=function(e,n,t,r){var o=e.child;return e=o.sibling,t=qs(o,{mode:"visible",children:t}),0==(2&n.mode)&&(t.lanes=r),t.return=n,t.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,n.firstEffect=n.lastEffect=e),n.child=t}(e,n,o.children,t),n.memoizedState=null,t))}function Yi(e,n,t,r){var o=e.mode,a=e.child;return n={mode:"hidden",children:n},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=n):a=Ws(n,o,0,null),t=Gs(t,o,r,null),a.return=e,t.return=e,a.sibling=t,e.child=a,t}function Ji(e,n){e.lanes|=n;var t=e.alternate;null!==t&&(t.lanes|=n),oa(e.return,n)}function el(e,n,t,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o,lastEffect:a}:(i.isBackwards=n,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=t,i.tailMode=o,i.lastEffect=a)}function nl(e,n,t){var r=n.pendingProps,o=r.revealOrder,a=r.tail;if(Pi(e,n,r.children,t),0!=(2&(r=Pa.current)))r=1&r|2,n.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,t);else if(19===e.tag)Ji(e,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Pa,r),0==(2&n.mode))n.memoizedState=null;else switch(o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===za(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),el(n,!1,o,t,a,n.lastEffect);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===za(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}el(n,!0,t,null,a,n.lastEffect);break;case"together":el(n,!1,null,null,void 0,n.lastEffect);break;default:n.memoizedState=null}return n.child}function tl(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),zl|=n.lanes,0!=(t&n.childLanes)){if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=qs(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=qs(e,e.pendingProps)).return=n;t.sibling=null}return n.child}return null}function rl(e,n){if(!Ua)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,n,t){var r=n.pendingProps;switch(n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return bo(n.type)&&yo(),null;case 3:return Ra(),co(mo),co(po),Za(),(r=n.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Wa(n)?n.flags|=4:r.hydrate||(n.flags|=256)),null;case 5:Da(n);var a=Ta(Ma.current);if(t=n.type,null!==e&&null!=n.stateNode)Vi(e,n,t,r),e.ref!==n.ref&&(n.flags|=128);else{if(!r){if(null===n.stateNode)throw Error(i(166));return null}if(e=Ta(Na.current),Wa(n)){r=n.stateNode,t=n.type;var l=n.memoizedProps;switch(r[Xr]=n,r[Yr]=l,t){case"dialog":Nr("cancel",r),Nr("close",r);break;case"iframe":case"object":case"embed":Nr("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Nr(xr[e],r);break;case"source":Nr("error",r);break;case"img":case"image":case"link":Nr("error",r),Nr("load",r);break;case"details":Nr("toggle",r);break;case"input":ee(r,l),Nr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Nr("invalid",r);break;case"textarea":se(r,l),Nr("invalid",r)}for(var c in Ce(t,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):s.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Nr("scroll",r));switch(t){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ue(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Fr)}r=e,n.updateQueue=r,null!==r&&(n.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===de&&(e=fe(t)),e===de?"script"===t?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(t,{is:r.is}):(e=c.createElement(t),"select"===t&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,t),e[Xr]=n,e[Yr]=r,Ki(e,n),n.stateNode=e,c=_e(t,r),t){case"dialog":Nr("cancel",e),Nr("close",e),a=r;break;case"iframe":case"object":case"embed":Nr("load",e),a=r;break;case"video":case"audio":for(a=0;a<xr.length;a++)Nr(xr[a],e);a=r;break;case"source":Nr("error",e),a=r;break;case"img":case"image":case"link":Nr("error",e),Nr("load",e),a=r;break;case"details":Nr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Nr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Nr("invalid",e);break;case"textarea":se(e,r),a=le(e,r),Nr("invalid",e);break;default:a=r}Ce(t,a);var u=a;for(l in u)if(u.hasOwnProperty(l)){var d=u[l];"style"===l?Ae(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&he(e,d):"children"===l?"string"==typeof d?("textarea"!==t||""!==d)&&be(e,d):"number"==typeof d&&be(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Nr("scroll",e):null!=d&&w(e,l,d,c))}switch(t){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ue(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Fr)}$r(t,r)&&(n.flags|=4)}null!==n.ref&&(n.flags|=128)}return null;case 6:if(e&&null!=n.stateNode)Zi(0,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));t=Ta(Ma.current),Ta(Na.current),Wa(n)?(r=n.stateNode,t=n.memoizedProps,r[Xr]=n,r.nodeValue!==t&&(n.flags|=4)):((r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[Xr]=n,n.stateNode=r)}return null;case 13:return co(Pa),r=n.memoizedState,0!=(64&n.flags)?(n.lanes=t,n):(r=null!==r,t=!1,null===e?void 0!==n.memoizedProps.fallback&&Wa(n):t=null!==e.memoizedState,r&&!t&&0!=(2&n.mode)&&(null===e&&!0!==n.memoizedProps.unstable_avoidThisFallback||0!=(1&Pa.current)?0===Ll&&(Ll=3):(0!==Ll&&3!==Ll||(Ll=4),null===Ol||0==(134217727&zl)&&0==(134217727&Fl)||gs(Ol,Tl))),(r||t)&&(n.flags|=4),null);case 4:return Ra(),null===e&&Mr(n.stateNode.containerInfo),null;case 10:return ra(n),null;case 19:if(co(Pa),null===(r=n.memoizedState))return null;if(l=0!=(64&n.flags),null===(c=r.rendering))if(l)rl(r,!1);else{if(0!==Ll||null!==e&&0!=(64&e.flags))for(e=n.child;null!==e;){if(null!==(c=za(e))){for(n.flags|=64,rl(r,!1),null!==(l=c.updateQueue)&&(n.updateQueue=l,n.flags|=4),null===r.lastEffect&&(n.firstEffect=null),n.lastEffect=r.lastEffect,r=t,t=n.child;null!==t;)e=r,(l=t).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return uo(Pa,1&Pa.current|2),n.child}e=e.sibling}null!==r.tail&&qo()>ql&&(n.flags|=64,l=!0,rl(r,!1),n.lanes=33554432)}else{if(!l)if(null!==(e=za(c))){if(n.flags|=64,l=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Ua)return null!==(n=n.lastEffect=r.lastEffect)&&(n.nextEffect=null),null}else 2*qo()-r.renderingStartTime>ql&&1073741824!==t&&(n.flags|=64,l=!0,rl(r,!1),n.lanes=33554432);r.isBackwards?(c.sibling=n.child,n.child=c):(null!==(t=r.last)?t.sibling=c:n.child=c,r.last=c)}return null!==r.tail?(t=r.tail,r.rendering=t,r.tail=t.sibling,r.lastEffect=n.lastEffect,r.renderingStartTime=qo(),t.sibling=null,n=Pa.current,uo(Pa,l?1&n|2:1&n),t):null;case 23:case 24:return ws(),null!==e&&null!==e.memoizedState!=(null!==n.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(n.flags|=4),null}throw Error(i(156,n.tag))}function al(e){switch(e.tag){case 1:bo(e.type)&&yo();var n=e.flags;return 4096&n?(e.flags=-4097&n|64,e):null;case 3:if(Ra(),co(mo),co(po),Za(),0!=(64&(n=e.flags)))throw Error(i(285));return e.flags=-4097&n|64,e;case 5:return Da(e),null;case 13:return co(Pa),4096&(n=e.flags)?(e.flags=-4097&n|64,e):null;case 19:return co(Pa),null;case 4:return Ra(),null;case 10:return ra(e),null;case 23:case 24:return ws(),null;default:return null}}function il(e,n){try{var t="",r=n;do{t+=W(r),r=r.return}while(r);var o=t}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:n,stack:o}}function ll(e,n){try{console.error(n.value)}catch(e){setTimeout((function(){throw e}))}}Ki=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Vi=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,Ta(Na.current);var i,l=null;switch(t){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Fr)}for(d in Ce(t,r),t=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var c=a[d];for(i in c)c.hasOwnProperty(i)&&(t||(t={}),t[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var u=r[d];if(c=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(i in c)!c.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(t||(t={}),t[i]="");for(i in u)u.hasOwnProperty(i)&&c[i]!==u[i]&&(t||(t={}),t[i]=u[i])}else t||(l||(l=[]),l.push(d,t)),t=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(l=l||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(l=l||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Nr("scroll",e),l||c===u||(l=[])):"object"==typeof u&&null!==u&&u.$$typeof===L?u.toString():(l=l||[]).push(d,u))}t&&(l=l||[]).push("style",t);var d=l;(n.updateQueue=d)&&(n.flags|=4)}},Zi=function(e,n,t,r){t!==r&&(n.flags|=4)};var sl="function"==typeof WeakMap?WeakMap:Map;function cl(e,n,t){(t=ua(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Kl||(Kl=!0,Vl=r),ll(0,n)},t}function ul(e,n,t){(t=ua(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=n.value;t.payload=function(){return ll(0,n),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(t.callback=function(){"function"!=typeof r&&(null===Zl?Zl=new Set([this]):Zl.add(this),ll(0,n));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}var dl="function"==typeof WeakSet?WeakSet:Set;function fl(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ps(e,n)}else n.current=null}function pl(e,n){switch(n.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&n.flags&&null!==e){var t=e.memoizedProps,r=e.memoizedState;n=(e=n.stateNode).getSnapshotBeforeUpdate(n.elementType===n.type?t:Xo(n.type,t),r),e.__reactInternalSnapshotBeforeUpdate=n}return;case 3:return void(256&n.flags&&Wr(n.stateNode.containerInfo))}throw Error(i(163))}function ml(e,n,t){switch(t.tag){case 0:case 11:case 15:case 22:if(null!==(n=null!==(n=t.updateQueue)?n.lastEffect:null)){e=n=n.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==n)}if(null!==(n=null!==(n=t.updateQueue)?n.lastEffect:null)){e=n=n.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rs(t,e),Is(t,e)),e=r}while(e!==n)}return;case 1:return e=t.stateNode,4&t.flags&&(null===n?e.componentDidMount():(r=t.elementType===t.type?n.memoizedProps:Xo(t.type,n.memoizedProps),e.componentDidUpdate(r,n.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(n=t.updateQueue)&&ma(t,n,e));case 3:if(null!==(n=t.updateQueue)){if(e=null,null!==t.child)switch(t.child.tag){case 5:case 1:e=t.child.stateNode}ma(t,n,e)}return;case 5:return e=t.stateNode,void(null===n&&4&t.flags&&$r(t.type,t.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===t.memoizedState&&(t=t.alternate,null!==t&&(t=t.memoizedState,null!==t&&(t=t.dehydrated,null!==t&&kn(t)))))}throw Error(i(163))}function gl(e,n){for(var t=e;;){if(5===t.tag){var r=t.stateNode;if(n)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=t.stateNode;var o=t.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===t.tag)t.stateNode.nodeValue=n?"":t.memoizedProps;else if((23!==t.tag&&24!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}}function hl(e,n){if(_o&&"function"==typeof _o.onCommitFiberUnmount)try{_o.onCommitFiberUnmount(Co,n)}catch(e){}switch(n.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=n.updateQueue)&&null!==(e=e.lastEffect)){var t=e=e.next;do{var r=t,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rs(n,t);else{r=n;try{o()}catch(e){Ps(r,e)}}t=t.next}while(t!==e)}break;case 1:if(fl(n),"function"==typeof(e=n.stateNode).componentWillUnmount)try{e.props=n.memoizedProps,e.state=n.memoizedState,e.componentWillUnmount()}catch(e){Ps(n,e)}break;case 5:fl(n);break;case 4:kl(e,n)}}function bl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var n=e.return;null!==n;){if(yl(n))break e;n=n.return}throw Error(i(160))}var t=n;switch(n=t.stateNode,t.tag){case 5:var r=!1;break;case 3:case 4:n=n.containerInfo,r=!0;break;default:throw Error(i(161))}16&t.flags&&(be(n,""),t.flags&=-17);e:n:for(t=e;;){for(;null===t.sibling;){if(null===t.return||yl(t.return)){t=null;break e}t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue n;if(null===t.child||4===t.tag)continue n;t.child.return=t,t=t.child}if(!(2&t.flags)){t=t.stateNode;break e}}r?wl(e,t,n):Al(e,t,n)}function wl(e,n,t){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Fr));else if(4!==r&&null!==(e=e.child))for(wl(e,n,t),e=e.sibling;null!==e;)wl(e,n,t),e=e.sibling}function Al(e,n,t){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Al(e,n,t),e=e.sibling;null!==e;)Al(e,n,t),e=e.sibling}function kl(e,n){for(var t,r,o=n,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(t=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:t=t.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,c=s;;)if(hl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===s)break e;for(;null===c.sibling;){if(null===c.return||c.return===s)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(l=t,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):t.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){t=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break;for(;null===o.sibling;){if(null===o.return||o.return===n)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Cl(e,n){switch(n.tag){case 0:case 11:case 14:case 15:case 22:var t=n.updateQueue;if(null!==(t=null!==t?t.lastEffect:null)){var r=t=t.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==t)}return;case 1:case 12:case 17:return;case 5:if(null!=(t=n.stateNode)){r=n.memoizedProps;var o=null!==e?e.memoizedProps:r;e=n.type;var a=n.updateQueue;if(n.updateQueue=null,null!==a){for(t[Yr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ne(t,r),_e(e,o),n=_e(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?Ae(t,s):"dangerouslySetInnerHTML"===l?he(t,s):"children"===l?be(t,s):w(t,l,s,n)}switch(e){case"input":te(t,r);break;case"textarea":ce(t,r);break;case"select":e=t._wrapperState.wasMultiple,t._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(t,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(t,!!r.multiple,r.defaultValue,!0):ie(t,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===n.stateNode)throw Error(i(162));return void(n.stateNode.nodeValue=n.memoizedProps);case 3:return void((t=n.stateNode).hydrate&&(t.hydrate=!1,kn(t.containerInfo)));case 13:return null!==n.memoizedState&&($l=qo(),gl(n.child,!0)),void _l(n);case 19:return void _l(n);case 23:case 24:return void gl(n,null!==n.memoizedState)}throw Error(i(163))}function _l(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new dl),n.forEach((function(n){var r=Fs.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function xl(e,n){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(n=n.memoizedState)&&null===n.dehydrated}var El=Math.ceil,Sl=A.ReactCurrentDispatcher,Bl=A.ReactCurrentOwner,Nl=0,Ol=null,Ml=null,Tl=0,Il=0,Rl=so(0),Ll=0,Dl=null,Pl=0,zl=0,Fl=0,jl=0,Ul=null,$l=0,ql=1/0;function Hl(){ql=qo()+500}var Gl,Wl=null,Kl=!1,Vl=null,Zl=null,Ql=!1,Xl=null,Yl=90,Jl=[],es=[],ns=null,ts=0,rs=null,os=-1,as=0,is=0,ls=null,ss=!1;function cs(){return 0!=(48&Nl)?qo():-1!==os?os:os=qo()}function us(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ho()?1:2;if(0===as&&(as=Pl),0!==Qo.transition){0!==is&&(is=null!==Ul?Ul.pendingLanes:0),e=as;var n=4186112&~is;return 0==(n&=-n)&&0==(n=(e=4186112&~e)&-e)&&(n=8192),n}return e=Ho(),e=jn(0!=(4&Nl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),as)}function ds(e,n,t){if(50<ts)throw ts=0,rs=null,Error(i(185));if(null===(e=fs(e,n)))return null;qn(e,n,t),e===Ol&&(Fl|=n,4===Ll&&gs(e,Tl));var r=Ho();1===n?0!=(8&Nl)&&0==(48&Nl)?hs(e):(ps(e,t),0===Nl&&(Hl(),Vo())):(0==(4&Nl)||98!==r&&99!==r||(null===ns?ns=new Set([e]):ns.add(e)),ps(e,t)),Ul=e}function fs(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}function ps(e,n){for(var t=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Hn(l),c=1<<s,u=a[s];if(-1===u){if(0==(c&r)||0!=(c&o)){u=n,Pn(c);var d=Dn;a[s]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=n&&(e.expiredLanes|=c);l&=~c}if(r=zn(e,e===Ol?Tl:0),n=Dn,0===r)null!==t&&(t!==Po&&So(t),e.callbackNode=null,e.callbackPriority=0);else{if(null!==t){if(e.callbackPriority===n)return;t!==Po&&So(t)}15===n?(t=hs.bind(null,e),null===Fo?(Fo=[t],jo=Eo(To,Zo)):Fo.push(t),t=Po):14===n?t=Ko(99,hs.bind(null,e)):(t=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(n),t=Ko(t,ms.bind(null,e))),e.callbackPriority=n,e.callbackNode=t}}function ms(e){if(os=-1,is=as=0,0!=(48&Nl))throw Error(i(327));var n=e.callbackNode;if(Ts()&&e.callbackNode!==n)return null;var t=zn(e,e===Ol?Tl:0);if(0===t)return null;var r=t,o=Nl;Nl|=16;var a=Cs();for(Ol===e&&Tl===r||(Hl(),As(e,r));;)try{Es();break}catch(n){ks(e,n)}if(ta(),Sl.current=a,Nl=o,null!==Ml?r=0:(Ol=null,Tl=0,r=Ll),0!=(Pl&Fl))As(e,0);else if(0!==r){if(2===r&&(Nl|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(t=Fn(e))&&(r=_s(e,t))),1===r)throw n=Dl,As(e,0),gs(e,t),ps(e,qo()),n;switch(e.finishedWork=e.current.alternate,e.finishedLanes=t,r){case 0:case 1:throw Error(i(345));case 2:case 5:Ns(e);break;case 3:if(gs(e,t),(62914560&t)===t&&10<(r=$l+500-qo())){if(0!==zn(e,0))break;if(((o=e.suspendedLanes)&t)!==t){cs(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Hr(Ns.bind(null,e),r);break}Ns(e);break;case 4:if(gs(e,t),(4186112&t)===t)break;for(r=e.eventTimes,o=-1;0<t;){var l=31-Hn(t);a=1<<l,(l=r[l])>o&&(o=l),t&=~a}if(t=o,10<(t=(120>(t=qo()-t)?120:480>t?480:1080>t?1080:1920>t?1920:3e3>t?3e3:4320>t?4320:1960*El(t/1960))-t)){e.timeoutHandle=Hr(Ns.bind(null,e),t);break}Ns(e);break;default:throw Error(i(329))}}return ps(e,qo()),e.callbackNode===n?ms.bind(null,e):null}function gs(e,n){for(n&=~jl,n&=~Fl,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-Hn(n),r=1<<t;e[t]=-1,n&=~r}}function hs(e){if(0!=(48&Nl))throw Error(i(327));if(Ts(),e===Ol&&0!=(e.expiredLanes&Tl)){var n=Tl,t=_s(e,n);0!=(Pl&Fl)&&(t=_s(e,n=zn(e,n)))}else t=_s(e,n=zn(e,0));if(0!==e.tag&&2===t&&(Nl|=64,e.hydrate&&(e.hydrate=!1,Wr(e.containerInfo)),0!==(n=Fn(e))&&(t=_s(e,n))),1===t)throw t=Dl,As(e,0),gs(e,n),ps(e,qo()),t;return e.finishedWork=e.current.alternate,e.finishedLanes=n,Ns(e),ps(e,qo()),null}function bs(e,n){var t=Nl;Nl|=1;try{return e(n)}finally{0===(Nl=t)&&(Hl(),Vo())}}function ys(e,n){var t=Nl;Nl&=-2,Nl|=8;try{return e(n)}finally{0===(Nl=t)&&(Hl(),Vo())}}function vs(e,n){uo(Rl,Il),Il|=n,Pl|=n}function ws(){Il=Rl.current,co(Rl)}function As(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,Gr(t)),null!==Ml)for(t=Ml.return;null!==t;){var r=t;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Ra(),co(mo),co(po),Za();break;case 5:Da(r);break;case 4:Ra();break;case 13:case 19:co(Pa);break;case 10:ra(r);break;case 23:case 24:ws()}t=t.return}Ol=e,Ml=qs(e.current,null),Tl=Il=Pl=n,Ll=0,Dl=null,jl=Fl=zl=0}function ks(e,n){for(;;){var t=Ml;try{if(ta(),Qa.current=Mi,ti){for(var r=Ja.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ti=!1}if(Ya=0,ni=ei=Ja=null,ri=!1,Bl.current=null,null===t||null===t.return){Ll=1,Dl=n,Ml=null;break}e:{var a=e,i=t.return,l=t,s=n;if(n=Tl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s;if(0==(2&l.mode)){var u=l.alternate;u?(l.updateQueue=u.updateQueue,l.memoizedState=u.memoizedState,l.lanes=u.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Pa.current),f=i;do{var p;if(p=13===f.tag){var m=f.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var g=f.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(p){var h=f.updateQueue;if(null===h){var b=new Set;b.add(c),f.updateQueue=b}else h.add(c);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,da(l,y)}l.lanes|=1;break e}s=void 0,l=n;var v=a.pingCache;if(null===v?(v=a.pingCache=new sl,s=new Set,v.set(c,s)):void 0===(s=v.get(c))&&(s=new Set,v.set(c,s)),!s.has(l)){s.add(l);var w=zs.bind(null,a,c,l);c.then(w,w)}f.flags|=4096,f.lanes=n;break e}f=f.return}while(null!==f);s=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ll&&(Ll=2),s=il(s,l),f=i;do{switch(f.tag){case 3:a=s,f.flags|=4096,n&=-n,f.lanes|=n,fa(f,cl(0,a,n));break e;case 1:a=s;var A=f.type,k=f.stateNode;if(0==(64&f.flags)&&("function"==typeof A.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Zl||!Zl.has(k)))){f.flags|=4096,n&=-n,f.lanes|=n,fa(f,ul(f,a,n));break e}}f=f.return}while(null!==f)}Bs(t)}catch(e){n=e,Ml===t&&null!==t&&(Ml=t=t.return);continue}break}}function Cs(){var e=Sl.current;return Sl.current=Mi,null===e?Mi:e}function _s(e,n){var t=Nl;Nl|=16;var r=Cs();for(Ol===e&&Tl===n||As(e,n);;)try{xs();break}catch(n){ks(e,n)}if(ta(),Nl=t,Sl.current=r,null!==Ml)throw Error(i(261));return Ol=null,Tl=0,Ll}function xs(){for(;null!==Ml;)Ss(Ml)}function Es(){for(;null!==Ml&&!Bo();)Ss(Ml)}function Ss(e){var n=Gl(e.alternate,e,Il);e.memoizedProps=e.pendingProps,null===n?Bs(e):Ml=n,Bl.current=null}function Bs(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(2048&n.flags)){if(null!==(t=ol(t,n,Il)))return void(Ml=t);if(24!==(t=n).tag&&23!==t.tag||null===t.memoizedState||0!=(1073741824&Il)||0==(4&t.mode)){for(var r=0,o=t.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;t.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=n.firstEffect),null!==n.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=n.firstEffect),e.lastEffect=n.lastEffect),1<n.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=n:e.firstEffect=n,e.lastEffect=n))}else{if(null!==(t=al(n)))return t.flags&=2047,void(Ml=t);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(n=n.sibling))return void(Ml=n);Ml=n=e}while(null!==n);0===Ll&&(Ll=5)}function Ns(e){var n=Ho();return Wo(99,Os.bind(null,e,n)),null}function Os(e,n){do{Ts()}while(null!==Xl);if(0!=(48&Nl))throw Error(i(327));var t=e.finishedWork;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(i(177));e.callbackNode=null;var r=t.lanes|t.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<a;){var c=31-Hn(a),u=1<<c;o[c]=0,l[c]=-1,s[c]=-1,a&=~u}if(null!==ns&&0==(24&r)&&ns.has(e)&&ns.delete(e),e===Ol&&(Ml=Ol=null,Tl=0),1<t.flags?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,null!==r){if(o=Nl,Nl|=32,Bl.current=null,jr=Zn,hr(l=gr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(u=s.getSelection&&s.getSelection())&&0!==u.rangeCount){s=u.anchorNode,a=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{s.nodeType,c.nodeType}catch(e){s=null;break e}var d=0,f=-1,p=-1,m=0,g=0,h=l,b=null;n:for(;;){for(var y;h!==s||0!==a&&3!==h.nodeType||(f=d+a),h!==c||0!==u&&3!==h.nodeType||(p=d+u),3===h.nodeType&&(d+=h.nodeValue.length),null!==(y=h.firstChild);)b=h,h=y;for(;;){if(h===l)break n;if(b===s&&++m===a&&(f=d),b===c&&++g===u&&(p=d),null!==(y=h.nextSibling))break;b=(h=b).parentNode}h=y}s=-1===f||-1===p?null:{start:f,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Ur={focusedElem:l,selectionRange:s},Zn=!1,ls=null,ss=!1,Wl=r;do{try{Ms()}catch(e){if(null===Wl)throw Error(i(330));Ps(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);ls=null,Wl=r;do{try{for(l=e;null!==Wl;){var v=Wl.flags;if(16&v&&be(Wl.stateNode,""),128&v){var w=Wl.alternate;if(null!==w){var A=w.ref;null!==A&&("function"==typeof A?A(null):A.current=null)}}switch(1038&v){case 2:vl(Wl),Wl.flags&=-3;break;case 6:vl(Wl),Wl.flags&=-3,Cl(Wl.alternate,Wl);break;case 1024:Wl.flags&=-1025;break;case 1028:Wl.flags&=-1025,Cl(Wl.alternate,Wl);break;case 4:Cl(Wl.alternate,Wl);break;case 8:kl(l,s=Wl);var k=s.alternate;bl(s),null!==k&&bl(k)}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(i(330));Ps(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);if(A=Ur,w=gr(),v=A.focusedElem,l=A.selectionRange,w!==v&&v&&v.ownerDocument&&mr(v.ownerDocument.documentElement,v)){null!==l&&hr(v)&&(w=l.start,void 0===(A=l.end)&&(A=w),"selectionStart"in v?(v.selectionStart=w,v.selectionEnd=Math.min(A,v.value.length)):(A=(w=v.ownerDocument||document)&&w.defaultView||window).getSelection&&(A=A.getSelection(),s=v.textContent.length,k=Math.min(l.start,s),l=void 0===l.end?k:Math.min(l.end,s),!A.extend&&k>l&&(s=l,l=k,k=s),s=pr(v,k),a=pr(v,l),s&&a&&(1!==A.rangeCount||A.anchorNode!==s.node||A.anchorOffset!==s.offset||A.focusNode!==a.node||A.focusOffset!==a.offset)&&((w=w.createRange()).setStart(s.node,s.offset),A.removeAllRanges(),k>l?(A.addRange(w),A.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),A.addRange(w))))),w=[];for(A=v;A=A.parentNode;)1===A.nodeType&&w.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<w.length;v++)(A=w[v]).element.scrollLeft=A.left,A.element.scrollTop=A.top}Zn=!!jr,Ur=jr=null,e.current=t,Wl=r;do{try{for(v=e;null!==Wl;){var C=Wl.flags;if(36&C&&ml(v,Wl.alternate,Wl),128&C){w=void 0;var _=Wl.ref;if(null!==_){var x=Wl.stateNode;Wl.tag,w=x,"function"==typeof _?_(w):_.current=w}}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(i(330));Ps(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);Wl=null,zo(),Nl=o}else e.current=t;if(Ql)Ql=!1,Xl=e,Yl=n;else for(Wl=r;null!==Wl;)n=Wl.nextEffect,Wl.nextEffect=null,8&Wl.flags&&((C=Wl).sibling=null,C.stateNode=null),Wl=n;if(0===(r=e.pendingLanes)&&(Zl=null),1===r?e===rs?ts++:(ts=0,rs=e):ts=0,t=t.stateNode,_o&&"function"==typeof _o.onCommitFiberRoot)try{_o.onCommitFiberRoot(Co,t,void 0,64==(64&t.current.flags))}catch(e){}if(ps(e,qo()),Kl)throw Kl=!1,e=Vl,Vl=null,e;return 0!=(8&Nl)||Vo(),null}function Ms(){for(;null!==Wl;){var e=Wl.alternate;ss||null===ls||(0!=(8&Wl.flags)?Je(Wl,ls)&&(ss=!0):13===Wl.tag&&xl(e,Wl)&&Je(Wl,ls)&&(ss=!0));var n=Wl.flags;0!=(256&n)&&pl(e,Wl),0==(512&n)||Ql||(Ql=!0,Ko(97,(function(){return Ts(),null}))),Wl=Wl.nextEffect}}function Ts(){if(90!==Yl){var e=97<Yl?97:Yl;return Yl=90,Wo(e,Ls)}return!1}function Is(e,n){Jl.push(n,e),Ql||(Ql=!0,Ko(97,(function(){return Ts(),null})))}function Rs(e,n){es.push(n,e),Ql||(Ql=!0,Ko(97,(function(){return Ts(),null})))}function Ls(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!=(48&Nl))throw Error(i(331));var n=Nl;Nl|=32;var t=es;es=[];for(var r=0;r<t.length;r+=2){var o=t[r],a=t[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Ps(a,e)}}for(t=Jl,Jl=[],r=0;r<t.length;r+=2){o=t[r],a=t[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===a)throw Error(i(330));Ps(a,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Nl=n,Vo(),!0}function Ds(e,n,t){da(e,n=cl(0,n=il(t,n),1)),n=cs(),null!==(e=fs(e,1))&&(qn(e,1,n),ps(e,n))}function Ps(e,n){if(3===e.tag)Ds(e,e,n);else for(var t=e.return;null!==t;){if(3===t.tag){Ds(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r))){var o=ul(t,e=il(n,e),1);if(da(t,o),o=cs(),null!==(t=fs(t,1)))qn(t,1,o),ps(t,o);else if("function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r)))try{r.componentDidCatch(n,e)}catch(e){}break}}t=t.return}}function zs(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=cs(),e.pingedLanes|=e.suspendedLanes&t,Ol===e&&(Tl&t)===t&&(4===Ll||3===Ll&&(62914560&Tl)===Tl&&500>qo()-$l?As(e,0):jl|=t),ps(e,n)}function Fs(e,n){var t=e.stateNode;null!==t&&t.delete(n),0==(n=0)&&(0==(2&(n=e.mode))?n=1:0==(4&n)?n=99===Ho()?1:2:(0===as&&(as=Pl),0===(n=Un(62914560&~as))&&(n=4194304))),t=cs(),null!==(e=fs(e,n))&&(qn(e,n,t),ps(e,t))}function js(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Us(e,n,t,r){return new js(e,n,t,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qs(e,n){var t=e.alternate;return null===t?((t=Us(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.nextEffect=null,t.firstEffect=null,t.lastEffect=null),t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Hs(e,n,t,r,o,a){var l=2;if(r=e,"function"==typeof e)$s(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _:return Gs(t.children,o,a,n);case D:l=8,o|=16;break;case x:l=8,o|=1;break;case E:return(e=Us(12,t,n,8|o)).elementType=E,e.type=E,e.lanes=a,e;case O:return(e=Us(13,t,n,o)).type=O,e.elementType=O,e.lanes=a,e;case M:return(e=Us(19,t,n,o)).elementType=M,e.lanes=a,e;case P:return Ws(t,o,a,n);case z:return(e=Us(24,t,n,o)).elementType=z,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:l=10;break e;case B:l=9;break e;case N:l=11;break e;case T:l=14;break e;case I:l=16,r=null;break e;case R:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(n=Us(l,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Gs(e,n,t,r){return(e=Us(7,e,r,n)).lanes=t,e}function Ws(e,n,t,r){return(e=Us(23,e,r,n)).elementType=P,e.lanes=t,e}function Ks(e,n,t){return(e=Us(6,e,null,n)).lanes=t,e}function Vs(e,n,t){return(n=Us(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function Zs(e,n,t){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=t,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=$n(0),this.expirationTimes=$n(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=$n(0),this.mutableSourceEagerHydrationData=null}function Qs(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}function Xs(e,n,t,r){var o=n.current,a=cs(),l=us(o);e:if(t){n:{if(Ze(t=t._reactInternals)!==t||1!==t.tag)throw Error(i(170));var s=t;do{switch(s.tag){case 3:s=s.stateNode.context;break n;case 1:if(bo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break n}}s=s.return}while(null!==s);throw Error(i(171))}if(1===t.tag){var c=t.type;if(bo(c)){t=wo(t,c,s);break e}}t=s}else t=fo;return null===n.context?n.context=t:n.pendingContext=t,(n=ua(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),da(o,n),ds(o,l,a),l}function Ys(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Js(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function ec(e,n){Js(e,n),(e=e.alternate)&&Js(e,n)}function nc(e,n,t){var r=null!=t&&null!=t.hydrationOptions&&t.hydrationOptions.mutableSources||null;if(t=new Zs(e,n,null!=t&&!0===t.hydrate),n=Us(3,null,null,2===n?7:1===n?3:0),t.current=n,n.stateNode=t,sa(n),e[Jr]=t.current,Mr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(n=r[e])._getVersion;o=o(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o)}this._internalRoot=t}function tc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,n,t,r,o){var a=t._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ys(i);l.call(e)}}Xs(n,i,e,o)}else{if(a=t._reactRootContainer=function(e,n){if(n||(n=!(!(n=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==n.nodeType||!n.hasAttribute("data-reactroot"))),!n)for(var t;t=e.lastChild;)e.removeChild(t);return new nc(e,0,n?{hydrate:!0}:void 0)}(t,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Ys(i);s.call(e)}}ys((function(){Xs(n,i,e,o)}))}return Ys(i)}function oc(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!tc(n))throw Error(i(200));return Qs(e,n,null,t)}Gl=function(e,n,t){var r=n.lanes;if(null!==e)if(e.memoizedProps!==n.pendingProps||mo.current)Di=!0;else{if(0==(t&r)){switch(Di=!1,n.tag){case 3:Wi(n),Ka();break;case 5:La(n);break;case 1:bo(n.type)&&Ao(n);break;case 4:Ia(n,n.stateNode.containerInfo);break;case 10:r=n.memoizedProps.value;var o=n.type._context;uo(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==n.memoizedState)return 0!=(t&n.child.childLanes)?Xi(e,n,t):(uo(Pa,1&Pa.current),null!==(n=tl(e,n,t))?n.sibling:null);uo(Pa,1&Pa.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(64&e.flags)){if(r)return nl(e,n,t);n.flags|=64}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Pa,Pa.current),r)break;return null;case 23:case 24:return n.lanes=0,Ui(e,n,t)}return tl(e,n,t)}Di=0!=(16384&e.flags)}else Di=!1;switch(n.lanes=0,n.tag){case 2:if(r=n.type,null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),e=n.pendingProps,o=ho(n,po.current),aa(n,t),o=ii(null,n,r,e,o,t),n.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(n.tag=1,n.memoizedState=null,n.updateQueue=null,bo(r)){var a=!0;Ao(n)}else a=!1;n.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,sa(n);var l=r.getDerivedStateFromProps;"function"==typeof l&&ha(n,r,l,e),o.updater=ba,n.stateNode=o,o._reactInternals=n,Aa(n,r,e,t),n=Gi(null,n,r,!0,a,t)}else n.tag=0,Pi(null,n,o,t),n=n.child;return n;case 16:o=n.elementType;e:{switch(null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),e=n.pendingProps,o=(a=o._init)(o._payload),n.type=o,a=n.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===T)return 14}return 2}(o),e=Xo(o,e),a){case 0:n=qi(null,n,o,e,t);break e;case 1:n=Hi(null,n,o,e,t);break e;case 11:n=zi(null,n,o,e,t);break e;case 14:n=Fi(null,n,o,Xo(o.type,e),r,t);break e}throw Error(i(306,o,""))}return n;case 0:return r=n.type,o=n.pendingProps,qi(e,n,r,o=n.elementType===r?o:Xo(r,o),t);case 1:return r=n.type,o=n.pendingProps,Hi(e,n,r,o=n.elementType===r?o:Xo(r,o),t);case 3:if(Wi(n),r=n.updateQueue,null===e||null===r)throw Error(i(282));if(r=n.pendingProps,o=null!==(o=n.memoizedState)?o.element:null,ca(e,n),pa(n,r,null,t),(r=n.memoizedState.element)===o)Ka(),n=tl(e,n,t);else{if((a=(o=n.stateNode).hydrate)&&(ja=Kr(n.stateNode.containerInfo.firstChild),Fa=n,a=Ua=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Va.push(a);for(t=Sa(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|1024,t=t.sibling}else Pi(e,n,r,t),Ka();n=n.child}return n;case 5:return La(n),null===e&&Ha(n),r=n.type,o=n.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,qr(r,o)?l=null:null!==a&&qr(r,a)&&(n.flags|=16),$i(e,n),Pi(e,n,l,t),n.child;case 6:return null===e&&Ha(n),null;case 13:return Xi(e,n,t);case 4:return Ia(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Ea(n,null,r,t):Pi(e,n,r,t),n.child;case 11:return r=n.type,o=n.pendingProps,zi(e,n,r,o=n.elementType===r?o:Xo(r,o),t);case 7:return Pi(e,n,n.pendingProps,t),n.child;case 8:case 12:return Pi(e,n,n.pendingProps.children,t),n.child;case 10:e:{r=n.type._context,o=n.pendingProps,l=n.memoizedProps,a=o.value;var s=n.type._context;if(uo(Yo,s._currentValue),s._currentValue=a,null!==l)if(s=l.value,0==(a=cr(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!mo.current){n=tl(e,n,t);break e}}else for(null!==(s=n.child)&&(s.return=n);null!==s;){var c=s.dependencies;if(null!==c){l=s.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&a)){1===s.tag&&((u=ua(-1,t&-t)).tag=2,da(s,u)),s.lanes|=t,null!==(u=s.alternate)&&(u.lanes|=t),oa(s.return,t),c.lanes|=t;break}u=u.next}}else l=10===s.tag&&s.type===n.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===n){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Pi(e,n,o.children,t),n=n.child}return n;case 9:return o=n.type,r=(a=n.pendingProps).children,aa(n,t),r=r(o=ia(o,a.unstable_observedBits)),n.flags|=1,Pi(e,n,r,t),n.child;case 14:return a=Xo(o=n.type,n.pendingProps),Fi(e,n,o,a=Xo(o.type,a),r,t);case 15:return ji(e,n,n.type,n.pendingProps,r,t);case 17:return r=n.type,o=n.pendingProps,o=n.elementType===r?o:Xo(r,o),null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2),n.tag=1,bo(r)?(e=!0,Ao(n)):e=!1,aa(n,t),va(n,r,o),Aa(n,r,o,t),Gi(null,n,r,!0,e,t);case 19:return nl(e,n,t);case 23:case 24:return Ui(e,n,t)}throw Error(i(156,n.tag))},nc.prototype.render=function(e){Xs(e,this._internalRoot,null,null)},nc.prototype.unmount=function(){var e=this._internalRoot,n=e.containerInfo;Xs(null,e,null,(function(){n[Jr]=null}))},en=function(e){13===e.tag&&(ds(e,4,cs()),ec(e,4))},nn=function(e){13===e.tag&&(ds(e,67108864,cs()),ec(e,67108864))},tn=function(e){if(13===e.tag){var n=cs(),t=us(e);ds(e,t,n),ec(e,t)}},rn=function(e,n){return n()},Ee=function(e,n,t){switch(n){case"input":if(te(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));X(r),te(r,o)}}}break;case"textarea":ce(e,t);break;case"select":null!=(n=t.value)&&ie(e,!!t.multiple,n,!1)}},Te=bs,Ie=function(e,n,t,r,o){var a=Nl;Nl|=4;try{return Wo(98,e.bind(null,n,t,r,o))}finally{0===(Nl=a)&&(Hl(),Vo())}},Re=function(){0==(49&Nl)&&(function(){if(null!==ns){var e=ns;ns=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ps(e,qo())}))}Vo()}(),Ts())},Le=function(e,n){var t=Nl;Nl|=2;try{return e(n)}finally{0===(Nl=t)&&(Hl(),Vo())}};var ac={Events:[to,ro,oo,Oe,Me,Ts,{current:!1}]},ic={findFiberByHostInstance:no,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ye(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var sc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!sc.isDisabled&&sc.supportsFiber)try{Co=sc.inject(lc),_o=sc}catch(ge){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,n.createPortal=oc,n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ye(n))?null:e.stateNode},n.flushSync=function(e,n){var t=Nl;if(0!=(48&t))return e(n);Nl|=1;try{if(e)return Wo(99,e.bind(null,n))}finally{Nl=t,Vo()}},n.hydrate=function(e,n,t){if(!tc(n))throw Error(i(200));return rc(null,e,n,!0,t)},n.render=function(e,n,t){if(!tc(n))throw Error(i(200));return rc(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!tc(e))throw Error(i(40));return!!e._reactRootContainer&&(ys((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},n.unstable_batchedUpdates=bs,n.unstable_createPortal=function(e,n){return oc(e,n,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!tc(t))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rc(e,n,t,!1,r)},n.version="17.0.2"},3935:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(4448)},9921:(e,n)=>{"use strict";var t=60103,r=60106,o=60107,a=60108,i=60114,l=60109,s=60110,c=60112,u=60113,d=60120,f=60115,p=60116,m=60121,g=60122,h=60117,b=60129,y=60131;if("function"==typeof Symbol&&Symbol.for){var v=Symbol.for;t=v("react.element"),r=v("react.portal"),o=v("react.fragment"),a=v("react.strict_mode"),i=v("react.profiler"),l=v("react.provider"),s=v("react.context"),c=v("react.forward_ref"),u=v("react.suspense"),d=v("react.suspense_list"),f=v("react.memo"),p=v("react.lazy"),m=v("react.block"),g=v("react.server.block"),h=v("react.fundamental"),b=v("react.debug_trace_mode"),y=v("react.legacy_hidden")}function w(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case t:switch(e=e.type){case o:case i:case a:case u:case d:return e;default:switch(e=e&&e.$$typeof){case s:case c:case p:case f:case l:return e;default:return n}}case r:return n}}}var A=l,k=t,C=c,_=o,x=p,E=f,S=r,B=i,N=a,O=u;n.ContextConsumer=s,n.ContextProvider=A,n.Element=k,n.ForwardRef=C,n.Fragment=_,n.Lazy=x,n.Memo=E,n.Portal=S,n.Profiler=B,n.StrictMode=N,n.Suspense=O,n.isAsyncMode=function(){return!1},n.isConcurrentMode=function(){return!1},n.isContextConsumer=function(e){return w(e)===s},n.isContextProvider=function(e){return w(e)===l},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===t},n.isForwardRef=function(e){return w(e)===c},n.isFragment=function(e){return w(e)===o},n.isLazy=function(e){return w(e)===p},n.isMemo=function(e){return w(e)===f},n.isPortal=function(e){return w(e)===r},n.isProfiler=function(e){return w(e)===i},n.isStrictMode=function(e){return w(e)===a},n.isSuspense=function(e){return w(e)===u},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===i||e===b||e===a||e===u||e===d||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===f||e.$$typeof===l||e.$$typeof===s||e.$$typeof===c||e.$$typeof===h||e.$$typeof===m||e[0]===g)},n.typeOf=w},9864:(e,n,t)=>{"use strict";e.exports=t(9921)},5251:(e,n,t)=>{"use strict";t(7418);var r=t(7294),o=60103;if(n.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a("react.element"),n.Fragment=a("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,a={},c=null,u=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(u=n.ref),n)l.call(n,r)&&!s.hasOwnProperty(r)&&(a[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===a[r]&&(a[r]=n[r]);return{$$typeof:o,type:e,key:c,ref:u,props:a,_owner:i.current}}n.jsx=c,n.jsxs=c},2408:(e,n,t)=>{"use strict";var r=t(7418),o=60103,a=60106;n.Fragment=60107,n.StrictMode=60108,n.Profiler=60114;var i=60109,l=60110,s=60112;n.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),n.Fragment=d("react.fragment"),n.StrictMode=d("react.strict_mode"),n.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),n.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function h(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}function b(){}function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}h.prototype.isReactComponent={},h.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,n,"setState")},h.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=h.prototype;var v=y.prototype=new b;v.constructor=y,r(v,h.prototype),v.isPureReactComponent=!0;var w={current:null},A=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function C(e,n,t){var r,a={},i=null,l=null;if(null!=n)for(r in void 0!==n.ref&&(l=n.ref),void 0!==n.key&&(i=""+n.key),n)A.call(n,r)&&!k.hasOwnProperty(r)&&(a[r]=n[r]);var s=arguments.length-2;if(1===s)a.children=t;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function E(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function S(e,n,t,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case a:s=!0}}if(s)return i=i(s=e),e=""===r?"."+E(s,0):r,Array.isArray(i)?(t="",null!=e&&(t=e.replace(x,"$&/")+"/"),S(i,n,t,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,n){return{$$typeof:o,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,t+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),n.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=r+E(l=e[c],c);s+=S(l,n,t,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(l=e.next()).done;)s+=S(l=l.value,n,t,u=r+E(l,c++),i);else if("object"===l)throw n=""+e,Error(p(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n));return s}function B(e,n,t){if(null==e)return e;var r=[],o=0;return S(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function N(e){if(-1===e._status){var n=e._result;n=n(),e._status=0,e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function M(){var e=O.current;if(null===e)throw Error(p(321));return e}var T={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};n.Children={map:B,forEach:function(e,n,t){B(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return B(e,(function(){n++})),n},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error(p(143));return e}},n.Component=h,n.PureComponent=y,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,n.cloneElement=function(e,n,t){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(l=n.ref,s=w.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in n)A.call(n,u)&&!k.hasOwnProperty(u)&&(a[u]=void 0===n[u]&&void 0!==c?c[u]:n[u])}var u=arguments.length-2;if(1===u)a.children=t;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:s}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:l,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=C,n.createFactory=function(e){var n=C.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=_,n.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:N}},n.memo=function(e,n){return{$$typeof:c,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return M().useCallback(e,n)},n.useContext=function(e,n){return M().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return M().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return M().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return M().useLayoutEffect(e,n)},n.useMemo=function(e,n){return M().useMemo(e,n)},n.useReducer=function(e,n,t){return M().useReducer(e,n,t)},n.useRef=function(e){return M().useRef(e)},n.useState=function(e){return M().useState(e)},n.version="17.0.2"},7294:(e,n,t)=>{"use strict";e.exports=t(2408)},5893:(e,n,t)=>{"use strict";e.exports=t(5251)},53:(e,n)=>{"use strict";var t,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();n.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var e=n.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};t=function(e){null!==c?setTimeout(t,0,e):(c=e,setTimeout(d,0))},r=function(e,n){u=setTimeout(e,n)},o=function(){clearTimeout(u)},n.unstable_shouldYield=function(){return!1},a=n.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,h=null,b=-1,y=5,v=0;n.unstable_shouldYield=function(){return n.unstable_now()>=v},a=function(){},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,A=w.port2;w.port1.onmessage=function(){if(null!==h){var e=n.unstable_now();v=e+y;try{h(!0,e)?A.postMessage(null):(g=!1,h=null)}catch(e){throw A.postMessage(null),e}}else g=!1},t=function(e){h=e,g||(g=!0,A.postMessage(null))},r=function(e,t){b=f((function(){e(n.unstable_now())}),t)},o=function(){p(b),b=-1}}function k(e,n){var t=e.length;e.push(n);e:for(;;){var r=t-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,n)))break e;e[r]=n,e[t]=o,t=r}}function C(e){return void 0===(e=e[0])?null:e}function _(e){var n=e[0];if(void 0!==n){var t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,s=e[l];if(void 0!==i&&0>x(i,t))void 0!==s&&0>x(s,i)?(e[r]=s,e[l]=t,r=l):(e[r]=i,e[a]=t,r=a);else{if(!(void 0!==s&&0>x(s,t)))break e;e[r]=s,e[l]=t,r=l}}}return n}return null}function x(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}var E=[],S=[],B=1,N=null,O=3,M=!1,T=!1,I=!1;function R(e){for(var n=C(S);null!==n;){if(null===n.callback)_(S);else{if(!(n.startTime<=e))break;_(S),n.sortIndex=n.expirationTime,k(E,n)}n=C(S)}}function L(e){if(I=!1,R(e),!T)if(null!==C(E))T=!0,t(D);else{var n=C(S);null!==n&&r(L,n.startTime-e)}}function D(e,t){T=!1,I&&(I=!1,o()),M=!0;var a=O;try{for(R(t),N=C(E);null!==N&&(!(N.expirationTime>t)||e&&!n.unstable_shouldYield());){var i=N.callback;if("function"==typeof i){N.callback=null,O=N.priorityLevel;var l=i(N.expirationTime<=t);t=n.unstable_now(),"function"==typeof l?N.callback=l:N===C(E)&&_(E),R(t)}else _(E);N=C(E)}if(null!==N)var s=!0;else{var c=C(S);null!==c&&r(L,c.startTime-t),s=!1}return s}finally{N=null,O=a,M=!1}}var P=a;n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){T||M||(T=!0,t(D))},n.unstable_getCurrentPriorityLevel=function(){return O},n.unstable_getFirstCallbackNode=function(){return C(E)},n.unstable_next=function(e){switch(O){case 1:case 2:case 3:var n=3;break;default:n=O}var t=O;O=n;try{return e()}finally{O=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=P,n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=O;O=e;try{return n()}finally{O=t}},n.unstable_scheduleCallback=function(e,a,i){var l=n.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:B++,callback:a,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>l?(e.sortIndex=i,k(S,e),null===C(E)&&e===C(S)&&(I?o():I=!0,r(L,i-l))):(e.sortIndex=s,k(E,e),T||M||(T=!0,t(D))),e},n.unstable_wrapCallback=function(e){var n=O;return function(){var t=O;O=n;try{return e.apply(this,arguments)}finally{O=t}}}},3840:(e,n,t)=>{"use strict";e.exports=t(53)},3379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=a[c]||0,d="".concat(c," ").concat(u);a[c]=u+1;var f=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(p);else{var m=o(p,r);r.byIndex=l,n.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=t(a[i]);n[l].references--}for(var s=r(e,o),c=0;c<a.length;c++){var u=t(a[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=s}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},9216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},7848:(e,n,t)=>{var r=t(8139);e.exports=function(e,n){var t,o=null;if(!e||"string"!=typeof e)return o;for(var a,i,l=r(e),s="function"==typeof n,c=0,u=l.length;c<u;c++)a=(t=l[c]).property,i=t.value,s?n(a,i,t):i&&(o||(o={}),o[a]=i);return o}},3390:e=>{var n={exports:{}};function t(e){return e instanceof Map?e.clear=e.delete=e.set=function(){throw new Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function(){throw new Error("set is read-only")}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(n){var r=e[n];"object"!=typeof r||Object.isFrozen(r)||t(r)})),e}n.exports=t,n.exports.default=t;var r=n.exports;class o{constructor(e){void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function a(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function i(e,...n){const t=Object.create(null);for(const n in e)t[n]=e[n];return n.forEach((function(e){for(const n in e)t[n]=e[n]})),t}const l=e=>!!e.kind;class s{constructor(e,n){this.buffer="",this.classPrefix=n.classPrefix,e.walk(this)}addText(e){this.buffer+=a(e)}openNode(e){if(!l(e))return;let n=e.kind;n=e.sublanguage?`language-${n}`:((e,{prefix:n})=>{if(e.includes(".")){const t=e.split(".");return[`${n}${t.shift()}`,...t.map(((e,n)=>`${e}${"_".repeat(n+1)}`))].join(" ")}return`${n}${e}`})(n,{prefix:this.classPrefix}),this.span(n)}closeNode(e){l(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}class c{constructor(){this.rootNode={children:[]},this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const n={kind:e,children:[]};this.add(n),this.stack.push(n)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,n){return"string"==typeof n?e.addText(n):n.children&&(e.openNode(n),n.children.forEach((n=>this._walk(e,n))),e.closeNode(n)),e}static _collapse(e){"string"!=typeof e&&e.children&&(e.children.every((e=>"string"==typeof e))?e.children=[e.children.join("")]:e.children.forEach((e=>{c._collapse(e)})))}}class u extends c{constructor(e){super(),this.options=e}addKeyword(e,n){""!==e&&(this.openNode(n),this.addText(e),this.closeNode())}addText(e){""!==e&&this.add(e)}addSublanguage(e,n){const t=e.root;t.kind=n,t.sublanguage=!0,this.add(t)}toHTML(){return new s(this,this.options).value()}finalize(){return!0}}function d(e){return e?"string"==typeof e?e:e.source:null}function f(e){return g("(?=",e,")")}function p(e){return g("(?:",e,")*")}function m(e){return g("(?:",e,")?")}function g(...e){return e.map((e=>d(e))).join("")}function h(...e){const n=function(e){const n=e[e.length-1];return"object"==typeof n&&n.constructor===Object?(e.splice(e.length-1,1),n):{}}(e);return"("+(n.capture?"":"?:")+e.map((e=>d(e))).join("|")+")"}function b(e){return new RegExp(e.toString()+"|").exec("").length-1}const y=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;function v(e,{joinWith:n}){let t=0;return e.map((e=>{t+=1;const n=t;let r=d(e),o="";for(;r.length>0;){const e=y.exec(r);if(!e){o+=r;break}o+=r.substring(0,e.index),r=r.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?o+="\\"+String(Number(e[1])+n):(o+=e[0],"("===e[0]&&t++)}return o})).map((e=>`(${e})`)).join(n)}const w="[a-zA-Z]\\w*",A="[a-zA-Z_]\\w*",k="\\b\\d+(\\.\\d+)?",C="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",_="\\b(0b[01]+)",x={begin:"\\\\[\\s\\S]",relevance:0},E={scope:"string",begin:"'",end:"'",illegal:"\\n",contains:[x]},S={scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[x]},B=function(e,n,t={}){const r=i({scope:"comment",begin:e,end:n,contains:[]},t);r.contains.push({scope:"doctag",begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0});const o=h("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/);return r.contains.push({begin:g(/[ ]+/,"(",o,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),r},N=B("//","$"),O=B("/\\*","\\*/"),M=B("#","$"),T={scope:"number",begin:k,relevance:0},I={scope:"number",begin:C,relevance:0},R={scope:"number",begin:_,relevance:0},L={begin:/(?=\/[^/\n]*\/)/,contains:[{scope:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[x,{begin:/\[/,end:/\]/,relevance:0,contains:[x]}]}]},D={scope:"title",begin:w,relevance:0},P={scope:"title",begin:A,relevance:0};var z=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:w,UNDERSCORE_IDENT_RE:A,NUMBER_RE:k,C_NUMBER_RE:C,BINARY_NUMBER_RE:_,RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:(e={})=>{const n=/^#![ ]*\//;return e.binary&&(e.begin=g(n,/.*\b/,e.binary,/\b.*/)),i({scope:"meta",begin:n,end:/$/,relevance:0,"on:begin":(e,n)=>{0!==e.index&&n.ignoreMatch()}},e)},BACKSLASH_ESCAPE:x,APOS_STRING_MODE:E,QUOTE_STRING_MODE:S,PHRASAL_WORDS_MODE:{begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},COMMENT:B,C_LINE_COMMENT_MODE:N,C_BLOCK_COMMENT_MODE:O,HASH_COMMENT_MODE:M,NUMBER_MODE:T,C_NUMBER_MODE:I,BINARY_NUMBER_MODE:R,REGEXP_MODE:L,TITLE_MODE:D,UNDERSCORE_TITLE_MODE:P,METHOD_GUARD:{begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0},END_SAME_AS_BEGIN:function(e){return Object.assign(e,{"on:begin":(e,n)=>{n.data._beginMatch=e[1]},"on:end":(e,n)=>{n.data._beginMatch!==e[1]&&n.ignoreMatch()}})}});function F(e,n){"."===e.input[e.index-1]&&n.ignoreMatch()}function j(e,n){void 0!==e.className&&(e.scope=e.className,delete e.className)}function U(e,n){n&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=F,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,void 0===e.relevance&&(e.relevance=0))}function $(e,n){Array.isArray(e.illegal)&&(e.illegal=h(...e.illegal))}function q(e,n){if(e.match){if(e.begin||e.end)throw new Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function H(e,n){void 0===e.relevance&&(e.relevance=1)}const G=(e,n)=>{if(!e.beforeMatch)return;if(e.starts)throw new Error("beforeMatch cannot be used with starts");const t=Object.assign({},e);Object.keys(e).forEach((n=>{delete e[n]})),e.keywords=t.keywords,e.begin=g(t.beforeMatch,f(t.begin)),e.starts={relevance:0,contains:[Object.assign(t,{endsParent:!0})]},e.relevance=0,delete t.beforeMatch},W=["of","and","for","in","not","or","if","then","parent","list","value"];function K(e,n,t="keyword"){const r=Object.create(null);return"string"==typeof e?o(t,e.split(" ")):Array.isArray(e)?o(t,e):Object.keys(e).forEach((function(t){Object.assign(r,K(e[t],n,t))})),r;function o(e,t){n&&(t=t.map((e=>e.toLowerCase()))),t.forEach((function(n){const t=n.split("|");r[t[0]]=[e,V(t[0],t[1])]}))}}function V(e,n){return n?Number(n):function(e){return W.includes(e.toLowerCase())}(e)?0:1}const Z={},Q=e=>{console.error(e)},X=(e,...n)=>{console.log(`WARN: ${e}`,...n)},Y=(e,n)=>{Z[`${e}/${n}`]||(console.log(`Deprecated as of ${e}. ${n}`),Z[`${e}/${n}`]=!0)},J=new Error;function ee(e,n,{key:t}){let r=0;const o=e[t],a={},i={};for(let e=1;e<=n.length;e++)i[e+r]=o[e],a[e+r]=!0,r+=b(n[e-1]);e[t]=i,e[t]._emit=a,e[t]._multi=!0}function ne(e){!function(e){e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,delete e.scope)}(e),"string"==typeof e.beginScope&&(e.beginScope={_wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope}),function(e){if(Array.isArray(e.begin)){if(e.skip||e.excludeBegin||e.returnBegin)throw Q("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),J;if("object"!=typeof e.beginScope||null===e.beginScope)throw Q("beginScope must be object"),J;ee(e,e.begin,{key:"beginScope"}),e.begin=v(e.begin,{joinWith:""})}}(e),function(e){if(Array.isArray(e.end)){if(e.skip||e.excludeEnd||e.returnEnd)throw Q("skip, excludeEnd, returnEnd not compatible with endScope: {}"),J;if("object"!=typeof e.endScope||null===e.endScope)throw Q("endScope must be object"),J;ee(e,e.end,{key:"endScope"}),e.end=v(e.end,{joinWith:""})}}(e)}function te(e){function n(n,t){return new RegExp(d(n),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(t?"g":""))}class t{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(e,n){n.position=this.position++,this.matchIndexes[this.matchAt]=n,this.regexes.push([n,e]),this.matchAt+=b(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const e=this.regexes.map((e=>e[1]));this.matcherRe=n(v(e,{joinWith:"|"}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex;const n=this.matcherRe.exec(e);if(!n)return null;const t=n.findIndex(((e,n)=>n>0&&void 0!==e)),r=this.matchIndexes[t];return n.splice(0,t),Object.assign(n,r)}}class r{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];const n=new t;return this.rules.slice(e).forEach((([e,t])=>n.addRule(e,t))),n.compile(),this.multiRegexes[e]=n,n}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,n){this.rules.push([e,n]),"begin"===n.type&&this.count++}exec(e){const n=this.getMatcher(this.regexIndex);n.lastIndex=this.lastIndex;let t=n.exec(e);if(this.resumingScanAtSamePosition())if(t&&t.index===this.lastIndex);else{const n=this.getMatcher(0);n.lastIndex=this.lastIndex+1,t=n.exec(e)}return t&&(this.regexIndex+=t.position+1,this.regexIndex===this.count&&this.considerAll()),t}}if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=i(e.classNameAliases||{}),function t(o,a){const l=o;if(o.isCompiled)return l;[j,q,ne,G].forEach((e=>e(o,a))),e.compilerExtensions.forEach((e=>e(o,a))),o.__beforeBegin=null,[U,$,H].forEach((e=>e(o,a))),o.isCompiled=!0;let s=null;return"object"==typeof o.keywords&&o.keywords.$pattern&&(o.keywords=Object.assign({},o.keywords),s=o.keywords.$pattern,delete o.keywords.$pattern),s=s||/\w+/,o.keywords&&(o.keywords=K(o.keywords,e.case_insensitive)),l.keywordPatternRe=n(s,!0),a&&(o.begin||(o.begin=/\B|\b/),l.beginRe=n(l.begin),o.end||o.endsWithParent||(o.end=/\B|\b/),o.end&&(l.endRe=n(l.end)),l.terminatorEnd=d(l.end)||"",o.endsWithParent&&a.terminatorEnd&&(l.terminatorEnd+=(o.end?"|":"")+a.terminatorEnd)),o.illegal&&(l.illegalRe=n(o.illegal)),o.contains||(o.contains=[]),o.contains=[].concat(...o.contains.map((function(e){return function(e){return e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function(n){return i(e,{variants:null},n)}))),e.cachedVariants?e.cachedVariants:re(e)?i(e,{starts:e.starts?i(e.starts):null}):Object.isFrozen(e)?i(e):e}("self"===e?o:e)}))),o.contains.forEach((function(e){t(e,l)})),o.starts&&t(o.starts,a),l.matcher=function(e){const n=new r;return e.contains.forEach((e=>n.addRule(e.begin,{rule:e,type:"begin"}))),e.terminatorEnd&&n.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&n.addRule(e.illegal,{type:"illegal"}),n}(l),l}(e)}function re(e){return!!e&&(e.endsWithParent||re(e.starts))}class oe extends Error{constructor(e,n){super(e),this.name="HTMLInjectionError",this.html=n}}const ae=a,ie=i,le=Symbol("nomatch");var se=function(e){const n=Object.create(null),t=Object.create(null),a=[];let i=!0;const l="Could not find the language '{}', did you forget to load/include a language module?",s={disableAutodetect:!0,name:"Plain text",contains:[]};let c={ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",cssSelector:"pre code",languages:null,__emitter:u};function d(e){return c.noHighlightRe.test(e)}function b(e,n,t){let r="",o="";"object"==typeof n?(r=e,t=n.ignoreIllegals,o=n.language):(Y("10.7.0","highlight(lang, code, ...args) has been deprecated."),Y("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),o=e,r=n),void 0===t&&(t=!0);const a={code:r,language:o};E("before:highlight",a);const i=a.result?a.result:y(a.language,a.code,t);return i.code=a.code,E("after:highlight",i),i}function y(e,t,r,a){const s=Object.create(null);function u(){if(!x.keywords)return void S.addText(B);let e=0;x.keywordPatternRe.lastIndex=0;let n=x.keywordPatternRe.exec(B),t="";for(;n;){t+=B.substring(e,n.index);const o=A.case_insensitive?n[0].toLowerCase():n[0],a=(r=o,x.keywords[r]);if(a){const[e,r]=a;if(S.addText(t),t="",s[o]=(s[o]||0)+1,s[o]<=7&&(N+=r),e.startsWith("_"))t+=n[0];else{const t=A.classNameAliases[e]||e;S.addKeyword(n[0],t)}}else t+=n[0];e=x.keywordPatternRe.lastIndex,n=x.keywordPatternRe.exec(B)}var r;t+=B.substr(e),S.addText(t)}function d(){null!=x.subLanguage?function(){if(""===B)return;let e=null;if("string"==typeof x.subLanguage){if(!n[x.subLanguage])return void S.addText(B);e=y(x.subLanguage,B,!0,E[x.subLanguage]),E[x.subLanguage]=e._top}else e=v(B,x.subLanguage.length?x.subLanguage:null);x.relevance>0&&(N+=e.relevance),S.addSublanguage(e._emitter,e.language)}():u(),B=""}function f(e,n){let t=1;for(;void 0!==n[t];){if(!e._emit[t]){t++;continue}const r=A.classNameAliases[e[t]]||e[t],o=n[t];r?S.addKeyword(o,r):(B=o,u(),B=""),t++}}function p(e,n){return e.scope&&"string"==typeof e.scope&&S.openNode(A.classNameAliases[e.scope]||e.scope),e.beginScope&&(e.beginScope._wrap?(S.addKeyword(B,A.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),B=""):e.beginScope._multi&&(f(e.beginScope,n),B="")),x=Object.create(e,{parent:{value:x}}),x}function m(e,n,t){let r=function(e,n){const t=e&&e.exec(n);return t&&0===t.index}(e.endRe,t);if(r){if(e["on:end"]){const t=new o(e);e["on:end"](n,t),t.isMatchIgnored&&(r=!1)}if(r){for(;e.endsParent&&e.parent;)e=e.parent;return e}}if(e.endsWithParent)return m(e.parent,n,t)}function g(e){return 0===x.matcher.regexIndex?(B+=e[0],1):(T=!0,0)}function h(e){const n=e[0],r=t.substr(e.index),o=m(x,e,r);if(!o)return le;const a=x;x.endScope&&x.endScope._wrap?(d(),S.addKeyword(n,x.endScope._wrap)):x.endScope&&x.endScope._multi?(d(),f(x.endScope,e)):a.skip?B+=n:(a.returnEnd||a.excludeEnd||(B+=n),d(),a.excludeEnd&&(B=n));do{x.scope&&S.closeNode(),x.skip||x.subLanguage||(N+=x.relevance),x=x.parent}while(x!==o.parent);return o.starts&&p(o.starts,e),a.returnEnd?0:n.length}let b={};function w(n,a){const l=a&&a[0];if(B+=n,null==l)return d(),0;if("begin"===b.type&&"end"===a.type&&b.index===a.index&&""===l){if(B+=t.slice(a.index,a.index+1),!i){const n=new Error(`0 width match regex (${e})`);throw n.languageName=e,n.badRule=b.rule,n}return 1}if(b=a,"begin"===a.type)return function(e){const n=e[0],t=e.rule,r=new o(t),a=[t.__beforeBegin,t["on:begin"]];for(const t of a)if(t&&(t(e,r),r.isMatchIgnored))return g(n);return t.skip?B+=n:(t.excludeBegin&&(B+=n),d(),t.returnBegin||t.excludeBegin||(B=n)),p(t,e),t.returnBegin?0:n.length}(a);if("illegal"===a.type&&!r){const e=new Error('Illegal lexeme "'+l+'" for mode "'+(x.scope||"<unnamed>")+'"');throw e.mode=x,e}if("end"===a.type){const e=h(a);if(e!==le)return e}if("illegal"===a.type&&""===l)return 1;if(M>1e5&&M>3*a.index)throw new Error("potential infinite loop, way more iterations than matches");return B+=l,l.length}const A=C(e);if(!A)throw Q(l.replace("{}",e)),new Error('Unknown language: "'+e+'"');const k=te(A);let _="",x=a||k;const E={},S=new c.__emitter(c);!function(){const e=[];for(let n=x;n!==A;n=n.parent)n.scope&&e.unshift(n.scope);e.forEach((e=>S.openNode(e)))}();let B="",N=0,O=0,M=0,T=!1;try{for(x.matcher.considerAll();;){M++,T?T=!1:x.matcher.considerAll(),x.matcher.lastIndex=O;const e=x.matcher.exec(t);if(!e)break;const n=w(t.substring(O,e.index),e);O=e.index+n}return w(t.substr(O)),S.closeAllNodes(),S.finalize(),_=S.toHTML(),{language:e,value:_,relevance:N,illegal:!1,_emitter:S,_top:x}}catch(n){if(n.message&&n.message.includes("Illegal"))return{language:e,value:ae(t),illegal:!0,relevance:0,_illegalBy:{message:n.message,index:O,context:t.slice(O-100,O+100),mode:n.mode,resultSoFar:_},_emitter:S};if(i)return{language:e,value:ae(t),illegal:!1,relevance:0,errorRaised:n,_emitter:S,_top:x};throw n}}function v(e,t){t=t||c.languages||Object.keys(n);const r=function(e){const n={value:ae(e),illegal:!1,relevance:0,_top:s,_emitter:new c.__emitter(c)};return n._emitter.addText(e),n}(e),o=t.filter(C).filter(x).map((n=>y(n,e,!1)));o.unshift(r);const a=o.sort(((e,n)=>{if(e.relevance!==n.relevance)return n.relevance-e.relevance;if(e.language&&n.language){if(C(e.language).supersetOf===n.language)return 1;if(C(n.language).supersetOf===e.language)return-1}return 0})),[i,l]=a,u=i;return u.secondBest=l,u}function w(e){let n=null;const r=function(e){let n=e.className+" ";n+=e.parentNode?e.parentNode.className:"";const t=c.languageDetectRe.exec(n);if(t){const n=C(t[1]);return n||(X(l.replace("{}",t[1])),X("Falling back to no-highlight mode for this block.",e)),n?t[1]:"no-highlight"}return n.split(/\s+/).find((e=>d(e)||C(e)))}(e);if(d(r))return;if(E("before:highlightElement",{el:e,language:r}),e.children.length>0&&(c.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),console.warn("https://github.com/highlightjs/highlight.js/issues/2886"),console.warn(e)),c.throwUnescapedHTML))throw new oe("One of your code blocks includes unescaped HTML.",e.innerHTML);n=e;const o=n.textContent,a=r?b(o,{language:r,ignoreIllegals:!0}):v(o);e.innerHTML=a.value,function(e,n,r){const o=n&&t[n]||r;e.classList.add("hljs"),e.classList.add(`language-${o}`)}(e,r,a.language),e.result={language:a.language,re:a.relevance,relevance:a.relevance},a.secondBest&&(e.secondBest={language:a.secondBest.language,relevance:a.secondBest.relevance}),E("after:highlightElement",{el:e,result:a,text:o})}let A=!1;function k(){"loading"!==document.readyState?document.querySelectorAll(c.cssSelector).forEach(w):A=!0}function C(e){return e=(e||"").toLowerCase(),n[e]||n[t[e]]}function _(e,{languageName:n}){"string"==typeof e&&(e=[e]),e.forEach((e=>{t[e.toLowerCase()]=n}))}function x(e){const n=C(e);return n&&!n.disableAutodetect}function E(e,n){const t=e;a.forEach((function(e){e[t]&&e[t](n)}))}"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function(){A&&k()}),!1),Object.assign(e,{highlight:b,highlightAuto:v,highlightAll:k,highlightElement:w,highlightBlock:function(e){return Y("10.7.0","highlightBlock will be removed entirely in v12.0"),Y("10.7.0","Please use highlightElement now."),w(e)},configure:function(e){c=ie(c,e)},initHighlighting:()=>{k(),Y("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},initHighlightingOnLoad:function(){k(),Y("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")},registerLanguage:function(t,r){let o=null;try{o=r(e)}catch(e){if(Q("Language definition for '{}' could not be registered.".replace("{}",t)),!i)throw e;Q(e),o=s}o.name||(o.name=t),n[t]=o,o.rawDefinition=r.bind(null,e),o.aliases&&_(o.aliases,{languageName:t})},unregisterLanguage:function(e){delete n[e];for(const n of Object.keys(t))t[n]===e&&delete t[n]},listLanguages:function(){return Object.keys(n)},getLanguage:C,registerAliases:_,autoDetection:x,inherit:ie,addPlugin:function(e){!function(e){e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=n=>{e["before:highlightBlock"](Object.assign({block:n.el},n))}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=n=>{e["after:highlightBlock"](Object.assign({block:n.el},n))})}(e),a.push(e)}}),e.debugMode=function(){i=!1},e.safeMode=function(){i=!0},e.versionString="11.3.1",e.regex={concat:g,lookahead:f,either:h,optional:m,anyNumberOfTimes:p};for(const e in z)"object"==typeof z[e]&&r(z[e]);return Object.assign(e,z),e}({});e.exports=se,se.HighlightJS=se,se.default=se}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};t.r(e),t.d(e,{attentionMarkers:()=>xt,contentInitial:()=>vt,disable:()=>Et,document:()=>yt,flow:()=>At,flowInitial:()=>wt,insideSpan:()=>_t,string:()=>kt,text:()=>Ct});var n={};t.r(n),t.d(n,{boolean:()=>br,booleanish:()=>yr,commaOrSpaceSeparated:()=>Cr,commaSeparated:()=>kr,number:()=>wr,overloadedBoolean:()=>vr,spaceSeparated:()=>Ar});var r=t(5893),o=t(3935),a=t(3379),i=t.n(a),l=t(7795),s=t.n(l),c=t(569),u=t.n(c),d=t(3565),f=t.n(d),p=t(9216),m=t.n(p),g=t(4589),h=t.n(g),b=t(2232),y={};y.styleTagTransform=h(),y.setAttributes=f(),y.insert=u().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=m(),i()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var v=t(7294);function w(){return w=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},w.apply(this,arguments)}var A,k=A||(A={});k.Pop="POP",k.Push="PUSH",k.Replace="REPLACE";function C(e){e.preventDefault(),e.returnValue=""}function _(){var e=[];return{get length(){return e.length},push:function(n){return e.push(n),function(){e=e.filter((function(e){return e!==n}))}},call:function(n){e.forEach((function(e){return e&&e(n)}))}}}function x(e){var n=e.pathname,t=e.search;return(void 0===n?"/":n)+(void 0===t?"":t)+(void 0===(e=e.hash)?"":e)}function E(e){var n={};if(e){var t=e.indexOf("#");0<=t&&(n.hash=e.substr(t),e=e.substr(0,t)),0<=(t=e.indexOf("?"))&&(n.search=e.substr(t),e=e.substr(0,t)),e&&(n.pathname=e)}return n}function S(e,n){if(!e)throw new Error(n)}const B=(0,v.createContext)(null),N=(0,v.createContext)(null),O=(0,v.createContext)({outlet:null,matches:[]});function M(e){let{to:n,replace:t,state:r}=e;D()||S(!1);let o=z();return(0,v.useEffect)((()=>{o(n,{replace:t,state:r})})),null}function T(e){return(0,v.useContext)(O).outlet}function I(e){S(!1)}function R(e){let{basename:n="/",children:t=null,location:r,navigationType:o=A.Pop,navigator:a,static:i=!1}=e;D()&&S(!1);let l=Q(n),s=(0,v.useMemo)((()=>({basename:l,navigator:a,static:i})),[l,a,i]);"string"==typeof r&&(r=E(r));let{pathname:c="/",search:u="",hash:d="",state:f=null,key:p="default"}=r,m=(0,v.useMemo)((()=>{let e=V(c,l);return null==e?null:{pathname:e,search:u,hash:d,state:f,key:p}}),[l,c,u,d,f,p]);return null==m?null:(0,v.createElement)(B.Provider,{value:s},(0,v.createElement)(N.Provider,{children:t,value:{location:m,navigationType:o}}))}function L(e){let{children:n,location:t}=e;return function(e,n){D()||S(!1);let{matches:t}=(0,v.useContext)(O),r=t[t.length-1],o=r?r.params:{},a=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let i,l=P();if(n){var s;let e="string"==typeof n?E(n):n;"/"===a||(null==(s=e.pathname)?void 0:s.startsWith(a))||S(!1),i=e}else i=l;let c=i.pathname||"/",u=function(e,n,t){void 0===t&&(t="/");let r=V(("string"==typeof n?E(n):n).pathname||"/",t);if(null==r)return null;let o=U(e);!function(e){e.sort(((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){return e.length===n.length&&e.slice(0,-1).every(((e,t)=>e===n[t]))?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),n.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let n=0;null==a&&n<o.length;++n)a=G(o[n],e,r);return a}(e,{pathname:"/"===a?c:c.slice(a.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((t,r,o)=>(0,v.createElement)(O.Provider,{children:void 0!==r.route.element?r.route.element:(0,v.createElement)(T,null),value:{outlet:t,matches:n.concat(e.slice(0,o+1))}})),null)}(u&&u.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:Z([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:Z([a,e.pathnameBase])}))),t)}(j(n),t)}function D(){return null!=(0,v.useContext)(N)}function P(){return D()||S(!1),(0,v.useContext)(N).location}function z(){D()||S(!1);let{basename:e,navigator:n}=(0,v.useContext)(B),{matches:t}=(0,v.useContext)(O),{pathname:r}=P(),o=JSON.stringify(t.map((e=>e.pathnameBase))),a=(0,v.useRef)(!1);(0,v.useEffect)((()=>{a.current=!0}));let i=(0,v.useCallback)((function(t,i){if(void 0===i&&(i={}),!a.current)return;if("number"==typeof t)return void n.go(t);let l=K(t,JSON.parse(o),r);"/"!==e&&(l.pathname=Z([e,l.pathname])),(i.replace?n.replace:n.push)(l,i.state)}),[e,n,o,r]);return i}function F(e){let{matches:n}=(0,v.useContext)(O),{pathname:t}=P(),r=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,v.useMemo)((()=>K(e,JSON.parse(r),t)),[e,r,t])}function j(e){let n=[];return v.Children.forEach(e,(e=>{if(!(0,v.isValidElement)(e))return;if(e.type===v.Fragment)return void n.push.apply(n,j(e.props.children));e.type!==I&&S(!1);let t={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(t.children=j(e.props.children)),n.push(t)})),n}function U(e,n,t,r){return void 0===n&&(n=[]),void 0===t&&(t=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(r)||S(!1),a.relativePath=a.relativePath.slice(r.length));let i=Z([r,a.relativePath]),l=t.concat(a);e.children&&e.children.length>0&&(!0===e.index&&S(!1),U(e.children,n,l,i)),(null!=e.path||e.index)&&n.push({path:i,score:H(i,e.index),routesMeta:l})})),n}const $=/^:\w+$/,q=e=>"*"===e;function H(e,n){let t=e.split("/"),r=t.length;return t.some(q)&&(r+=-2),n&&(r+=2),t.filter((e=>!q(e))).reduce(((e,n)=>e+($.test(n)?3:""===n?1:10)),r)}function G(e,n,t){let r=n,{routesMeta:o}=e,a={},i="/",l=[];for(let e=0;e<o.length;++e){let n=o[e],s=e===o.length-1,c="/"===i?t:t.slice(i.length)||"/",u=W({path:n.relativePath,caseSensitive:n.caseSensitive,end:s},c);if(!u)return null;Object.assign(a,u.params);let d=r[n.childrenIndex];l.push({params:a,pathname:Z([i,u.pathname]),pathnameBase:Z([i,u.pathnameBase]),route:d}),"/"!==u.pathnameBase&&(i=Z([i,u.pathnameBase])),r=d.children}return l}function W(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n,t){void 0===n&&(n=!1),void 0===t&&(t=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,n)=>(r.push(n),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=t?"\\/*$":"(?:\\b|$)",[new RegExp(o,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=n.match(t);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1),s=r.reduce(((e,n,t)=>{if("*"===n){let e=l[t]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[n]=function(e,n){try{return decodeURIComponent(e)}catch(n){return e}}(l[t]||""),e}),{});return{params:s,pathname:a,pathnameBase:i,pattern:e}}function K(e,n,t){let r,o="string"==typeof e?E(e):e,a=""===e||""===o.pathname?"/":o.pathname;if(null==a)r=t;else{let e=n.length-1;if(a.startsWith("..")){let n=a.split("/");for(;".."===n[0];)n.shift(),e-=1;o.pathname=n.join("/")}r=e>=0?n[e]:"/"}let i=function(e,n){void 0===n&&(n="/");let{pathname:t,search:r="",hash:o=""}="string"==typeof e?E(e):e,a=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)})),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:a,search:X(r),hash:Y(o)}}(o,r);return a&&"/"!==a&&a.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}function V(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=e.charAt(n.length);return t&&"/"!==t?null:e.slice(n.length)||"/"}const Z=e=>e.join("/").replace(/\/\/+/g,"/"),Q=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),X=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Y=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function J(){return J=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},J.apply(this,arguments)}const ee=["onClick","reloadDocument","replace","state","target","to"];function ne(e){let{basename:n,children:t,window:r}=e,o=(0,v.useRef)();null==o.current&&(o.current=function(e){function n(){var e=i.location,n=l.state||{};return[n.idx,{pathname:e.pathname,search:e.search,hash:e.hash,state:n.usr||null,key:n.key||"default"}]}function t(e){return"string"==typeof e?e:x(e)}function r(e,n){return void 0===n&&(n=null),w({pathname:d.pathname,hash:"",search:""},"string"==typeof e?E(e):e,{state:n,key:Math.random().toString(36).substr(2,8)})}function o(e){c=e,e=n(),u=e[0],d=e[1],f.call({action:c,location:d})}function a(e){l.go(e)}void 0===e&&(e={});var i=void 0===(e=e.window)?document.defaultView:e,l=i.history,s=null;i.addEventListener("popstate",(function(){if(s)p.call(s),s=null;else{var e=A.Pop,t=n(),r=t[0];if(t=t[1],p.length){if(null!=r){var i=u-r;i&&(s={action:e,location:t,retry:function(){a(-1*i)}},a(i))}}else o(e)}}));var c=A.Pop,u=(e=n())[0],d=e[1],f=_(),p=_();return null==u&&(u=0,l.replaceState(w({},l.state,{idx:u}),"")),{get action(){return c},get location(){return d},createHref:t,push:function e(n,a){var s=A.Push,c=r(n,a);if(!p.length||(p.call({action:s,location:c,retry:function(){e(n,a)}}),0)){var d=[{usr:c.state,key:c.key,idx:u+1},t(c)];c=d[0],d=d[1];try{l.pushState(c,"",d)}catch(e){i.location.assign(d)}o(s)}},replace:function e(n,a){var i=A.Replace,s=r(n,a);p.length&&(p.call({action:i,location:s,retry:function(){e(n,a)}}),1)||(s=[{usr:s.state,key:s.key,idx:u},t(s)],l.replaceState(s[0],"",s[1]),o(i))},go:a,back:function(){a(-1)},forward:function(){a(1)},listen:function(e){return f.push(e)},block:function(e){var n=p.push(e);return 1===p.length&&i.addEventListener("beforeunload",C),function(){n(),p.length||i.removeEventListener("beforeunload",C)}}}}({window:r}));let a=o.current,[i,l]=(0,v.useState)({action:a.action,location:a.location});return(0,v.useLayoutEffect)((()=>a.listen(l)),[a]),(0,v.createElement)(R,{basename:n,children:t,location:i.location,navigationType:i.action,navigator:a})}const te=(0,v.forwardRef)((function(e,n){let{onClick:t,reloadDocument:r,replace:o=!1,state:a,target:i,to:l}=e,s=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,ee),c=function(e){D()||S(!1);let{basename:n,navigator:t}=(0,v.useContext)(B),{hash:r,pathname:o,search:a}=F(e),i=o;if("/"!==n){let t=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?E(e).pathname:e.pathname}(e),r=null!=t&&t.endsWith("/");i="/"===o?n+(r?"/":""):Z([n,o])}return t.createHref({pathname:i,search:a,hash:r})}(l),u=function(e,n){let{target:t,replace:r,state:o}=void 0===n?{}:n,a=z(),i=P(),l=F(e);return(0,v.useCallback)((n=>{if(!(0!==n.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(n))){n.preventDefault();let t=!!r||x(i)===x(l);a(e,{replace:t,state:o})}}),[i,a,l,r,o,t,e])}(l,{replace:o,state:a,target:i});return(0,v.createElement)("a",J({},s,{href:c,onClick:function(e){t&&t(e),e.defaultPrevented||r||u(e)},ref:n,target:i}))}));function re(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((n,t)=>{let r=e[t];return n.concat(Array.isArray(r)?r.map((e=>[t,e])):[[t,r]])}),[]))}var oe=function(){return oe=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},oe.apply(this,arguments)};const ae=function(){return(0,r.jsx)("div",oe({className:"loader loader--show"},{children:(0,r.jsx)("div",{className:"loader__spinner"},void 0)}),void 0)};var ie=function(){return ie=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},ie.apply(this,arguments)};const le=function(e){var n=e.value,t=e.handleInput,o=e.handleSearch,a=(0,v.useState)(!1),i=a[0],l=a[1],s=(0,v.useRef)(null);return(0,r.jsxs)("div",ie({className:"search ".concat(i&&"search--error")},{children:[(0,r.jsx)("label",ie({htmlFor:"search",className:"search__label"},{children:"Repository url:"}),void 0),(0,r.jsxs)("div",ie({className:"search__container"},{children:[(0,r.jsx)("input",{className:"search__input",type:"text",name:"search",value:n,placeholder:"https://github.com/bmbrina/tripadvisor",onInput:function(){s.current&&(l(!1),t(s.current.value))},ref:s},void 0),(0,r.jsx)("button",ie({className:"search__btn",onClick:function(){var e;""!==(null===(e=s.current)||void 0===e?void 0:e.value)?o():l(!0)}},{children:"Search"}),void 0)]}),void 0),i&&(0,r.jsx)("p",ie({className:"search__error-message"},{children:"Please enter a valid repository url"}),void 0)]}),void 0)};var se=function(e){return new Date(e).toDateString()},ce=t(9669),ue=t.n(ce),de="https://api.github.com",fe="https://github.com/",pe=function(e){var n=e.replace(/\/$/,"").replace(fe,"").split("/");return{owner:n[0],repo:n[1]}},me=function(){return me=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},me.apply(this,arguments)};const ge=function(){var e=z(),n=function(e){let n=(0,v.useRef)(re(void 0)),t=P(),r=(0,v.useMemo)((()=>{let e=re(t.search);for(let t of n.current.keys())e.has(t)||n.current.getAll(t).forEach((n=>{e.append(t,n)}));return e}),[t.search]),o=z();return[r,(0,v.useCallback)(((e,n)=>{o("?"+re(e),n)}),[o])]}(),t=n[0],o=n[1],a=(0,v.useState)([]),i=a[0],l=a[1],s=(0,v.useState)(""),c=s[0],u=s[1],d=(0,v.useState)(""),f=d[0],p=d[1],m=(0,v.useState)(!1),g=m[0],h=m[1],b=function(e){p(e),l([])},y=function(e){b(""),h(!0),function(e){var n=pe(e),t=n.owner,r=n.repo;return ue()({url:"".concat(de,"/repos/").concat(t,"/").concat(r,"/issues")}).then((function(e){return{status:200,data:e.data.filter((function(e){return!e.pull_request}))}})).catch((function(e){return{status:400,errMessage:e.toJSON().message}}))}(e).then((function(e){h(!1),200===e.status&&e.data?e.data.length>0?l(e.data):b("This repository has no issues, try another one."):b(e.errMessage||"Error completing request")}))};return(0,v.useEffect)((function(){var e=t.get("repo");e&&(u(e),y(e))}),[]),(0,r.jsx)("div",me({className:"issues"},{children:(0,r.jsxs)("div",me({className:"issues__container"},{children:[(0,r.jsx)("h1",me({className:"issues__title"},{children:"Github Issues"}),void 0),(0,r.jsx)(le,{value:c,handleInput:function(e){return u(e)},handleSearch:function(){y(c),o({repo:c})}},void 0),(0,r.jsxs)("div",me({className:"issues__content"},{children:[g&&(0,r.jsx)(ae,{},void 0),""!==f&&(0,r.jsx)("p",{children:f},void 0),i.length>0&&(0,r.jsx)("div",me({className:"issues__table-container"},{children:(0,r.jsxs)("table",me({className:"issues__table"},{children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:["Title","Created On","User","Comments","Status"].map((function(e){return(0,r.jsx)("th",me({className:"issues__table-header"},{children:e}),e)}))},void 0)},void 0),(0,r.jsx)("tbody",me({className:"issues__table-body"},{children:i.map((function(n){return(0,r.jsxs)("tr",me({onClick:function(){return function(n){var t=pe(c),r=t.owner,o=t.repo;e("/issue/".concat(r,"/").concat(o,"/").concat(n))}(n.number)}},{children:[(0,r.jsx)("td",me({className:"issues__table-data"},{children:n.title}),void 0),(0,r.jsx)("td",me({className:"issues__table-data"},{children:se(n.created_at)}),void 0),(0,r.jsx)("td",me({className:"issues__table-data"},{children:n.user.login}),void 0),(0,r.jsx)("td",me({className:"issues__table-data"},{children:n.comments}),void 0),(0,r.jsx)("td",me({className:"issues__table-data issue__state issue__state--".concat(n.state)},{children:n.state}),void 0)]}),n.id)}))}),void 0)]}),void 0)}),void 0)]}),void 0)]}),void 0)}),void 0)};var he=t(8738),be={}.hasOwnProperty;function ye(e){return e&&"object"==typeof e?be.call(e,"position")||be.call(e,"type")?we(e.position):be.call(e,"start")||be.call(e,"end")?we(e):be.call(e,"line")||be.call(e,"column")?ve(e):"":""}function ve(e){return Ae(e&&e.line)+":"+Ae(e&&e.column)}function we(e){return ve(e&&e.start)+"-"+ve(e&&e.end)}function Ae(e){return e&&"number"==typeof e?e:1}class ke extends Error{constructor(e,n,t){var r,o=[null,null],a={start:{line:null,column:null},end:{line:null,column:null}};super(),"string"==typeof n&&(t=n,n=null),"string"==typeof t&&(-1===(r=t.indexOf(":"))?o[1]=t:(o[0]=t.slice(0,r),o[1]=t.slice(r+1))),n&&("type"in n||"position"in n?n.position&&(a=n.position):"start"in n||"end"in n?a=n:("line"in n||"column"in n)&&(a.start=n)),this.name=ye(n)||"1:1",this.message="object"==typeof e?e.message:e,this.stack="object"==typeof e?e.stack:"",this.reason=this.message,this.line=a.start.line,this.column=a.start.column,this.source=o[0],this.ruleId=o[1],this.position=a,this.file,this.fatal,this.url,this.note}}ke.prototype.file="",ke.prototype.name="",ke.prototype.reason="",ke.prototype.message="",ke.prototype.stack="",ke.prototype.fatal=null,ke.prototype.column=null,ke.prototype.line=null,ke.prototype.source=null,ke.prototype.ruleId=null,ke.prototype.position=null;const Ce=function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');Be(e);let t,r=0,o=-1,a=e.length;if(void 0===n||0===n.length||n.length>e.length){for(;a--;)if(47===e.charCodeAt(a)){if(t){r=a+1;break}}else o<0&&(t=!0,o=a+1);return o<0?"":e.slice(r,o)}if(n===e)return"";let i=-1,l=n.length-1;for(;a--;)if(47===e.charCodeAt(a)){if(t){r=a+1;break}}else i<0&&(t=!0,i=a+1),l>-1&&(e.charCodeAt(a)===n.charCodeAt(l--)?l<0&&(o=a):(l=-1,o=i));return r===o?o=i:o<0&&(o=e.length),e.slice(r,o)},_e=function(e){if(Be(e),0===e.length)return".";let n,t=-1,r=e.length;for(;--r;)if(47===e.charCodeAt(r)){if(n){t=r;break}}else n||(n=!0);return t<0?47===e.charCodeAt(0)?"/":".":1===t&&47===e.charCodeAt(0)?"//":e.slice(0,t)},xe=function(e){Be(e);let n,t=e.length,r=-1,o=0,a=-1,i=0;for(;t--;){const l=e.charCodeAt(t);if(47!==l)r<0&&(n=!0,r=t+1),46===l?a<0?a=t:1!==i&&(i=1):a>-1&&(i=-1);else if(n){o=t+1;break}}return a<0||r<0||0===i||1===i&&a===r-1&&a===o+1?"":e.slice(a,r)},Ee=function(...e){let n,t=-1;for(;++t<e.length;)Be(e[t]),e[t]&&(n=void 0===n?e[t]:n+"/"+e[t]);return void 0===n?".":function(e){Be(e);const n=47===e.charCodeAt(0);let t=function(e,n){let t,r,o="",a=0,i=-1,l=0,s=-1;for(;++s<=e.length;){if(s<e.length)t=e.charCodeAt(s);else{if(47===t)break;t=47}if(47===t){if(i===s-1||1===l);else if(i!==s-1&&2===l){if(o.length<2||2!==a||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2))if(o.length>2){if(r=o.lastIndexOf("/"),r!==o.length-1){r<0?(o="",a=0):(o=o.slice(0,r),a=o.length-1-o.lastIndexOf("/")),i=s,l=0;continue}}else if(o.length>0){o="",a=0,i=s,l=0;continue}n&&(o=o.length>0?o+"/..":"..",a=2)}else o.length>0?o+="/"+e.slice(i+1,s):o=e.slice(i+1,s),a=s-i-1;i=s,l=0}else 46===t&&l>-1?l++:l=-1}return o}(e,!n);return 0!==t.length||n||(t="."),t.length>0&&47===e.charCodeAt(e.length-1)&&(t+="/"),n?"/"+t:t}(n)},Se="/";function Be(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}const Ne=function(){return"/"};function Oe(e){return null!==e&&"object"==typeof e&&e.href&&e.origin}const Me=["history","path","basename","stem","extname","dirname"];class Te{constructor(e){let n;n=e?"string"==typeof e||he(e)?{value:e}:Oe(e)?{path:e}:e:{},this.data={},this.messages=[],this.history=[],this.cwd=Ne(),this.value,this.stored,this.result,this.map;let t,r=-1;for(;++r<Me.length;){const e=Me[r];e in n&&void 0!==n[e]&&(this[e]="history"===e?[...n[e]]:n[e])}for(t in n)Me.includes(t)||(this[t]=n[t])}get path(){return this.history[this.history.length-1]}set path(e){Oe(e)&&(e=function(e){if("string"==typeof e)e=new URL(e);else if(!Oe(e)){const n=new TypeError('The "path" argument must be of type string or an instance of URL. Received `'+e+"`");throw n.code="ERR_INVALID_ARG_TYPE",n}if("file:"!==e.protocol){const e=new TypeError("The URL must be of scheme file");throw e.code="ERR_INVALID_URL_SCHEME",e}return function(e){if(""!==e.hostname){const e=new TypeError('File URL host must be "localhost" or empty on darwin');throw e.code="ERR_INVALID_FILE_URL_HOST",e}const n=e.pathname;let t=-1;for(;++t<n.length;)if(37===n.charCodeAt(t)&&50===n.charCodeAt(t+1)){const e=n.charCodeAt(t+2);if(70===e||102===e){const e=new TypeError("File URL path must not include encoded / characters");throw e.code="ERR_INVALID_FILE_URL_PATH",e}}return decodeURIComponent(n)}(e)}(e)),Re(e,"path"),this.path!==e&&this.history.push(e)}get dirname(){return"string"==typeof this.path?_e(this.path):void 0}set dirname(e){Le(this.basename,"dirname"),this.path=Ee(e||"",this.basename)}get basename(){return"string"==typeof this.path?Ce(this.path):void 0}set basename(e){Re(e,"basename"),Ie(e,"basename"),this.path=Ee(this.dirname||"",e)}get extname(){return"string"==typeof this.path?xe(this.path):void 0}set extname(e){if(Ie(e,"extname"),Le(this.dirname,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.includes(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=Ee(this.dirname,this.stem+(e||""))}get stem(){return"string"==typeof this.path?Ce(this.path,this.extname):void 0}set stem(e){Re(e,"stem"),Ie(e,"stem"),this.path=Ee(this.dirname||"",e+(this.extname||""))}toString(e){return(this.value||"").toString(e)}message(e,n,t){const r=new ke(e,n,t);return this.path&&(r.name=this.path+":"+r.name,r.file=this.path),r.fatal=!1,this.messages.push(r),r}info(e,n,t){const r=this.message(e,n,t);return r.fatal=null,r}fail(e,n,t){const r=this.message(e,n,t);throw r.fatal=!0,r}}function Ie(e,n){if(e&&e.includes(Se))throw new Error("`"+n+"` cannot be a path: did not expect `"+Se+"`")}function Re(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function Le(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}function De(e){if(e)throw e}var Pe=t(4470);function ze(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;const n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}const Fe=function e(){const n=function(){const e=[],n={run:function(...n){let t=-1;const r=n.pop();if("function"!=typeof r)throw new TypeError("Expected function as last argument, not "+r);!function o(a,...i){const l=e[++t];let s=-1;if(a)r(a);else{for(;++s<n.length;)null!==i[s]&&void 0!==i[s]||(i[s]=n[s]);n=i,l?function(e,n){let t;return function(...n){const a=e.length>n.length;let i;a&&n.push(r);try{i=e(...n)}catch(e){const n=e;if(a&&t)throw n;return r(n)}a||(i instanceof Promise?i.then(o,r):i instanceof Error?r(i):o(i))};function r(e,...r){t||(t=!0,n(e,...r))}function o(e){r(null,e)}}(l,o)(...i):r(null,...i)}}(null,...n)},use:function(t){if("function"!=typeof t)throw new TypeError("Expected `middelware` to be a function, not "+t);return e.push(t),n}};return n}(),t=[];let r,o={},a=-1;return i.data=function(e,n){return"string"==typeof e?2===arguments.length?(He("data",r),o[e]=n,i):je.call(o,e)&&o[e]||null:e?(He("data",r),o=e,i):o},i.Parser=void 0,i.Compiler=void 0,i.freeze=function(){if(r)return i;for(;++a<t.length;){const[e,...r]=t[a];if(!1===r[0])continue;!0===r[0]&&(r[1]=void 0);const o=e.call(i,...r);"function"==typeof o&&n.use(o)}return r=!0,a=Number.POSITIVE_INFINITY,i},i.attachers=t,i.use=function(e,...n){let a;if(He("use",r),null==e);else if("function"==typeof e)u(e,...n);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");Array.isArray(e)?c(e):s(e)}return a&&(o.settings=Object.assign(o.settings||{},a)),i;function l(e){if("function"==typeof e)u(e);else{if("object"!=typeof e)throw new TypeError("Expected usable value, not `"+e+"`");if(Array.isArray(e)){const[n,...t]=e;u(n,...t)}else s(e)}}function s(e){c(e.plugins),e.settings&&(a=Object.assign(a||{},e.settings))}function c(e){let n=-1;if(null==e);else{if(!Array.isArray(e))throw new TypeError("Expected a list of plugins, not `"+e+"`");for(;++n<e.length;)l(e[n])}}function u(e,n){let r,o=-1;for(;++o<t.length;)if(t[o][0]===e){r=t[o];break}r?(ze(r[1])&&ze(n)&&(n=Pe(!0,r[1],n)),r[1]=n):t.push([...arguments])}},i.parse=function(e){i.freeze();const n=Ke(e),t=i.Parser;return $e("parse",t),Ue(t,"parse")?new t(String(n),n).parse():t(String(n),n)},i.stringify=function(e,n){i.freeze();const t=Ke(n),r=i.Compiler;return qe("stringify",r),Ge(e),Ue(r,"compile")?new r(e,t).compile():r(e,t)},i.run=function(e,t,r){if(Ge(e),i.freeze(),r||"function"!=typeof t||(r=t,t=void 0),!r)return new Promise(o);function o(o,a){n.run(e,Ke(t),(function(n,t,i){t=t||e,n?a(n):o?o(t):r(null,t,i)}))}o(null,r)},i.runSync=function(e,n){let t,r;return i.run(e,n,(function(e,n){De(e),t=n,r=!0})),We("runSync","run",r),t},i.process=function(e,n){if(i.freeze(),$e("process",i.Parser),qe("process",i.Compiler),!n)return new Promise(t);function t(t,r){const o=Ke(e);function a(e,o){e||!o?r(e):t?t(o):n(null,o)}i.run(i.parse(o),o,((e,n,t)=>{if(!e&&n&&t){const o=i.stringify(n,t);null==o||("string"==typeof(r=o)||he(r)?t.value=o:t.result=o),a(e,t)}else a(e);var r}))}t(null,n)},i.processSync=function(e){let n;i.freeze(),$e("processSync",i.Parser),qe("processSync",i.Compiler);const t=Ke(e);return i.process(t,(function(e){n=!0,De(e)})),We("processSync","process",n),t},i;function i(){const n=e();let r=-1;for(;++r<t.length;)n.use(...t[r]);return n.data(Pe(!0,{},o)),n}}().freeze(),je={}.hasOwnProperty;function Ue(e,n){return"function"==typeof e&&e.prototype&&(function(e){let n;for(n in e)if(je.call(e,n))return!0;return!1}(e.prototype)||n in e.prototype)}function $e(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Parser`")}function qe(e,n){if("function"!=typeof n)throw new TypeError("Cannot `"+e+"` without `Compiler`")}function He(e,n){if(n)throw new Error("Cannot call `"+e+"` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.")}function Ge(e){if(!ze(e)||"string"!=typeof e.type)throw new TypeError("Expected node, got `"+e+"`")}function We(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}function Ke(e){return function(e){return Boolean(e&&"object"==typeof e&&"message"in e&&"messages"in e)}(e)?e:new Te(e)}function Ve(e,n){return e&&"object"==typeof e&&(e.value||(n?e.alt:"")||"children"in e&&Ze(e.children,n)||Array.isArray(e)&&Ze(e,n))||""}function Ze(e,n){for(var t=[],r=-1;++r<e.length;)t[r]=Ve(e[r],n);return t.join("")}function Qe(e,n,t,r){const o=e.length;let a,i=0;if(n=n<0?-n>o?0:o+n:n>o?o:n,t=t>0?t:0,r.length<1e4)a=Array.from(r),a.unshift(n,t),[].splice.apply(e,a);else for(t&&[].splice.apply(e,[n,t]);i<r.length;)a=r.slice(i,i+1e4),a.unshift(n,0),[].splice.apply(e,a),i+=1e4,n+=1e4}function Xe(e,n){return e.length>0?(Qe(e,e.length,0,n),e):n}const Ye={}.hasOwnProperty;function Je(e,n){let t;for(t in n){const r=(Ye.call(e,t)?e[t]:void 0)||(e[t]={}),o=n[t];let a;for(a in o){Ye.call(r,a)||(r[a]=[]);const e=o[a];en(r[a],Array.isArray(e)?e:e?[e]:[])}}}function en(e,n){let t=-1;const r=[];for(;++t<n.length;)("after"===n[t].add?e:r).push(n[t]);Qe(e,0,0,r)}const nn=mn(/[A-Za-z]/),tn=mn(/\d/),rn=mn(/[\dA-Fa-f]/),on=mn(/[\dA-Za-z]/),an=mn(/[!-/:-@[-`{-~]/),ln=mn(/[#-'*+\--9=?A-Z^-~]/);function sn(e){return null!==e&&(e<32||127===e)}function cn(e){return null!==e&&(e<0||32===e)}function un(e){return null!==e&&e<-2}function dn(e){return-2===e||-1===e||32===e}const fn=mn(/\s/),pn=mn(/[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/);function mn(e){return function(n){return null!==n&&e.test(String.fromCharCode(n))}}function gn(e,n,t,r){const o=r?r-1:Number.POSITIVE_INFINITY;let a=0;return function(r){return dn(r)?(e.enter(t),i(r)):n(r)};function i(r){return dn(r)&&a++<o?(e.consume(r),i):(e.exit(t),n(r))}}const hn={tokenize:function(e){const n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null!==t)return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),gn(e,n,"linePrefix");e.consume(t)}),(function(n){return e.enter("paragraph"),r(n)}));let t;return n;function r(n){const r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,o(n)}function o(n){return null===n?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(n)):un(n)?(e.consume(n),e.exit("chunkText"),r):(e.consume(n),o)}}},bn={tokenize:function(e){const n=this,t=[];let r,o,a,i=0;return l;function l(r){if(i<t.length){const o=t[i];return n.containerState=o[1],e.attempt(o[0].continuation,s,c)(r)}return c(r)}function s(e){if(i++,n.containerState._closeFlow){n.containerState._closeFlow=void 0,r&&y();const t=n.events.length;let o,a=t;for(;a--;)if("exit"===n.events[a][0]&&"chunkFlow"===n.events[a][1].type){o=n.events[a][1].end;break}b(i);let l=t;for(;l<n.events.length;)n.events[l][1].end=Object.assign({},o),l++;return Qe(n.events,a+1,0,n.events.slice(t)),n.events.length=l,c(e)}return l(e)}function c(o){if(i===t.length){if(!r)return f(o);if(r.currentConstruct&&r.currentConstruct.concrete)return m(o);n.interrupt=Boolean(r.currentConstruct&&!r._gfmTableDynamicInterruptHack)}return n.containerState={},e.check(yn,u,d)(o)}function u(e){return r&&y(),b(i),f(e)}function d(e){return n.parser.lazy[n.now().line]=i!==t.length,a=n.now().offset,m(e)}function f(t){return n.containerState={},e.attempt(yn,p,m)(t)}function p(e){return i++,t.push([n.currentConstruct,n.containerState]),f(e)}function m(t){return null===t?(r&&y(),b(0),void e.consume(t)):(r=r||n.parser.flow(n.now()),e.enter("chunkFlow",{contentType:"flow",previous:o,_tokenizer:r}),g(t))}function g(t){return null===t?(h(e.exit("chunkFlow"),!0),b(0),void e.consume(t)):un(t)?(e.consume(t),h(e.exit("chunkFlow")),i=0,n.interrupt=void 0,l):(e.consume(t),g)}function h(e,t){const l=n.sliceStream(e);if(t&&l.push(null),e.previous=o,o&&(o.next=e),o=e,r.defineSkip(e.start),r.write(l),n.parser.lazy[e.start.line]){let e=r.events.length;for(;e--;)if(r.events[e][1].start.offset<a&&(!r.events[e][1].end||r.events[e][1].end.offset>a))return;const t=n.events.length;let o,l,s=t;for(;s--;)if("exit"===n.events[s][0]&&"chunkFlow"===n.events[s][1].type){if(o){l=n.events[s][1].end;break}o=!0}for(b(i),e=t;e<n.events.length;)n.events[e][1].end=Object.assign({},l),e++;Qe(n.events,s+1,0,n.events.slice(t)),n.events.length=e}}function b(r){let o=t.length;for(;o-- >r;){const r=t[o];n.containerState=r[1],r[0].exit.call(n,e)}t.length=r}function y(){r.write([null]),o=void 0,r=void 0,n.containerState._closeFlow=void 0}}},yn={tokenize:function(e,n,t){return gn(e,e.attempt(this.parser.constructs.document,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},vn={tokenize:function(e,n,t){return gn(e,(function(e){return null===e||un(e)?n(e):t(e)}),"linePrefix")},partial:!0};function wn(e){const n={};let t,r,o,a,i,l,s,c=-1;for(;++c<e.length;){for(;c in n;)c=n[c];if(t=e[c],c&&"chunkFlow"===t[1].type&&"listItemPrefix"===e[c-1][1].type&&(l=t[1]._tokenizer.events,o=0,o<l.length&&"lineEndingBlank"===l[o][1].type&&(o+=2),o<l.length&&"content"===l[o][1].type))for(;++o<l.length&&"content"!==l[o][1].type;)"chunkText"===l[o][1].type&&(l[o][1]._isInFirstContentOfListItem=!0,o++);if("enter"===t[0])t[1].contentType&&(Object.assign(n,An(e,c)),c=n[c],s=!0);else if(t[1]._container){for(o=c,r=void 0;o--&&(a=e[o],"lineEnding"===a[1].type||"lineEndingBlank"===a[1].type);)"enter"===a[0]&&(r&&(e[r][1].type="lineEndingBlank"),a[1].type="lineEnding",r=o);r&&(t[1].end=Object.assign({},e[r][1].start),i=e.slice(r,c),i.unshift(t),Qe(e,r,c-r+1,i))}}return!s}function An(e,n){const t=e[n][1],r=e[n][2];let o=n-1;const a=[],i=t._tokenizer||r.parser[t.contentType](t.start),l=i.events,s=[],c={};let u,d,f=-1,p=t,m=0,g=0;const h=[g];for(;p;){for(;e[++o][1]!==p;);a.push(o),p._tokenizer||(u=r.sliceStream(p),p.next||u.push(null),d&&i.defineSkip(p.start),p._isInFirstContentOfListItem&&(i._gfmTasklistFirstContentOfListItem=!0),i.write(u),p._isInFirstContentOfListItem&&(i._gfmTasklistFirstContentOfListItem=void 0)),d=p,p=p.next}for(p=t;++f<l.length;)"exit"===l[f][0]&&"enter"===l[f-1][0]&&l[f][1].type===l[f-1][1].type&&l[f][1].start.line!==l[f][1].end.line&&(g=f+1,h.push(g),p._tokenizer=void 0,p.previous=void 0,p=p.next);for(i.events=[],p?(p._tokenizer=void 0,p.previous=void 0):h.pop(),f=h.length;f--;){const n=l.slice(h[f],h[f+1]),t=a.pop();s.unshift([t,t+n.length-1]),Qe(e,t,2,n)}for(f=-1;++f<s.length;)c[m+s[f][0]]=m+s[f][1],m+=s[f][1]-s[f][0]-1;return c}const kn={tokenize:function(e,n){let t;return function(n){return e.enter("content"),t=e.enter("chunkContent",{contentType:"content"}),r(n)};function r(n){return null===n?o(n):un(n)?e.check(Cn,a,o)(n):(e.consume(n),r)}function o(t){return e.exit("chunkContent"),e.exit("content"),n(t)}function a(n){return e.consume(n),e.exit("chunkContent"),t.next=e.enter("chunkContent",{contentType:"content",previous:t}),t=t.next,r}},resolve:function(e){return wn(e),e}},Cn={tokenize:function(e,n,t){const r=this;return function(n){return e.exit("chunkContent"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),gn(e,o,"linePrefix")};function o(o){if(null===o||un(o))return t(o);const a=r.events[r.events.length-1];return!r.parser.constructs.disable.null.includes("codeIndented")&&a&&"linePrefix"===a[1].type&&a[2].sliceSerialize(a[1],!0).length>=4?n(o):e.interrupt(r.parser.constructs.flow,t,n)(o)}},partial:!0},_n={tokenize:function(e){const n=this,t=e.attempt(vn,(function(r){if(null!==r)return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),n.currentConstruct=void 0,t;e.consume(r)}),e.attempt(this.parser.constructs.flowInitial,r,gn(e,e.attempt(this.parser.constructs.flow,r,e.attempt(kn,r)),"linePrefix")));return t;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),n.currentConstruct=void 0,t;e.consume(r)}}},xn={resolveAll:Nn()},En=Bn("string"),Sn=Bn("text");function Bn(e){return{tokenize:function(n){const t=this,r=this.parser.constructs[e],o=n.attempt(r,a,i);return a;function a(e){return s(e)?o(e):i(e)}function i(e){if(null!==e)return n.enter("data"),n.consume(e),l;n.consume(e)}function l(e){return s(e)?(n.exit("data"),o(e)):(n.consume(e),l)}function s(e){if(null===e)return!0;const n=r[e];let o=-1;if(n)for(;++o<n.length;){const e=n[o];if(!e.previous||e.previous.call(t,t.previous))return!0}return!1}},resolveAll:Nn("text"===e?On:void 0)}}function Nn(e){return function(n,t){let r,o=-1;for(;++o<=n.length;)void 0===r?n[o]&&"data"===n[o][1].type&&(r=o,o++):n[o]&&"data"===n[o][1].type||(o!==r+2&&(n[r][1].end=n[o-1][1].end,n.splice(r+2,o-r-2),o=r+2),r=void 0);return e?e(n,t):n}}function On(e,n){let t=0;for(;++t<=e.length;)if((t===e.length||"lineEnding"===e[t][1].type)&&"data"===e[t-1][1].type){const r=e[t-1][1],o=n.sliceStream(r);let a,i=o.length,l=-1,s=0;for(;i--;){const e=o[i];if("string"==typeof e){for(l=e.length;32===e.charCodeAt(l-1);)s++,l--;if(l)break;l=-1}else if(-2===e)a=!0,s++;else if(-1!==e){i++;break}}if(s){const o={type:t===e.length||a||s<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-s,offset:r.end.offset-s,_index:r.start._index+i,_bufferIndex:i?l:r.start._bufferIndex+l},end:Object.assign({},r.end)};r.end=Object.assign({},o.start),r.start.offset===r.end.offset?Object.assign(r,o):(e.splice(t,0,["enter",o,n],["exit",o,n]),t+=2)}t++}return e}function Mn(e,n,t){const r=[];let o=-1;for(;++o<e.length;){const a=e[o].resolveAll;a&&!r.includes(a)&&(n=a(n,t),r.push(a))}return n}function Tn(e,n,t){let r=Object.assign(t?Object.assign({},t):{line:1,column:1,offset:0},{_index:0,_bufferIndex:-1});const o={},a=[];let i=[],l=[],s=!0;const c={consume:function(e){un(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,v()):-1!==e&&(r.column++,r.offset++),r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===i[r._index].length&&(r._bufferIndex=-1,r._index++)),u.previous=e,s=!0},enter:function(e,n){const t=n||{};return t.type=e,t.start=m(),u.events.push(["enter",t,u]),l.push(t),t},exit:function(e){const n=l.pop();return n.end=m(),u.events.push(["exit",n,u]),n},attempt:b((function(e,n){y(e,n.from)})),check:b(h),interrupt:b(h,{interrupt:!0})},u={previous:null,code:null,containerState:{},events:[],parser:e,sliceStream:p,sliceSerialize:function(e,n){return function(e,n){let t=-1;const r=[];let o;for(;++t<e.length;){const a=e[t];let i;if("string"==typeof a)i=a;else switch(a){case-5:i="\r";break;case-4:i="\n";break;case-3:i="\r\n";break;case-2:i=n?" ":"\t";break;case-1:if(!n&&o)continue;i=" ";break;default:i=String.fromCharCode(a)}o=-2===a,r.push(i)}return r.join("")}(p(e),n)},now:m,defineSkip:function(e){o[e.line]=e.column,v()},write:function(e){return i=Xe(i,e),function(){let e;for(;r._index<i.length;){const n=i[r._index];if("string"==typeof n)for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<n.length;)g(n.charCodeAt(r._bufferIndex));else g(n)}}(),null!==i[i.length-1]?[]:(y(n,0),u.events=Mn(a,u.events,u),u.events)}};let d,f=n.tokenize.call(u,c);return n.resolveAll&&a.push(n),u;function p(e){return function(e,n){const t=n.start._index,r=n.start._bufferIndex,o=n.end._index,a=n.end._bufferIndex;let i;return t===o?i=[e[t].slice(r,a)]:(i=e.slice(t,o),r>-1&&(i[0]=i[0].slice(r)),a>0&&i.push(e[o].slice(0,a))),i}(i,e)}function m(){return Object.assign({},r)}function g(e){s=void 0,d=e,f=f(e)}function h(e,n){n.restore()}function b(e,n){return function(t,o,a){let i,d,f,p;return Array.isArray(t)?h(t):"tokenize"in t?h([t]):(g=t,function(e){const n=null!==e&&g[e],t=null!==e&&g.null;return h([...Array.isArray(n)?n:n?[n]:[],...Array.isArray(t)?t:t?[t]:[]])(e)});var g;function h(e){return i=e,d=0,0===e.length?a:b(e[d])}function b(e){return function(t){return p=function(){const e=m(),n=u.previous,t=u.currentConstruct,o=u.events.length,a=Array.from(l);return{restore:function(){r=e,u.previous=n,u.currentConstruct=t,u.events.length=o,l=a,v()},from:o}}(),f=e,e.partial||(u.currentConstruct=e),e.name&&u.parser.constructs.disable.null.includes(e.name)?w():e.tokenize.call(n?Object.assign(Object.create(u),n):u,c,y,w)(t)}}function y(n){return s=!0,e(f,p),o}function w(e){return s=!0,p.restore(),++d<i.length?b(i[d]):a}}}function y(e,n){e.resolveAll&&!a.includes(e)&&a.push(e),e.resolve&&Qe(u.events,n,u.events.length-n,e.resolve(u.events.slice(n),u)),e.resolveTo&&(u.events=e.resolveTo(u.events,u))}function v(){r.line in o&&r.column<2&&(r.column=o[r.line],r.offset+=o[r.line]-1)}}const In={name:"thematicBreak",tokenize:function(e,n,t){let r,o=0;return function(n){return e.enter("thematicBreak"),r=n,a(n)};function a(l){return l===r?(e.enter("thematicBreakSequence"),i(l)):dn(l)?gn(e,a,"whitespace")(l):o<3||null!==l&&!un(l)?t(l):(e.exit("thematicBreak"),n(l))}function i(n){return n===r?(e.consume(n),o++,i):(e.exit("thematicBreakSequence"),a(n))}}},Rn={name:"list",tokenize:function(e,n,t){const r=this,o=r.events[r.events.length-1];let a=o&&"linePrefix"===o[1].type?o[2].sliceSerialize(o[1],!0).length:0,i=0;return function(n){const o=r.containerState.type||(42===n||43===n||45===n?"listUnordered":"listOrdered");if("listUnordered"===o?!r.containerState.marker||n===r.containerState.marker:tn(n)){if(r.containerState.type||(r.containerState.type=o,e.enter(o,{_container:!0})),"listUnordered"===o)return e.enter("listItemPrefix"),42===n||45===n?e.check(In,t,s)(n):s(n);if(!r.interrupt||49===n)return e.enter("listItemPrefix"),e.enter("listItemValue"),l(n)}return t(n)};function l(n){return tn(n)&&++i<10?(e.consume(n),l):(!r.interrupt||i<2)&&(r.containerState.marker?n===r.containerState.marker:41===n||46===n)?(e.exit("listItemValue"),s(n)):t(n)}function s(n){return e.enter("listItemMarker"),e.consume(n),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||n,e.check(vn,r.interrupt?t:c,e.attempt(Ln,d,u))}function c(e){return r.containerState.initialBlankLine=!0,a++,d(e)}function u(n){return dn(n)?(e.enter("listItemPrefixWhitespace"),e.consume(n),e.exit("listItemPrefixWhitespace"),d):t(n)}function d(t){return r.containerState.size=a+r.sliceSerialize(e.exit("listItemPrefix"),!0).length,n(t)}},continuation:{tokenize:function(e,n,t){const r=this;return r.containerState._closeFlow=void 0,e.check(vn,(function(t){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,gn(e,n,"listItemIndent",r.containerState.size+1)(t)}),(function(t){return r.containerState.furtherBlankLines||!dn(t)?(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,o(t)):(r.containerState.furtherBlankLines=void 0,r.containerState.initialBlankLine=void 0,e.attempt(Dn,n,o)(t))}));function o(o){return r.containerState._closeFlow=!0,r.interrupt=void 0,gn(e,e.attempt(Rn,n,t),"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)(o)}}},exit:function(e){e.exit(this.containerState.type)}},Ln={tokenize:function(e,n,t){const r=this;return gn(e,(function(e){const o=r.events[r.events.length-1];return!dn(e)&&o&&"listItemPrefixWhitespace"===o[1].type?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.includes("codeIndented")?void 0:5)},partial:!0},Dn={tokenize:function(e,n,t){const r=this;return gn(e,(function(e){const o=r.events[r.events.length-1];return o&&"listItemIndent"===o[1].type&&o[2].sliceSerialize(o[1],!0).length===r.containerState.size?n(e):t(e)}),"listItemIndent",r.containerState.size+1)},partial:!0},Pn={name:"blockQuote",tokenize:function(e,n,t){const r=this;return function(n){if(62===n){const t=r.containerState;return t.open||(e.enter("blockQuote",{_container:!0}),t.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(n),e.exit("blockQuoteMarker"),o}return t(n)};function o(t){return dn(t)?(e.enter("blockQuotePrefixWhitespace"),e.consume(t),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),n):(e.exit("blockQuotePrefix"),n(t))}},continuation:{tokenize:function(e,n,t){return gn(e,e.attempt(Pn,n,t),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}},exit:function(e){e.exit("blockQuote")}};function zn(e,n,t,r,o,a,i,l,s){const c=s||Number.POSITIVE_INFINITY;let u=0;return function(n){return 60===n?(e.enter(r),e.enter(o),e.enter(a),e.consume(n),e.exit(a),d):null===n||41===n||sn(n)?t(n):(e.enter(r),e.enter(i),e.enter(l),e.enter("chunkString",{contentType:"string"}),m(n))};function d(t){return 62===t?(e.enter(a),e.consume(t),e.exit(a),e.exit(o),e.exit(r),n):(e.enter(l),e.enter("chunkString",{contentType:"string"}),f(t))}function f(n){return 62===n?(e.exit("chunkString"),e.exit(l),d(n)):null===n||60===n||un(n)?t(n):(e.consume(n),92===n?p:f)}function p(n){return 60===n||62===n||92===n?(e.consume(n),f):f(n)}function m(o){return 40===o?++u>c?t(o):(e.consume(o),m):41===o?u--?(e.consume(o),m):(e.exit("chunkString"),e.exit(l),e.exit(i),e.exit(r),n(o)):null===o||cn(o)?u?t(o):(e.exit("chunkString"),e.exit(l),e.exit(i),e.exit(r),n(o)):sn(o)?t(o):(e.consume(o),92===o?g:m)}function g(n){return 40===n||41===n||92===n?(e.consume(n),m):m(n)}}function Fn(e,n,t,r,o,a){const i=this;let l,s=0;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),e.enter(a),c};function c(d){return null===d||91===d||93===d&&!l||94===d&&!s&&"_hiddenFootnoteSupport"in i.parser.constructs||s>999?t(d):93===d?(e.exit(a),e.enter(o),e.consume(d),e.exit(o),e.exit(r),n):un(d)?(e.enter("lineEnding"),e.consume(d),e.exit("lineEnding"),c):(e.enter("chunkString",{contentType:"string"}),u(d))}function u(n){return null===n||91===n||93===n||un(n)||s++>999?(e.exit("chunkString"),c(n)):(e.consume(n),l=l||!dn(n),92===n?d:u)}function d(n){return 91===n||92===n||93===n?(e.consume(n),s++,u):u(n)}}function jn(e,n,t,r,o,a){let i;return function(n){return e.enter(r),e.enter(o),e.consume(n),e.exit(o),i=40===n?41:n,l};function l(t){return t===i?(e.enter(o),e.consume(t),e.exit(o),e.exit(r),n):(e.enter(a),s(t))}function s(n){return n===i?(e.exit(a),l(i)):null===n?t(n):un(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),gn(e,s,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),c(n))}function c(n){return n===i||null===n||un(n)?(e.exit("chunkString"),s(n)):(e.consume(n),92===n?u:c)}function u(n){return n===i||92===n?(e.consume(n),c):c(n)}}function Un(e,n){let t;return function r(o){return un(o)?(e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),t=!0,r):dn(o)?gn(e,r,t?"linePrefix":"lineSuffix")(o):n(o)}}function $n(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()}const qn={name:"definition",tokenize:function(e,n,t){const r=this;let o;return function(n){return e.enter("definition"),Fn.call(r,e,a,t,"definitionLabel","definitionLabelMarker","definitionLabelString")(n)};function a(n){return o=$n(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)),58===n?(e.enter("definitionMarker"),e.consume(n),e.exit("definitionMarker"),Un(e,zn(e,e.attempt(Hn,gn(e,i,"whitespace"),gn(e,i,"whitespace")),t,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):t(n)}function i(a){return null===a||un(a)?(e.exit("definition"),r.parser.defined.includes(o)||r.parser.defined.push(o),n(a)):t(a)}}},Hn={tokenize:function(e,n,t){return function(n){return cn(n)?Un(e,r)(n):t(n)};function r(n){return 34===n||39===n||40===n?jn(e,gn(e,o,"whitespace"),t,"definitionTitle","definitionTitleMarker","definitionTitleString")(n):t(n)}function o(e){return null===e||un(e)?n(e):t(e)}},partial:!0},Gn={name:"codeIndented",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("codeIndented"),gn(e,o,"linePrefix",5)(n)};function o(e){const n=r.events[r.events.length-1];return n&&"linePrefix"===n[1].type&&n[2].sliceSerialize(n[1],!0).length>=4?a(e):t(e)}function a(n){return null===n?l(n):un(n)?e.attempt(Wn,a,l)(n):(e.enter("codeFlowValue"),i(n))}function i(n){return null===n||un(n)?(e.exit("codeFlowValue"),a(n)):(e.consume(n),i)}function l(t){return e.exit("codeIndented"),n(t)}}},Wn={tokenize:function(e,n,t){const r=this;return o;function o(n){return r.parser.lazy[r.now().line]?t(n):un(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o):gn(e,a,"linePrefix",5)(n)}function a(e){const a=r.events[r.events.length-1];return a&&"linePrefix"===a[1].type&&a[2].sliceSerialize(a[1],!0).length>=4?n(e):un(e)?o(e):t(e)}},partial:!0},Kn={name:"headingAtx",tokenize:function(e,n,t){const r=this;let o=0;return function(n){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),a(n)};function a(l){return 35===l&&o++<6?(e.consume(l),a):null===l||cn(l)?(e.exit("atxHeadingSequence"),r.interrupt?n(l):i(l)):t(l)}function i(t){return 35===t?(e.enter("atxHeadingSequence"),l(t)):null===t||un(t)?(e.exit("atxHeading"),n(t)):dn(t)?gn(e,i,"whitespace")(t):(e.enter("atxHeadingText"),s(t))}function l(n){return 35===n?(e.consume(n),l):(e.exit("atxHeadingSequence"),i(n))}function s(n){return null===n||35===n||cn(n)?(e.exit("atxHeadingText"),i(n)):(e.consume(n),s)}},resolve:function(e,n){let t,r,o=e.length-2,a=3;return"whitespace"===e[a][1].type&&(a+=2),o-2>a&&"whitespace"===e[o][1].type&&(o-=2),"atxHeadingSequence"===e[o][1].type&&(a===o-1||o-4>a&&"whitespace"===e[o-2][1].type)&&(o-=a+1===o?2:4),o>a&&(t={type:"atxHeadingText",start:e[a][1].start,end:e[o][1].end},r={type:"chunkText",start:e[a][1].start,end:e[o][1].end,contentType:"text"},Qe(e,a,o-a+1,[["enter",t,n],["enter",r,n],["exit",r,n],["exit",t,n]])),e}},Vn={name:"setextUnderline",tokenize:function(e,n,t){const r=this;let o,a,i=r.events.length;for(;i--;)if("lineEnding"!==r.events[i][1].type&&"linePrefix"!==r.events[i][1].type&&"content"!==r.events[i][1].type){a="paragraph"===r.events[i][1].type;break}return function(n){return r.parser.lazy[r.now().line]||!r.interrupt&&!a?t(n):(e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),o=n,l(n))};function l(n){return n===o?(e.consume(n),l):(e.exit("setextHeadingLineSequence"),gn(e,s,"lineSuffix")(n))}function s(r){return null===r||un(r)?(e.exit("setextHeadingLine"),n(r)):t(r)}},resolveTo:function(e,n){let t,r,o,a=e.length;for(;a--;)if("enter"===e[a][0]){if("content"===e[a][1].type){t=a;break}"paragraph"===e[a][1].type&&(r=a)}else"content"===e[a][1].type&&e.splice(a,1),o||"definition"!==e[a][1].type||(o=a);const i={type:"setextHeading",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)};return e[r][1].type="setextHeadingText",o?(e.splice(r,0,["enter",i,n]),e.splice(o+1,0,["exit",e[t][1],n]),e[t][1].end=Object.assign({},e[o][1].end)):e[t][1]=i,e.push(["exit",i,n]),e}},Zn=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],Qn=["pre","script","style","textarea"],Xn={name:"htmlFlow",tokenize:function(e,n,t){const r=this;let o,a,i,l,s;return function(n){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(n),c};function c(l){return 33===l?(e.consume(l),u):47===l?(e.consume(l),p):63===l?(e.consume(l),o=3,r.interrupt?n:R):nn(l)?(e.consume(l),i=String.fromCharCode(l),a=!0,m):t(l)}function u(a){return 45===a?(e.consume(a),o=2,d):91===a?(e.consume(a),o=5,i="CDATA[",l=0,f):nn(a)?(e.consume(a),o=4,r.interrupt?n:R):t(a)}function d(o){return 45===o?(e.consume(o),r.interrupt?n:R):t(o)}function f(o){return o===i.charCodeAt(l++)?(e.consume(o),l===i.length?r.interrupt?n:E:f):t(o)}function p(n){return nn(n)?(e.consume(n),i=String.fromCharCode(n),m):t(n)}function m(l){return null===l||47===l||62===l||cn(l)?47!==l&&a&&Qn.includes(i.toLowerCase())?(o=1,r.interrupt?n(l):E(l)):Zn.includes(i.toLowerCase())?(o=6,47===l?(e.consume(l),g):r.interrupt?n(l):E(l)):(o=7,r.interrupt&&!r.parser.lazy[r.now().line]?t(l):a?b(l):h(l)):45===l||on(l)?(e.consume(l),i+=String.fromCharCode(l),m):t(l)}function g(o){return 62===o?(e.consume(o),r.interrupt?n:E):t(o)}function h(n){return dn(n)?(e.consume(n),h):_(n)}function b(n){return 47===n?(e.consume(n),_):58===n||95===n||nn(n)?(e.consume(n),y):dn(n)?(e.consume(n),b):_(n)}function y(n){return 45===n||46===n||58===n||95===n||on(n)?(e.consume(n),y):v(n)}function v(n){return 61===n?(e.consume(n),w):dn(n)?(e.consume(n),v):b(n)}function w(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),s=n,A):dn(n)?(e.consume(n),w):(s=null,k(n))}function A(n){return null===n||un(n)?t(n):n===s?(e.consume(n),C):(e.consume(n),A)}function k(n){return null===n||34===n||39===n||60===n||61===n||62===n||96===n||cn(n)?v(n):(e.consume(n),k)}function C(e){return 47===e||62===e||dn(e)?b(e):t(e)}function _(n){return 62===n?(e.consume(n),x):t(n)}function x(n){return dn(n)?(e.consume(n),x):null===n||un(n)?E(n):t(n)}function E(n){return 45===n&&2===o?(e.consume(n),O):60===n&&1===o?(e.consume(n),M):62===n&&4===o?(e.consume(n),L):63===n&&3===o?(e.consume(n),R):93===n&&5===o?(e.consume(n),I):!un(n)||6!==o&&7!==o?null===n||un(n)?S(n):(e.consume(n),E):e.check(Yn,L,S)(n)}function S(n){return e.exit("htmlFlowData"),B(n)}function B(n){return null===n?D(n):un(n)?e.attempt({tokenize:N,partial:!0},B,D)(n):(e.enter("htmlFlowData"),E(n))}function N(e,n,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}}function O(n){return 45===n?(e.consume(n),R):E(n)}function M(n){return 47===n?(e.consume(n),i="",T):E(n)}function T(n){return 62===n&&Qn.includes(i.toLowerCase())?(e.consume(n),L):nn(n)&&i.length<8?(e.consume(n),i+=String.fromCharCode(n),T):E(n)}function I(n){return 93===n?(e.consume(n),R):E(n)}function R(n){return 62===n?(e.consume(n),L):45===n&&2===o?(e.consume(n),R):E(n)}function L(n){return null===n||un(n)?(e.exit("htmlFlowData"),D(n)):(e.consume(n),L)}function D(t){return e.exit("htmlFlow"),n(t)}},resolveTo:function(e){let n=e.length;for(;n--&&("enter"!==e[n][0]||"htmlFlow"!==e[n][1].type););return n>1&&"linePrefix"===e[n-2][1].type&&(e[n][1].start=e[n-2][1].start,e[n+1][1].start=e[n-2][1].start,e.splice(n-2,2)),e},concrete:!0},Yn={tokenize:function(e,n,t){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(vn,n,t)}},partial:!0},Jn={name:"codeFenced",tokenize:function(e,n,t){const r=this,o={tokenize:function(e,n,t){let r=0;return gn(e,(function(n){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),o(n)}),"linePrefix",this.parser.constructs.disable.null.includes("codeIndented")?void 0:4);function o(n){return n===s?(e.consume(n),r++,o):r<c?t(n):(e.exit("codeFencedFenceSequence"),gn(e,a,"whitespace")(n))}function a(r){return null===r||un(r)?(e.exit("codeFencedFence"),n(r)):t(r)}},partial:!0},a={tokenize:function(e,n,t){const r=this;return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),o};function o(e){return r.parser.lazy[r.now().line]?t(e):n(e)}},partial:!0},i=this.events[this.events.length-1],l=i&&"linePrefix"===i[1].type?i[2].sliceSerialize(i[1],!0).length:0;let s,c=0;return function(n){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),s=n,u(n)};function u(n){return n===s?(e.consume(n),c++,u):(e.exit("codeFencedFenceSequence"),c<3?t(n):gn(e,d,"whitespace")(n))}function d(n){return null===n||un(n)?g(n):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),f(n))}function f(n){return null===n||cn(n)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),gn(e,p,"whitespace")(n)):96===n&&n===s?t(n):(e.consume(n),f)}function p(n){return null===n||un(n)?g(n):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),m(n))}function m(n){return null===n||un(n)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),g(n)):96===n&&n===s?t(n):(e.consume(n),m)}function g(t){return e.exit("codeFencedFence"),r.interrupt?n(t):h(t)}function h(n){return null===n?y(n):un(n)?e.attempt(a,e.attempt(o,y,l?gn(e,h,"linePrefix",l+1):h),y)(n):(e.enter("codeFlowValue"),b(n))}function b(n){return null===n||un(n)?(e.exit("codeFlowValue"),h(n)):(e.consume(n),b)}function y(t){return e.exit("codeFenced"),n(t)}},concrete:!0},et=document.createElement("i");function nt(e){const n="&"+e+";";et.innerHTML=n;const t=et.textContent;return(59!==t.charCodeAt(t.length-1)||"semi"===e)&&t!==n&&t}const tt={name:"characterReference",tokenize:function(e,n,t){const r=this;let o,a,i=0;return function(n){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(n),e.exit("characterReferenceMarker"),l};function l(n){return 35===n?(e.enter("characterReferenceMarkerNumeric"),e.consume(n),e.exit("characterReferenceMarkerNumeric"),s):(e.enter("characterReferenceValue"),o=31,a=on,c(n))}function s(n){return 88===n||120===n?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(n),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),o=6,a=rn,c):(e.enter("characterReferenceValue"),o=7,a=tn,c(n))}function c(l){let s;return 59===l&&i?(s=e.exit("characterReferenceValue"),a!==on||nt(r.sliceSerialize(s))?(e.enter("characterReferenceMarker"),e.consume(l),e.exit("characterReferenceMarker"),e.exit("characterReference"),n):t(l)):a(l)&&i++<o?(e.consume(l),c):t(l)}}},rt={name:"characterEscape",tokenize:function(e,n,t){return function(n){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(n),e.exit("escapeMarker"),r};function r(r){return an(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),n):t(r)}}},ot={name:"lineEnding",tokenize:function(e,n){return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),gn(e,n,"linePrefix")}}},at={name:"labelEnd",tokenize:function(e,n,t){const r=this;let o,a,i=r.events.length;for(;i--;)if(("labelImage"===r.events[i][1].type||"labelLink"===r.events[i][1].type)&&!r.events[i][1]._balanced){o=r.events[i][1];break}return function(n){return o?o._inactive?s(n):(a=r.parser.defined.includes($n(r.sliceSerialize({start:o.end,end:r.now()}))),e.enter("labelEnd"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelEnd"),l):t(n)};function l(t){return 40===t?e.attempt(it,n,a?n:s)(t):91===t?e.attempt(lt,n,a?e.attempt(st,n,s):s)(t):a?n(t):s(t)}function s(e){return o._balanced=!0,t(e)}},resolveTo:function(e,n){let t,r,o,a,i=e.length,l=0;for(;i--;)if(t=e[i][1],r){if("link"===t.type||"labelLink"===t.type&&t._inactive)break;"enter"===e[i][0]&&"labelLink"===t.type&&(t._inactive=!0)}else if(o){if("enter"===e[i][0]&&("labelImage"===t.type||"labelLink"===t.type)&&!t._balanced&&(r=i,"labelLink"!==t.type)){l=2;break}}else"labelEnd"===t.type&&(o=i);const s={type:"labelLink"===e[r][1].type?"link":"image",start:Object.assign({},e[r][1].start),end:Object.assign({},e[e.length-1][1].end)},c={type:"label",start:Object.assign({},e[r][1].start),end:Object.assign({},e[o][1].end)},u={type:"labelText",start:Object.assign({},e[r+l+2][1].end),end:Object.assign({},e[o-2][1].start)};return a=[["enter",s,n],["enter",c,n]],a=Xe(a,e.slice(r+1,r+l+3)),a=Xe(a,[["enter",u,n]]),a=Xe(a,Mn(n.parser.constructs.insideSpan.null,e.slice(r+l+4,o-3),n)),a=Xe(a,[["exit",u,n],e[o-2],e[o-1],["exit",c,n]]),a=Xe(a,e.slice(o+1)),a=Xe(a,[["exit",s,n]]),Qe(e,r,e.length,a),e},resolveAll:function(e){let n,t=-1;for(;++t<e.length;)n=e[t][1],"labelImage"!==n.type&&"labelLink"!==n.type&&"labelEnd"!==n.type||(e.splice(t+1,"labelImage"===n.type?4:2),n.type="data",t++);return e}},it={tokenize:function(e,n,t){return function(n){return e.enter("resource"),e.enter("resourceMarker"),e.consume(n),e.exit("resourceMarker"),Un(e,r)};function r(n){return 41===n?i(n):zn(e,o,t,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",32)(n)}function o(n){return cn(n)?Un(e,a)(n):i(n)}function a(n){return 34===n||39===n||40===n?jn(e,Un(e,i),t,"resourceTitle","resourceTitleMarker","resourceTitleString")(n):i(n)}function i(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),n):t(r)}}},lt={tokenize:function(e,n,t){const r=this;return function(n){return Fn.call(r,e,o,t,"reference","referenceMarker","referenceString")(n)};function o(e){return r.parser.defined.includes($n(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))?n(e):t(e)}}},st={tokenize:function(e,n,t){return function(n){return e.enter("reference"),e.enter("referenceMarker"),e.consume(n),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),n):t(r)}}},ct={name:"labelStartImage",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(n),e.exit("labelImageMarker"),o};function o(n){return 91===n?(e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelImage"),a):t(n)}function a(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:at.resolveAll};function ut(e){return null===e||cn(e)||fn(e)?1:pn(e)?2:void 0}const dt={name:"attention",tokenize:function(e,n){const t=this.parser.constructs.attentionMarkers.null,r=this.previous,o=ut(r);let a;return function(n){return e.enter("attentionSequence"),a=n,i(n)};function i(l){if(l===a)return e.consume(l),i;const s=e.exit("attentionSequence"),c=ut(l),u=!c||2===c&&o||t.includes(l),d=!o||2===o&&c||t.includes(r);return s._open=Boolean(42===a?u:u&&(o||!d)),s._close=Boolean(42===a?d:d&&(c||!u)),n(l)}},resolveAll:function(e,n){let t,r,o,a,i,l,s,c,u=-1;for(;++u<e.length;)if("enter"===e[u][0]&&"attentionSequence"===e[u][1].type&&e[u][1]._close)for(t=u;t--;)if("exit"===e[t][0]&&"attentionSequence"===e[t][1].type&&e[t][1]._open&&n.sliceSerialize(e[t][1]).charCodeAt(0)===n.sliceSerialize(e[u][1]).charCodeAt(0)){if((e[t][1]._close||e[u][1]._open)&&(e[u][1].end.offset-e[u][1].start.offset)%3&&!((e[t][1].end.offset-e[t][1].start.offset+e[u][1].end.offset-e[u][1].start.offset)%3))continue;l=e[t][1].end.offset-e[t][1].start.offset>1&&e[u][1].end.offset-e[u][1].start.offset>1?2:1;const d=Object.assign({},e[t][1].end),f=Object.assign({},e[u][1].start);ft(d,-l),ft(f,l),a={type:l>1?"strongSequence":"emphasisSequence",start:d,end:Object.assign({},e[t][1].end)},i={type:l>1?"strongSequence":"emphasisSequence",start:Object.assign({},e[u][1].start),end:f},o={type:l>1?"strongText":"emphasisText",start:Object.assign({},e[t][1].end),end:Object.assign({},e[u][1].start)},r={type:l>1?"strong":"emphasis",start:Object.assign({},a.start),end:Object.assign({},i.end)},e[t][1].end=Object.assign({},a.start),e[u][1].start=Object.assign({},i.end),s=[],e[t][1].end.offset-e[t][1].start.offset&&(s=Xe(s,[["enter",e[t][1],n],["exit",e[t][1],n]])),s=Xe(s,[["enter",r,n],["enter",a,n],["exit",a,n],["enter",o,n]]),s=Xe(s,Mn(n.parser.constructs.insideSpan.null,e.slice(t+1,u),n)),s=Xe(s,[["exit",o,n],["enter",i,n],["exit",i,n],["exit",r,n]]),e[u][1].end.offset-e[u][1].start.offset?(c=2,s=Xe(s,[["enter",e[u][1],n],["exit",e[u][1],n]])):c=0,Qe(e,t-1,u-t+3,s),u=t+s.length-c-2;break}for(u=-1;++u<e.length;)"attentionSequence"===e[u][1].type&&(e[u][1].type="data");return e}};function ft(e,n){e.column+=n,e.offset+=n,e._bufferIndex+=n}const pt={name:"autolink",tokenize:function(e,n,t){let r=1;return function(n){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),o};function o(n){return nn(n)?(e.consume(n),a):ln(n)?s(n):t(n)}function a(e){return 43===e||45===e||46===e||on(e)?i(e):s(e)}function i(n){return 58===n?(e.consume(n),l):(43===n||45===n||46===n||on(n))&&r++<32?(e.consume(n),i):s(n)}function l(n){return 62===n?(e.exit("autolinkProtocol"),f(n)):null===n||32===n||60===n||sn(n)?t(n):(e.consume(n),l)}function s(n){return 64===n?(e.consume(n),r=0,c):ln(n)?(e.consume(n),s):t(n)}function c(e){return on(e)?u(e):t(e)}function u(n){return 46===n?(e.consume(n),r=0,c):62===n?(e.exit("autolinkProtocol").type="autolinkEmail",f(n)):d(n)}function d(n){return(45===n||on(n))&&r++<63?(e.consume(n),45===n?d:u):t(n)}function f(t){return e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.exit("autolink"),n}}},mt={name:"htmlText",tokenize:function(e,n,t){const r=this;let o,a,i,l;return function(n){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(n),s};function s(n){return 33===n?(e.consume(n),c):47===n?(e.consume(n),k):63===n?(e.consume(n),w):nn(n)?(e.consume(n),x):t(n)}function c(n){return 45===n?(e.consume(n),u):91===n?(e.consume(n),a="CDATA[",i=0,g):nn(n)?(e.consume(n),v):t(n)}function u(n){return 45===n?(e.consume(n),d):t(n)}function d(n){return null===n||62===n?t(n):45===n?(e.consume(n),f):p(n)}function f(e){return null===e||62===e?t(e):p(e)}function p(n){return null===n?t(n):45===n?(e.consume(n),m):un(n)?(l=p,I(n)):(e.consume(n),p)}function m(n){return 45===n?(e.consume(n),L):p(n)}function g(n){return n===a.charCodeAt(i++)?(e.consume(n),i===a.length?h:g):t(n)}function h(n){return null===n?t(n):93===n?(e.consume(n),b):un(n)?(l=h,I(n)):(e.consume(n),h)}function b(n){return 93===n?(e.consume(n),y):h(n)}function y(n){return 62===n?L(n):93===n?(e.consume(n),y):h(n)}function v(n){return null===n||62===n?L(n):un(n)?(l=v,I(n)):(e.consume(n),v)}function w(n){return null===n?t(n):63===n?(e.consume(n),A):un(n)?(l=w,I(n)):(e.consume(n),w)}function A(e){return 62===e?L(e):w(e)}function k(n){return nn(n)?(e.consume(n),C):t(n)}function C(n){return 45===n||on(n)?(e.consume(n),C):_(n)}function _(n){return un(n)?(l=_,I(n)):dn(n)?(e.consume(n),_):L(n)}function x(n){return 45===n||on(n)?(e.consume(n),x):47===n||62===n||cn(n)?E(n):t(n)}function E(n){return 47===n?(e.consume(n),L):58===n||95===n||nn(n)?(e.consume(n),S):un(n)?(l=E,I(n)):dn(n)?(e.consume(n),E):L(n)}function S(n){return 45===n||46===n||58===n||95===n||on(n)?(e.consume(n),S):B(n)}function B(n){return 61===n?(e.consume(n),N):un(n)?(l=B,I(n)):dn(n)?(e.consume(n),B):E(n)}function N(n){return null===n||60===n||61===n||62===n||96===n?t(n):34===n||39===n?(e.consume(n),o=n,O):un(n)?(l=N,I(n)):dn(n)?(e.consume(n),N):(e.consume(n),o=void 0,T)}function O(n){return n===o?(e.consume(n),M):null===n?t(n):un(n)?(l=O,I(n)):(e.consume(n),O)}function M(e){return 62===e||47===e||cn(e)?E(e):t(e)}function T(n){return null===n||34===n||39===n||60===n||61===n||96===n?t(n):62===n||cn(n)?E(n):(e.consume(n),T)}function I(n){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),gn(e,R,"linePrefix",r.parser.constructs.disable.null.includes("codeIndented")?void 0:4)}function R(n){return e.enter("htmlTextData"),l(n)}function L(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),n):t(r)}}},gt={name:"labelStartLink",tokenize:function(e,n,t){const r=this;return function(n){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(n),e.exit("labelMarker"),e.exit("labelLink"),o};function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?t(e):n(e)}},resolveAll:at.resolveAll},ht={name:"hardBreakEscape",tokenize:function(e,n,t){return function(n){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(n),r};function r(r){return un(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),n(r)):t(r)}}},bt={name:"codeText",tokenize:function(e,n,t){let r,o,a=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),i(n)};function i(n){return 96===n?(e.consume(n),a++,i):(e.exit("codeTextSequence"),l(n))}function l(n){return null===n?t(n):96===n?(o=e.enter("codeTextSequence"),r=0,c(n)):32===n?(e.enter("space"),e.consume(n),e.exit("space"),l):un(n)?(e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),l):(e.enter("codeTextData"),s(n))}function s(n){return null===n||32===n||96===n||un(n)?(e.exit("codeTextData"),l(n)):(e.consume(n),s)}function c(t){return 96===t?(e.consume(t),r++,c):r===a?(e.exit("codeTextSequence"),e.exit("codeText"),n(t)):(o.type="codeTextData",s(t))}},resolve:function(e){let n,t,r=e.length-4,o=3;if(!("lineEnding"!==e[o][1].type&&"space"!==e[o][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(n=o;++n<r;)if("codeTextData"===e[n][1].type){e[o][1].type="codeTextPadding",e[r][1].type="codeTextPadding",o+=2,r-=2;break}for(n=o-1,r++;++n<=r;)void 0===t?n!==r&&"lineEnding"!==e[n][1].type&&(t=n):n!==r&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),r-=n-t-2,n=t+2),t=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}},yt={42:Rn,43:Rn,45:Rn,48:Rn,49:Rn,50:Rn,51:Rn,52:Rn,53:Rn,54:Rn,55:Rn,56:Rn,57:Rn,62:Pn},vt={91:qn},wt={[-2]:Gn,[-1]:Gn,32:Gn},At={35:Kn,42:In,45:[Vn,In],60:Xn,61:Vn,95:In,96:Jn,126:Jn},kt={38:tt,92:rt},Ct={[-5]:ot,[-4]:ot,[-3]:ot,33:ct,38:tt,42:dt,60:[pt,mt],91:gt,92:[ht,rt],93:at,95:dt,96:bt},_t={null:[dt,xn]},xt={null:[42,95]},Et={null:[]};const St=/[\0\t\n\r]/g;function Bt(e,n){const t=Number.parseInt(e,n);return t<9||11===t||t>13&&t<32||t>126&&t<160||t>55295&&t<57344||t>64975&&t<65008||65535==(65535&t)||65534==(65535&t)||t>1114111?"�":String.fromCharCode(t)}const Nt=/\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;function Ot(e,n,t){if(n)return n;if(35===t.charCodeAt(0)){const e=t.charCodeAt(1),n=120===e||88===e;return Bt(t.slice(n?2:1),n?16:10)}return nt(t)||e}const Mt={}.hasOwnProperty,Tt=function(n,t,r){return"string"!=typeof t&&(r=t,t=void 0),function(e={}){const n=It({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:l(A),autolinkProtocol:p,autolinkEmail:p,atxHeading:l(y),blockQuote:l((function(){return{type:"blockquote",children:[]}})),characterEscape:p,characterReference:p,codeFenced:l(b),codeFencedFenceInfo:s,codeFencedFenceMeta:s,codeIndented:l(b,s),codeText:l((function(){return{type:"inlineCode",value:""}}),s),codeTextData:p,data:p,codeFlowValue:p,definition:l((function(){return{type:"definition",identifier:"",label:null,title:null,url:""}})),definitionDestinationString:s,definitionLabelString:s,definitionTitleString:s,emphasis:l((function(){return{type:"emphasis",children:[]}})),hardBreakEscape:l(v),hardBreakTrailing:l(v),htmlFlow:l(w,s),htmlFlowData:p,htmlText:l(w,s),htmlTextData:p,image:l((function(){return{type:"image",title:null,url:"",alt:null}})),label:s,link:l(A),listItem:l((function(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}})),listItemValue:function(e){a("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=Number.parseInt(this.sliceSerialize(e),10),o("expectingFirstListItemValue"))},listOrdered:l(k,(function(){o("expectingFirstListItemValue",!0)})),listUnordered:l(k),paragraph:l((function(){return{type:"paragraph",children:[]}})),reference:function(){o("referenceType","collapsed")},referenceString:s,resourceDestinationString:s,resourceTitleString:s,setextHeading:l(y),strong:l((function(){return{type:"strong",children:[]}})),thematicBreak:l((function(){return{type:"thematicBreak"}}))},exit:{atxHeading:u(),atxHeadingSequence:function(e){const n=this.stack[this.stack.length-1];if(!n.depth){const t=this.sliceSerialize(e).length;n.depth=t}},autolink:u(),autolinkEmail:function(e){m.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)},autolinkProtocol:function(e){m.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)},blockQuote:u(),characterEscapeValue:m,characterReferenceMarkerHexadecimal:h,characterReferenceMarkerNumeric:h,characterReferenceValue:function(e){const n=this.sliceSerialize(e),t=a("characterReferenceType");let r;t?(r=Bt(n,"characterReferenceMarkerNumeric"===t?10:16),o("characterReferenceType")):r=nt(n);const l=this.stack.pop();l.value+=r,l.position.end=i(e.end)},codeFenced:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),o("flowCodeInside")})),codeFencedFence:function(){a("flowCodeInside")||(this.buffer(),o("flowCodeInside",!0))},codeFencedFenceInfo:function(){const e=this.resume();this.stack[this.stack.length-1].lang=e},codeFencedFenceMeta:function(){const e=this.resume();this.stack[this.stack.length-1].meta=e},codeFlowValue:m,codeIndented:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e.replace(/(\r?\n|\r)$/g,"")})),codeText:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),codeTextData:m,data:m,definition:u(),definitionDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},definitionLabelString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=$n(this.sliceSerialize(e)).toLowerCase()},definitionTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},emphasis:u(),hardBreakEscape:u(g),hardBreakTrailing:u(g),htmlFlow:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlFlowData:m,htmlText:u((function(){const e=this.resume();this.stack[this.stack.length-1].value=e})),htmlTextData:m,image:u((function(){const e=this.stack[this.stack.length-1];a("inReference")?(e.type+="Reference",e.referenceType=a("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),label:function(){const e=this.stack[this.stack.length-1],n=this.resume(),t=this.stack[this.stack.length-1];o("inReference",!0),"link"===t.type?t.children=e.children:t.alt=n},labelText:function(e){const n=this.stack[this.stack.length-2],t=this.sliceSerialize(e);n.label=function(e){return e.replace(Nt,Ot)}(t),n.identifier=$n(t).toLowerCase()},lineEnding:function(e){const t=this.stack[this.stack.length-1];if(a("atHardBreak"))return t.children[t.children.length-1].position.end=i(e.end),void o("atHardBreak");!a("setextHeadingSlurpLineEnding")&&n.canContainEols.includes(t.type)&&(p.call(this,e),m.call(this,e))},link:u((function(){const e=this.stack[this.stack.length-1];a("inReference")?(e.type+="Reference",e.referenceType=a("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label),o("referenceType")})),listItem:u(),listOrdered:u(),listUnordered:u(),paragraph:u(),referenceString:function(e){const n=this.resume(),t=this.stack[this.stack.length-1];t.label=n,t.identifier=$n(this.sliceSerialize(e)).toLowerCase(),o("referenceType","full")},resourceDestinationString:function(){const e=this.resume();this.stack[this.stack.length-1].url=e},resourceTitleString:function(){const e=this.resume();this.stack[this.stack.length-1].title=e},resource:function(){o("inReference")},setextHeading:u((function(){o("setextHeadingSlurpLineEnding")})),setextHeadingLineSequence:function(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2},setextHeadingText:function(){o("setextHeadingSlurpLineEnding",!0)},strong:u(),thematicBreak:u()}},e.mdastExtensions||[]),t={};return function(e){let t={type:"root",children:[]};const l=[],u=[],p={stack:[t],tokenStack:l,config:n,enter:c,exit:d,buffer:s,resume:f,setData:o,getData:a};let m=-1;for(;++m<e.length;)"listOrdered"!==e[m][1].type&&"listUnordered"!==e[m][1].type||("enter"===e[m][0]?u.push(m):m=r(e,u.pop(),m));for(m=-1;++m<e.length;){const t=n[e[m][0]];Mt.call(t,e[m][1].type)&&t[e[m][1].type].call(Object.assign({sliceSerialize:e[m][2].sliceSerialize},p),e[m][1])}if(l.length>0){const e=l[l.length-1];(e[1]||Lt).call(p,void 0,e[0])}for(t.position={start:i(e.length>0?e[0][1].start:{line:1,column:1,offset:0}),end:i(e.length>0?e[e.length-2][1].end:{line:1,column:1,offset:0})},m=-1;++m<n.transforms.length;)t=n.transforms[m](t)||t;return t};function r(e,n,t){let r,o,a,i,l=n-1,s=-1,c=!1;for(;++l<=t;){const n=e[l];if("listUnordered"===n[1].type||"listOrdered"===n[1].type||"blockQuote"===n[1].type?("enter"===n[0]?s++:s--,i=void 0):"lineEndingBlank"===n[1].type?"enter"===n[0]&&(!r||i||s||a||(a=l),i=void 0):"linePrefix"===n[1].type||"listItemValue"===n[1].type||"listItemMarker"===n[1].type||"listItemPrefix"===n[1].type||"listItemPrefixWhitespace"===n[1].type||(i=void 0),!s&&"enter"===n[0]&&"listItemPrefix"===n[1].type||-1===s&&"exit"===n[0]&&("listUnordered"===n[1].type||"listOrdered"===n[1].type)){if(r){let i=l;for(o=void 0;i--;){const n=e[i];if("lineEnding"===n[1].type||"lineEndingBlank"===n[1].type){if("exit"===n[0])continue;o&&(e[o][1].type="lineEndingBlank",c=!0),n[1].type="lineEnding",o=i}else if("linePrefix"!==n[1].type&&"blockQuotePrefix"!==n[1].type&&"blockQuotePrefixWhitespace"!==n[1].type&&"blockQuoteMarker"!==n[1].type&&"listItemIndent"!==n[1].type)break}a&&(!o||a<o)&&(r._spread=!0),r.end=Object.assign({},o?e[o][1].start:n[1].end),e.splice(o||l,0,["exit",r,n[2]]),l++,t++}"listItemPrefix"===n[1].type&&(r={type:"listItem",_spread:!1,start:Object.assign({},n[1].start)},e.splice(l,0,["enter",r,n[2]]),l++,t++,a=void 0,i=!0)}}return e[n][1]._spread=c,t}function o(e,n){t[e]=n}function a(e){return t[e]}function i(e){return{line:e.line,column:e.column,offset:e.offset}}function l(e,n){return function(t){c.call(this,e(t),t),n&&n.call(this,t)}}function s(){this.stack.push({type:"fragment",children:[]})}function c(e,n,t){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push([n,t]),e.position={start:i(n.start)},e}function u(e){return function(n){e&&e.call(this,n),d.call(this,n)}}function d(e,n){const t=this.stack.pop(),r=this.tokenStack.pop();if(!r)throw new Error("Cannot close `"+e.type+"` ("+ye({start:e.start,end:e.end})+"): it’s not open");return r[0].type!==e.type&&(n?n.call(this,e,r[0]):(r[1]||Lt).call(this,e,r[0])),t.position.end=i(e.end),t}function f(){return function(e,n){var{includeImageAlt:t=!0}={};return Ve(e,t)}(this.stack.pop())}function p(e){const n=this.stack[this.stack.length-1];let t=n.children[n.children.length-1];t&&"text"===t.type||(t={type:"text",value:""},t.position={start:i(e.start)},n.children.push(t)),this.stack.push(t)}function m(e){const n=this.stack.pop();n.value+=this.sliceSerialize(e),n.position.end=i(e.end)}function g(){o("atHardBreak",!0)}function h(e){o("characterReferenceType",e.type)}function b(){return{type:"code",lang:null,meta:null,value:""}}function y(){return{type:"heading",depth:void 0,children:[]}}function v(){return{type:"break"}}function w(){return{type:"html",value:""}}function A(){return{type:"link",title:null,url:"",children:[]}}function k(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}}(r)(function(e){for(;!wn(e););return e}(function(n={}){const t=function(e){const n={};let t=-1;for(;++t<e.length;)Je(n,e[t]);return n}([e].concat(n.extensions||[])),r={defined:[],lazy:{},constructs:t,content:o(hn),document:o(bn),flow:o(_n),string:o(En),text:o(Sn)};return r;function o(e){return function(n){return Tn(r,e,n)}}}(r).document().write(function(){let e,n=1,t="",r=!0;return function(o,a,i){const l=[];let s,c,u,d,f;for(o=t+o.toString(a),u=0,t="",r&&(65279===o.charCodeAt(0)&&u++,r=void 0);u<o.length;){if(St.lastIndex=u,s=St.exec(o),d=s&&void 0!==s.index?s.index:o.length,f=o.charCodeAt(d),!s){t=o.slice(u);break}if(10===f&&u===d&&e)l.push(-3),e=void 0;else switch(e&&(l.push(-5),e=void 0),u<d&&(l.push(o.slice(u,d)),n+=d-u),f){case 0:l.push(65533),n++;break;case 9:for(c=4*Math.ceil(n/4),l.push(-2);n++<c;)l.push(-1);break;case 10:l.push(-4),n=1;break;default:e=!0,n=1}u=d+1}return i&&(e&&l.push(-5),t&&l.push(t),l.push(null)),l}}()(n,t,!0))))};function It(e,n){let t=-1;for(;++t<n.length;){const r=n[t];Array.isArray(r)?It(e,r):Rt(e,r)}return e}function Rt(e,n){let t;for(t in n)if(Mt.call(n,t)){const r="canContainEols"===t||"transforms"===t,o=(Mt.call(e,t)?e[t]:void 0)||(e[t]=r?[]:{}),a=n[t];a&&(r?e[t]=[...o,...a]:Object.assign(o,a))}}function Lt(e,n){throw e?new Error("Cannot close `"+e.type+"` ("+ye({start:e.start,end:e.end})+"): a different token (`"+n.type+"`, "+ye({start:n.start,end:n.end})+") is open"):new Error("Cannot close document, a token (`"+n.type+"`, "+ye({start:n.start,end:n.end})+") is still open")}const Dt=function(e){Object.assign(this,{Parser:n=>{const t=this.data("settings");return Tt(n,Object.assign({},t,e,{extensions:this.data("micromarkExtensions")||[],mdastExtensions:this.data("fromMarkdownExtensions")||[]}))}})};var Pt=function(e,n,t){var r={type:String(e)};return null!=t||"string"!=typeof n&&!Array.isArray(n)?Object.assign(r,n):t=n,Array.isArray(t)?r.children=t:null!=t&&(r.value=String(t)),r};const zt=function(e){if(null==e)return jt;if("string"==typeof e)return n=e,Ft((function(e){return e&&e.type===n}));var n;if("object"==typeof e)return Array.isArray(e)?function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=zt(e[t]);return Ft((function(...e){let t=-1;for(;++t<n.length;)if(n[t].call(this,...e))return!0;return!1}))}(e):function(e){return Ft((function(n){let t;for(t in e)if(n[t]!==e[t])return!1;return!0}))}(e);if("function"==typeof e)return Ft(e);throw new Error("Expected function, string, or object as test")};function Ft(e){return function(...n){return Boolean(e.call(this,...n))}}function jt(){return!0}const Ut=function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null),function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null);const o=zt(n),a=r?-1:1;!function e(i,l,s){const c="object"==typeof i&&null!==i?i:{};let u;return"string"==typeof c.type&&(u="string"==typeof c.tagName?c.tagName:"string"==typeof c.name?c.name:void 0,Object.defineProperty(d,"name",{value:"node ("+c.type+(u?"<"+u+">":"")+")"})),d;function d(){let c,u,d,f=[];if((!n||o(i,l,s[s.length-1]||null))&&(f=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(t(i,s)),!1===f[0]))return f;if(i.children&&"skip"!==f[0])for(u=(r?i.children.length:-1)+a,d=s.concat(i);u>-1&&u<i.children.length;){if(c=e(i.children[u],u,d)(),!1===c[0])return c;u="number"==typeof c[1]?c[1]:u+a}return f}}(e,null,[])()}(e,n,(function(e,n){const r=n[n.length-1];return t(e,r?r.children.indexOf(e):null,r)}),r)};var $t=Ht("start"),qt=Ht("end");function Ht(e){return function(n){var t=n&&n.position&&n.position[e]||{};return{line:t.line||null,column:t.column||null,offset:t.offset>-1?t.offset:null}}}const Gt={}.hasOwnProperty;function Wt(e){const n=Object.create(null);if(!e||!e.type)throw new Error("mdast-util-definitions expected node");var t,r,o;return r=function(e){const t=Kt(e.identifier);t&&!Gt.call(n,t)&&(n[t]=e)},"function"==typeof(t="definition")&&"function"!=typeof r&&(o=r,r=t,t=null),function(e,n,t,r){"function"==typeof n&&"function"!=typeof t&&(r=t,t=n,n=null);var o=zt(n),a=r?-1:1;!function e(i,l,s){var c,u="object"==typeof i&&null!==i?i:{};return"string"==typeof u.type&&(c="string"==typeof u.tagName?u.tagName:"string"==typeof u.name?u.name:void 0,Object.defineProperty(d,"name",{value:"node ("+u.type+(c?"<"+c+">":"")+")"})),d;function d(){var c,u,d,f=[];if((!n||o(i,l,s[s.length-1]||null))&&(f=function(e){return Array.isArray(e)?e:"number"==typeof e?[!0,e]:[e]}(t(i,s)),!1===f[0]))return f;if(i.children&&"skip"!==f[0])for(u=(r?i.children.length:-1)+a,d=s.concat(i);u>-1&&u<i.children.length;){if(!1===(c=e(i.children[u],u,d)())[0])return c;u="number"==typeof c[1]?c[1]:u+a}return f}}(e,null,[])()}(e,t,(function(e,n){var t=n[n.length-1];return r(e,t?t.children.indexOf(e):null,t)}),o),function(e){const t=Kt(e);return t&&Gt.call(n,t)?n[t]:null}}function Kt(e){return String(e||"").toUpperCase()}const Vt={}.hasOwnProperty;function Zt(e,n){const t=n.data||{};return"value"in n&&!(Vt.call(t,"hName")||Vt.call(t,"hProperties")||Vt.call(t,"hChildren"))?e.augment(n,Pt("text",n.value)):e(n,"div",Yt(e,n))}function Qt(e,n,t){const r=n&&n.type;let o;if(!r)throw new Error("Expected node, got `"+n+"`");return o=Vt.call(e.handlers,r)?e.handlers[r]:e.passThrough&&e.passThrough.includes(r)?Xt:e.unknownHandler,("function"==typeof o?o:Zt)(e,n,t)}function Xt(e,n){return"children"in n?{...n,children:Yt(e,n)}:n}function Yt(e,n){const t=[];if("children"in n){const r=n.children;let o=-1;for(;++o<r.length;){const a=Qt(e,r[o],n);if(a){if(o&&"break"===r[o-1].type&&(Array.isArray(a)||"text"!==a.type||(a.value=a.value.replace(/^\s+/,"")),!Array.isArray(a)&&"element"===a.type)){const e=a.children[0];e&&"text"===e.type&&(e.value=e.value.replace(/^\s+/,""))}Array.isArray(a)?t.push(...a):t.push(a)}}}return t}function Jt(e,n){return e(n,"hr")}function er(e,n){const t=[];let r=-1;for(n&&t.push(Pt("text","\n"));++r<e.length;)r&&t.push(Pt("text","\n")),t.push(e[r]);return n&&e.length>0&&t.push(Pt("text","\n")),t}function nr(e,n){const t={},r=n.ordered?"ol":"ul",o=Yt(e,n);let a=-1;for("number"==typeof n.start&&1!==n.start&&(t.start=n.start);++a<o.length;){const e=o[a];if("element"===e.type&&"li"===e.tagName&&e.properties&&Array.isArray(e.properties.className)&&e.properties.className.includes("task-list-item")){t.className=["contains-task-list"];break}}return e(n,r,t,er(o,!0))}function tr(e,n){const t=e.footnoteOrder,r=String(n.identifier),o=t.indexOf(r),a=String(-1===o?t.push(r):o+1);return e(n,"a",{href:"#fn"+a,className:["footnote-ref"],id:"fnref"+a,role:"doc-noteref"},[e(n.position,"sup",[Pt("text",a)])])}var rr=t(729);function or(e,n){const t=n.referenceType;let r="]";if("collapsed"===t?r+="[]":"full"===t&&(r+="["+(n.label||n.identifier)+"]"),"imageReference"===n.type)return Pt("text","!["+n.alt+r);const o=Yt(e,n),a=o[0];a&&"text"===a.type?a.value="["+a.value:o.unshift(Pt("text","["));const i=o[o.length-1];return i&&"text"===i.type?i.value+=r:o.push(Pt("text",r)),o}function ar(e){const n=e.spread;return null==n?e.children.length>1:n}const ir={blockquote:function(e,n){return e(n,"blockquote",er(Yt(e,n),!0))},break:function(e,n){return[e(n,"br"),Pt("text","\n")]},code:function(e,n){const t=n.value?n.value+"\n":"",r=n.lang&&n.lang.match(/^[^ \t]+(?=[ \t]|$)/),o={};r&&(o.className=["language-"+r]);const a=e(n,"code",o,[Pt("text",t)]);return n.meta&&(a.data={meta:n.meta}),e(n.position,"pre",[a])},delete:function(e,n){return e(n,"del",Yt(e,n))},emphasis:function(e,n){return e(n,"em",Yt(e,n))},footnoteReference:tr,footnote:function(e,n){const t=e.footnoteById,r=e.footnoteOrder;let o=1;for(;o in t;)o++;const a=String(o);return r.push(a),t[a]={type:"footnoteDefinition",identifier:a,children:[{type:"paragraph",children:n.children}],position:n.position},tr(e,{type:"footnoteReference",identifier:a,position:n.position})},heading:function(e,n){return e(n,"h"+n.depth,Yt(e,n))},html:function(e,n){return e.dangerous?e.augment(n,Pt("raw",n.value)):null},imageReference:function(e,n){const t=e.definition(n.identifier);if(!t)return or(e,n);const r={src:rr(t.url||""),alt:n.alt};return null!==t.title&&void 0!==t.title&&(r.title=t.title),e(n,"img",r)},image:function(e,n){const t={src:rr(n.url),alt:n.alt};return null!==n.title&&void 0!==n.title&&(t.title=n.title),e(n,"img",t)},inlineCode:function(e,n){return e(n,"code",[Pt("text",n.value.replace(/\r?\n|\r/g," "))])},linkReference:function(e,n){const t=e.definition(n.identifier);if(!t)return or(e,n);const r={href:rr(t.url||"")};return null!==t.title&&void 0!==t.title&&(r.title=t.title),e(n,"a",r,Yt(e,n))},link:function(e,n){const t={href:rr(n.url)};return null!==n.title&&void 0!==n.title&&(t.title=n.title),e(n,"a",t,Yt(e,n))},listItem:function(e,n,t){const r=Yt(e,n),o=t?function(e){let n=e.spread;const t=e.children;let r=-1;for(;!n&&++r<t.length;)n=ar(t[r]);return Boolean(n)}(t):ar(n),a={},i=[];if("boolean"==typeof n.checked){let t;r[0]&&"element"===r[0].type&&"p"===r[0].tagName?t=r[0]:(t=e(null,"p",[]),r.unshift(t)),t.children.length>0&&t.children.unshift(Pt("text"," ")),t.children.unshift(e(null,"input",{type:"checkbox",checked:n.checked,disabled:!0})),a.className=["task-list-item"]}let l=-1;for(;++l<r.length;){const e=r[l];(o||0!==l||"element"!==e.type||"p"!==e.tagName)&&i.push(Pt("text","\n")),"element"!==e.type||"p"!==e.tagName||o?i.push(e):i.push(...e.children)}const s=r[r.length-1];return!s||!o&&"tagName"in s&&"p"===s.tagName||i.push(Pt("text","\n")),e(n,"li",a,i)},list:nr,paragraph:function(e,n){return e(n,"p",Yt(e,n))},root:function(e,n){return e.augment(n,Pt("root",er(Yt(e,n))))},strong:function(e,n){return e(n,"strong",Yt(e,n))},table:function(e,n){const t=n.children;let r=-1;const o=n.align||[],a=[];for(;++r<t.length;){const i=t[r].children,l=0===r?"th":"td";let s=n.align?o.length:i.length;const c=[];for(;s--;){const n=i[s];c[s]=e(n,l,{align:o[s]},n?Yt(e,n):[])}a[r]=e(t[r],"tr",er(c,!0))}return e(n,"table",er([e(a[0].position,"thead",er([a[0]],!0))].concat(a[1]?e({start:$t(a[1]),end:qt(a[a.length-1])},"tbody",er(a.slice(1),!0)):[]),!0))},text:function(e,n){return e.augment(n,Pt("text",String(n.value).replace(/[ \t]*(\r?\n|\r)[ \t]*/g,"$1")))},thematicBreak:Jt,toml:lr,yaml:lr,definition:lr,footnoteDefinition:lr};function lr(){return null}const sr={}.hasOwnProperty;function cr(e,n){const t=function(e,n){const t=n||{},r=t.allowDangerousHtml||!1,o={};return i.dangerous=r,i.definition=Wt(e),i.footnoteById=o,i.footnoteOrder=[],i.augment=a,i.handlers={...ir,...t.handlers},i.unknownHandler=t.unknownHandler,i.passThrough=t.passThrough,Ut(e,"footnoteDefinition",(e=>{const n=String(e.identifier).toUpperCase();sr.call(o,n)||(o[n]=e)})),i;function a(e,n){if(e&&"data"in e&&e.data){const t=e.data;t.hName&&("element"!==n.type&&(n={type:"element",tagName:"",properties:{},children:[]}),n.tagName=t.hName),"element"===n.type&&t.hProperties&&(n.properties={...n.properties,...t.hProperties}),"children"in n&&n.children&&t.hChildren&&(n.children=t.hChildren)}if(e){const r="type"in e?e:{position:e};(t=r)&&t.position&&t.position.start&&t.position.start.line&&t.position.start.column&&t.position.end&&t.position.end.line&&t.position.end.column&&(n.position={start:$t(r),end:qt(r)})}var t;return n}function i(e,n,t,r){return Array.isArray(t)&&(r=t,t={}),a(e,{type:"element",tagName:n,properties:t||{},children:r||[]})}}(e,n),r=Qt(t,e,null),o=function(e){const n=e.footnoteById,t=e.footnoteOrder;let r=-1;const o=[];for(;++r<t.length;){const e=n[t[r].toUpperCase()];if(!e)continue;const a=String(r+1),i=[...e.children],l={type:"link",url:"#fnref"+a,data:{hProperties:{className:["footnote-back"],role:"doc-backlink"}},children:[{type:"text",value:"↩"}]},s=i[i.length-1];s&&"paragraph"===s.type?s.children.push(l):i.push(l),o.push({type:"listItem",data:{hProperties:{id:"fn"+a,role:"doc-endnote"}},children:i,position:e.position})}return 0===o.length?null:e(null,"section",{className:["footnotes"],role:"doc-endnotes"},er([Jt(e),nr(e,{type:"list",ordered:!0,children:o})],!0))}(t);return o&&r.children.push(Pt("text","\n"),o),Array.isArray(r)?{type:"root",children:r}:r}const ur=function(e,n){return e&&"run"in e?function(e,n){return(t,r,o)=>{e.run(cr(t,n),r,(e=>{o(e)}))}}(e,n):function(e){return n=>cr(n,e)}(e)};var dr=t(5697);class fr{constructor(e,n,t){this.property=e,this.normal=n,t&&(this.space=t)}}function pr(e,n){const t={},r={};let o=-1;for(;++o<e.length;)Object.assign(t,e[o].property),Object.assign(r,e[o].normal);return new fr(t,r,n)}function mr(e){return e.toLowerCase()}fr.prototype.property={},fr.prototype.normal={},fr.prototype.space=null;class gr{constructor(e,n){this.property=e,this.attribute=n}}gr.prototype.space=null,gr.prototype.boolean=!1,gr.prototype.booleanish=!1,gr.prototype.overloadedBoolean=!1,gr.prototype.number=!1,gr.prototype.commaSeparated=!1,gr.prototype.spaceSeparated=!1,gr.prototype.commaOrSpaceSeparated=!1,gr.prototype.mustUseProperty=!1,gr.prototype.defined=!1;let hr=0;const br=_r(),yr=_r(),vr=_r(),wr=_r(),Ar=_r(),kr=_r(),Cr=_r();function _r(){return 2**++hr}const xr=Object.keys(n);class Er extends gr{constructor(e,t,r,o){let a=-1;if(super(e,t),Sr(this,"space",o),"number"==typeof r)for(;++a<xr.length;){const e=xr[a];Sr(this,xr[a],(r&n[e])===n[e])}}}function Sr(e,n,t){t&&(e[n]=t)}Er.prototype.defined=!0;const Br={}.hasOwnProperty;function Nr(e){const n={},t={};let r;for(r in e.properties)if(Br.call(e.properties,r)){const o=e.properties[r],a=new Er(r,e.transform(e.attributes||{},r),o,e.space);e.mustUseProperty&&e.mustUseProperty.includes(r)&&(a.mustUseProperty=!0),n[r]=a,t[mr(r)]=r,t[mr(a.attribute)]=r}return new fr(n,t,e.space)}const Or=Nr({space:"xlink",transform:(e,n)=>"xlink:"+n.slice(5).toLowerCase(),properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}}),Mr=Nr({space:"xml",transform:(e,n)=>"xml:"+n.slice(3).toLowerCase(),properties:{xmlLang:null,xmlBase:null,xmlSpace:null}});function Tr(e,n){return n in e?e[n]:n}function Ir(e,n){return Tr(e,n.toLowerCase())}const Rr=Nr({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:Ir,properties:{xmlns:null,xmlnsXLink:null}}),Lr=Nr({transform:(e,n)=>"role"===n?n:"aria-"+n.slice(4).toLowerCase(),properties:{ariaActiveDescendant:null,ariaAtomic:yr,ariaAutoComplete:null,ariaBusy:yr,ariaChecked:yr,ariaColCount:wr,ariaColIndex:wr,ariaColSpan:wr,ariaControls:Ar,ariaCurrent:null,ariaDescribedBy:Ar,ariaDetails:null,ariaDisabled:yr,ariaDropEffect:Ar,ariaErrorMessage:null,ariaExpanded:yr,ariaFlowTo:Ar,ariaGrabbed:yr,ariaHasPopup:null,ariaHidden:yr,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:Ar,ariaLevel:wr,ariaLive:null,ariaModal:yr,ariaMultiLine:yr,ariaMultiSelectable:yr,ariaOrientation:null,ariaOwns:Ar,ariaPlaceholder:null,ariaPosInSet:wr,ariaPressed:yr,ariaReadOnly:yr,ariaRelevant:null,ariaRequired:yr,ariaRoleDescription:Ar,ariaRowCount:wr,ariaRowIndex:wr,ariaRowSpan:wr,ariaSelected:yr,ariaSetSize:wr,ariaSort:null,ariaValueMax:wr,ariaValueMin:wr,ariaValueNow:wr,ariaValueText:null,role:null}}),Dr=Nr({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:Ir,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:kr,acceptCharset:Ar,accessKey:Ar,action:null,allow:null,allowFullScreen:br,allowPaymentRequest:br,allowUserMedia:br,alt:null,as:null,async:br,autoCapitalize:null,autoComplete:Ar,autoFocus:br,autoPlay:br,capture:br,charSet:null,checked:br,cite:null,className:Ar,cols:wr,colSpan:null,content:null,contentEditable:yr,controls:br,controlsList:Ar,coords:wr|kr,crossOrigin:null,data:null,dateTime:null,decoding:null,default:br,defer:br,dir:null,dirName:null,disabled:br,download:vr,draggable:yr,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:br,formTarget:null,headers:Ar,height:wr,hidden:br,high:wr,href:null,hrefLang:null,htmlFor:Ar,httpEquiv:Ar,id:null,imageSizes:null,imageSrcSet:null,inputMode:null,integrity:null,is:null,isMap:br,itemId:null,itemProp:Ar,itemRef:Ar,itemScope:br,itemType:Ar,kind:null,label:null,lang:null,language:null,list:null,loading:null,loop:br,low:wr,manifest:null,max:null,maxLength:wr,media:null,method:null,min:null,minLength:wr,multiple:br,muted:br,name:null,nonce:null,noModule:br,noValidate:br,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextLost:null,onContextMenu:null,onContextRestored:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:br,optimum:wr,pattern:null,ping:Ar,placeholder:null,playsInline:br,poster:null,preload:null,readOnly:br,referrerPolicy:null,rel:Ar,required:br,reversed:br,rows:wr,rowSpan:wr,sandbox:Ar,scope:null,scoped:br,seamless:br,selected:br,shape:null,size:wr,sizes:null,slot:null,span:wr,spellCheck:yr,src:null,srcDoc:null,srcLang:null,srcSet:null,start:wr,step:null,style:null,tabIndex:wr,target:null,title:null,translate:null,type:null,typeMustMatch:br,useMap:null,value:yr,width:wr,wrap:null,align:null,aLink:null,archive:Ar,axis:null,background:null,bgColor:null,border:wr,borderColor:null,bottomMargin:wr,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:br,declare:br,event:null,face:null,frame:null,frameBorder:null,hSpace:wr,leftMargin:wr,link:null,longDesc:null,lowSrc:null,marginHeight:wr,marginWidth:wr,noResize:br,noHref:br,noShade:br,noWrap:br,object:null,profile:null,prompt:null,rev:null,rightMargin:wr,rules:null,scheme:null,scrolling:yr,standby:null,summary:null,text:null,topMargin:wr,valueType:null,version:null,vAlign:null,vLink:null,vSpace:wr,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:br,disableRemotePlayback:br,prefix:null,property:null,results:wr,security:null,unselectable:null}}),Pr=Nr({space:"svg",attributes:{accentHeight:"accent-height",alignmentBaseline:"alignment-baseline",arabicForm:"arabic-form",baselineShift:"baseline-shift",capHeight:"cap-height",className:"class",clipPath:"clip-path",clipRule:"clip-rule",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",crossOrigin:"crossorigin",dataType:"datatype",dominantBaseline:"dominant-baseline",enableBackground:"enable-background",fillOpacity:"fill-opacity",fillRule:"fill-rule",floodColor:"flood-color",floodOpacity:"flood-opacity",fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",hrefLang:"hreflang",horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",horizOriginY:"horiz-origin-y",imageRendering:"image-rendering",letterSpacing:"letter-spacing",lightingColor:"lighting-color",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",navDown:"nav-down",navDownLeft:"nav-down-left",navDownRight:"nav-down-right",navLeft:"nav-left",navNext:"nav-next",navPrev:"nav-prev",navRight:"nav-right",navUp:"nav-up",navUpLeft:"nav-up-left",navUpRight:"nav-up-right",onAbort:"onabort",onActivate:"onactivate",onAfterPrint:"onafterprint",onBeforePrint:"onbeforeprint",onBegin:"onbegin",onCancel:"oncancel",onCanPlay:"oncanplay",onCanPlayThrough:"oncanplaythrough",onChange:"onchange",onClick:"onclick",onClose:"onclose",onCopy:"oncopy",onCueChange:"oncuechange",onCut:"oncut",onDblClick:"ondblclick",onDrag:"ondrag",onDragEnd:"ondragend",onDragEnter:"ondragenter",onDragExit:"ondragexit",onDragLeave:"ondragleave",onDragOver:"ondragover",onDragStart:"ondragstart",onDrop:"ondrop",onDurationChange:"ondurationchange",onEmptied:"onemptied",onEnd:"onend",onEnded:"onended",onError:"onerror",onFocus:"onfocus",onFocusIn:"onfocusin",onFocusOut:"onfocusout",onHashChange:"onhashchange",onInput:"oninput",onInvalid:"oninvalid",onKeyDown:"onkeydown",onKeyPress:"onkeypress",onKeyUp:"onkeyup",onLoad:"onload",onLoadedData:"onloadeddata",onLoadedMetadata:"onloadedmetadata",onLoadStart:"onloadstart",onMessage:"onmessage",onMouseDown:"onmousedown",onMouseEnter:"onmouseenter",onMouseLeave:"onmouseleave",onMouseMove:"onmousemove",onMouseOut:"onmouseout",onMouseOver:"onmouseover",onMouseUp:"onmouseup",onMouseWheel:"onmousewheel",onOffline:"onoffline",onOnline:"ononline",onPageHide:"onpagehide",onPageShow:"onpageshow",onPaste:"onpaste",onPause:"onpause",onPlay:"onplay",onPlaying:"onplaying",onPopState:"onpopstate",onProgress:"onprogress",onRateChange:"onratechange",onRepeat:"onrepeat",onReset:"onreset",onResize:"onresize",onScroll:"onscroll",onSeeked:"onseeked",onSeeking:"onseeking",onSelect:"onselect",onShow:"onshow",onStalled:"onstalled",onStorage:"onstorage",onSubmit:"onsubmit",onSuspend:"onsuspend",onTimeUpdate:"ontimeupdate",onToggle:"ontoggle",onUnload:"onunload",onVolumeChange:"onvolumechange",onWaiting:"onwaiting",onZoom:"onzoom",overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pointerEvents:"pointer-events",referrerPolicy:"referrerpolicy",renderingIntent:"rendering-intent",shapeRendering:"shape-rendering",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",strokeDashArray:"stroke-dasharray",strokeDashOffset:"stroke-dashoffset",strokeLineCap:"stroke-linecap",strokeLineJoin:"stroke-linejoin",strokeMiterLimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",tabIndex:"tabindex",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",typeOf:"typeof",underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",vectorEffect:"vector-effect",vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",wordSpacing:"word-spacing",writingMode:"writing-mode",xHeight:"x-height",playbackOrder:"playbackorder",timelineBegin:"timelinebegin"},transform:Tr,properties:{about:Cr,accentHeight:wr,accumulate:null,additive:null,alignmentBaseline:null,alphabetic:wr,amplitude:wr,arabicForm:null,ascent:wr,attributeName:null,attributeType:null,azimuth:wr,bandwidth:null,baselineShift:null,baseFrequency:null,baseProfile:null,bbox:null,begin:null,bias:wr,by:null,calcMode:null,capHeight:wr,className:Ar,clip:null,clipPath:null,clipPathUnits:null,clipRule:null,color:null,colorInterpolation:null,colorInterpolationFilters:null,colorProfile:null,colorRendering:null,content:null,contentScriptType:null,contentStyleType:null,crossOrigin:null,cursor:null,cx:null,cy:null,d:null,dataType:null,defaultAction:null,descent:wr,diffuseConstant:wr,direction:null,display:null,dur:null,divisor:wr,dominantBaseline:null,download:br,dx:null,dy:null,edgeMode:null,editable:null,elevation:wr,enableBackground:null,end:null,event:null,exponent:wr,externalResourcesRequired:null,fill:null,fillOpacity:wr,fillRule:null,filter:null,filterRes:null,filterUnits:null,floodColor:null,floodOpacity:null,focusable:null,focusHighlight:null,fontFamily:null,fontSize:null,fontSizeAdjust:null,fontStretch:null,fontStyle:null,fontVariant:null,fontWeight:null,format:null,fr:null,from:null,fx:null,fy:null,g1:kr,g2:kr,glyphName:kr,glyphOrientationHorizontal:null,glyphOrientationVertical:null,glyphRef:null,gradientTransform:null,gradientUnits:null,handler:null,hanging:wr,hatchContentUnits:null,hatchUnits:null,height:null,href:null,hrefLang:null,horizAdvX:wr,horizOriginX:wr,horizOriginY:wr,id:null,ideographic:wr,imageRendering:null,initialVisibility:null,in:null,in2:null,intercept:wr,k:wr,k1:wr,k2:wr,k3:wr,k4:wr,kernelMatrix:Cr,kernelUnitLength:null,keyPoints:null,keySplines:null,keyTimes:null,kerning:null,lang:null,lengthAdjust:null,letterSpacing:null,lightingColor:null,limitingConeAngle:wr,local:null,markerEnd:null,markerMid:null,markerStart:null,markerHeight:null,markerUnits:null,markerWidth:null,mask:null,maskContentUnits:null,maskUnits:null,mathematical:null,max:null,media:null,mediaCharacterEncoding:null,mediaContentEncodings:null,mediaSize:wr,mediaTime:null,method:null,min:null,mode:null,name:null,navDown:null,navDownLeft:null,navDownRight:null,navLeft:null,navNext:null,navPrev:null,navRight:null,navUp:null,navUpLeft:null,navUpRight:null,numOctaves:null,observer:null,offset:null,onAbort:null,onActivate:null,onAfterPrint:null,onBeforePrint:null,onBegin:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnd:null,onEnded:null,onError:null,onFocus:null,onFocusIn:null,onFocusOut:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadStart:null,onMessage:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onMouseWheel:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRepeat:null,onReset:null,onResize:null,onScroll:null,onSeeked:null,onSeeking:null,onSelect:null,onShow:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnload:null,onVolumeChange:null,onWaiting:null,onZoom:null,opacity:null,operator:null,order:null,orient:null,orientation:null,origin:null,overflow:null,overlay:null,overlinePosition:wr,overlineThickness:wr,paintOrder:null,panose1:null,path:null,pathLength:wr,patternContentUnits:null,patternTransform:null,patternUnits:null,phase:null,ping:Ar,pitch:null,playbackOrder:null,pointerEvents:null,points:null,pointsAtX:wr,pointsAtY:wr,pointsAtZ:wr,preserveAlpha:null,preserveAspectRatio:null,primitiveUnits:null,propagate:null,property:Cr,r:null,radius:null,referrerPolicy:null,refX:null,refY:null,rel:Cr,rev:Cr,renderingIntent:null,repeatCount:null,repeatDur:null,requiredExtensions:Cr,requiredFeatures:Cr,requiredFonts:Cr,requiredFormats:Cr,resource:null,restart:null,result:null,rotate:null,rx:null,ry:null,scale:null,seed:null,shapeRendering:null,side:null,slope:null,snapshotTime:null,specularConstant:wr,specularExponent:wr,spreadMethod:null,spacing:null,startOffset:null,stdDeviation:null,stemh:null,stemv:null,stitchTiles:null,stopColor:null,stopOpacity:null,strikethroughPosition:wr,strikethroughThickness:wr,string:null,stroke:null,strokeDashArray:Cr,strokeDashOffset:null,strokeLineCap:null,strokeLineJoin:null,strokeMiterLimit:wr,strokeOpacity:wr,strokeWidth:null,style:null,surfaceScale:wr,syncBehavior:null,syncBehaviorDefault:null,syncMaster:null,syncTolerance:null,syncToleranceDefault:null,systemLanguage:Cr,tabIndex:wr,tableValues:null,target:null,targetX:wr,targetY:wr,textAnchor:null,textDecoration:null,textRendering:null,textLength:null,timelineBegin:null,title:null,transformBehavior:null,type:null,typeOf:Cr,to:null,transform:null,u1:null,u2:null,underlinePosition:wr,underlineThickness:wr,unicode:null,unicodeBidi:null,unicodeRange:null,unitsPerEm:wr,values:null,vAlphabetic:wr,vMathematical:wr,vectorEffect:null,vHanging:wr,vIdeographic:wr,version:null,vertAdvY:wr,vertOriginX:wr,vertOriginY:wr,viewBox:null,viewTarget:null,visibility:null,width:null,widths:null,wordSpacing:null,writingMode:null,x:null,x1:null,x2:null,xChannelSelector:null,xHeight:wr,y:null,y1:null,y2:null,yChannelSelector:null,z:null,zoomAndPan:null}}),zr=pr([Mr,Or,Rr,Lr,Dr],"html"),Fr=pr([Mr,Or,Rr,Lr,Pr],"svg");function jr(e){if(e.allowedElements&&e.disallowedElements)throw new TypeError("Only one of `allowedElements` and `disallowedElements` should be defined");if(e.allowedElements||e.disallowedElements||e.allowElement)return n=>{Ut(n,"element",((n,t,r)=>{const o=r;let a;if(e.allowedElements?a=!e.allowedElements.includes(n.tagName):e.disallowedElements&&(a=e.disallowedElements.includes(n.tagName)),!a&&e.allowElement&&"number"==typeof t&&(a=!e.allowElement(n,t,o)),a&&"number"==typeof t)return e.unwrapDisallowed&&n.children?o.children.splice(t,1,...n.children):o.children.splice(t,1),t}))}}const Ur=["http","https","mailto","tel"];var $r=t(9864);const qr=/^data[-\w.:]+$/i,Hr=/-[a-z]/g,Gr=/[A-Z]/g;function Wr(e){return"-"+e.toLowerCase()}function Kr(e){return e.charAt(1).toUpperCase()}const Vr={classId:"classID",dataType:"datatype",itemId:"itemID",strokeDashArray:"strokeDasharray",strokeDashOffset:"strokeDashoffset",strokeLineCap:"strokeLinecap",strokeLineJoin:"strokeLinejoin",strokeMiterLimit:"strokeMiterlimit",typeOf:"typeof",xLinkActuate:"xlinkActuate",xLinkArcRole:"xlinkArcrole",xLinkHref:"xlinkHref",xLinkRole:"xlinkRole",xLinkShow:"xlinkShow",xLinkTitle:"xlinkTitle",xLinkType:"xlinkType",xmlnsXLink:"xmlnsXlink"};var Zr=t(7848);const Qr={}.hasOwnProperty,Xr=new Set(["table","thead","tbody","tfoot","tr"]);function Yr(e,n){const t=[];let r,o=-1;for(;++o<n.children.length;)r=n.children[o],"element"===r.type?t.push(Jr(e,r,o,n)):"text"===r.type?"element"===n.type&&Xr.has(n.tagName)&&(i=void 0,"string"==typeof(i=(a=r)&&"object"==typeof a&&"text"===a.type?a.value||"":a)&&""===i.replace(/[ \t\n\f\r]/g,""))||t.push(r.value):"raw"!==r.type||e.options.skipHtml||t.push(r.value);var a,i;return t}function Jr(e,n,t,r){const o=e.options,a=e.schema,i=n.tagName,l={};let s,c=a;if("html"===a.space&&"svg"===i&&(c=Fr,e.schema=c),n.properties)for(s in n.properties)Qr.call(n.properties,s)&&no(l,s,n.properties[s],e);"ol"!==i&&"ul"!==i||e.listDepth++;const u=Yr(e,n);"ol"!==i&&"ul"!==i||e.listDepth--,e.schema=a;const d=n.position||{start:{line:null,column:null,offset:null},end:{line:null,column:null,offset:null}},f=o.components&&Qr.call(o.components,i)?o.components[i]:i,p="string"==typeof f||f===v.Fragment;if(!$r.isValidElementType(f))throw new TypeError(`Component for name \`${i}\` not defined or is not renderable`);if(l.key=[i,d.start.line,d.start.column,t].join("-"),"a"===i&&o.linkTarget&&(l.target="function"==typeof o.linkTarget?o.linkTarget(String(l.href||""),n.children,"string"==typeof l.title?l.title:null):o.linkTarget),"a"===i&&o.transformLinkUri&&(l.href=o.transformLinkUri(String(l.href||""),n.children,"string"==typeof l.title?l.title:null)),p||"code"!==i||"element"!==r.type||"pre"===r.tagName||(l.inline=!0),p||"h1"!==i&&"h2"!==i&&"h3"!==i&&"h4"!==i&&"h5"!==i&&"h6"!==i||(l.level=Number.parseInt(i.charAt(1),10)),"img"===i&&o.transformImageUri&&(l.src=o.transformImageUri(String(l.src||""),String(l.alt||""),"string"==typeof l.title?l.title:null)),!p&&"li"===i&&"element"===r.type){const e=function(e){let n=-1;for(;++n<e.children.length;){const t=e.children[n];if("element"===t.type&&"input"===t.tagName)return t}return null}(n);l.checked=e&&e.properties?Boolean(e.properties.checked):null,l.index=eo(r,n),l.ordered="ol"===r.tagName}var m;return p||"ol"!==i&&"ul"!==i||(l.ordered="ol"===i,l.depth=e.listDepth),"td"!==i&&"th"!==i||(l.align&&(l.style||(l.style={}),l.style.textAlign=l.align,delete l.align),p||(l.isHeader="th"===i)),p||"tr"!==i||"element"!==r.type||(l.isHeader=Boolean("thead"===r.tagName)),o.sourcePos&&(l["data-sourcepos"]=[(m=d).start.line,":",m.start.column,"-",m.end.line,":",m.end.column].map((e=>String(e))).join("")),!p&&o.rawSourcePos&&(l.sourcePosition=n.position),!p&&o.includeElementIndex&&(l.index=eo(r,n),l.siblingCount=eo(r)),p||(l.node=n),u.length>0?v.createElement(f,l,u):v.createElement(f,l)}function eo(e,n){let t=-1,r=0;for(;++t<e.children.length&&e.children[t]!==n;)"element"===e.children[t].type&&r++;return r}function no(e,n,t,r){const o=function(e,n){const t=mr(n);let r=n,o=gr;if(t in e.normal)return e.property[e.normal[t]];if(t.length>4&&"data"===t.slice(0,4)&&qr.test(n)){if("-"===n.charAt(4)){const e=n.slice(5).replace(Hr,Kr);r="data"+e.charAt(0).toUpperCase()+e.slice(1)}else{const e=n.slice(4);if(!Hr.test(e)){let t=e.replace(Gr,Wr);"-"!==t.charAt(0)&&(t="-"+t),n="data"+t}}o=Er}return new o(r,n)}(r.schema,n);let a=t;var i,l;null!=a&&a==a&&(Array.isArray(a)&&(a=o.commaSeparated?(l={},""===(i=a)[i.length-1]&&(i=i.concat("")),i.join((l.padRight?" ":"")+","+(!1===l.padLeft?"":" ")).trim()):a.join(" ").trim()),"style"===o.property&&"string"==typeof a&&(a=function(e){const n={};try{Zr(e,(function(e,t){const r="-ms-"===e.slice(0,4)?`ms-${e.slice(4)}`:e;n[r.replace(/-([a-z])/g,to)]=t}))}catch{}return n}(a)),o.space&&o.property?e[Qr.call(Vr,o.property)?Vr[o.property]:o.property]=a:o.attribute&&(e[o.attribute]=a))}function to(e,n){return n.toUpperCase()}const ro={}.hasOwnProperty,oo={renderers:{to:"components",id:"change-renderers-to-components"},astPlugins:{id:"remove-buggy-html-in-markdown-parser"},allowDangerousHtml:{id:"remove-buggy-html-in-markdown-parser"},escapeHtml:{id:"remove-buggy-html-in-markdown-parser"},source:{to:"children",id:"change-source-to-children"},allowNode:{to:"allowElement",id:"replace-allownode-allowedtypes-and-disallowedtypes"},allowedTypes:{to:"allowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},disallowedTypes:{to:"disallowedElements",id:"replace-allownode-allowedtypes-and-disallowedtypes"},includeNodeIndex:{to:"includeElementIndex",id:"change-includenodeindex-to-includeelementindex"}};function ao(e){for(const n in oo)if(ro.call(oo,n)&&ro.call(e,n)){const e=oo[n];console.warn(`[react-markdown] Warning: please ${e.to?`use \`${e.to}\` instead of`:"remove"} \`${n}\` (see <https://github.com/remarkjs/react-markdown/blob/main/changelog.md#${e.id}> for more info)`),delete oo[n]}const n=Fe().use(Dt).use(e.remarkPlugins||e.plugins||[]).use(ur,{allowDangerousHtml:!0}).use(e.rehypePlugins||[]).use(jr,e),t=new Te;"string"==typeof e.children?t.value=e.children:void 0!==e.children&&null!==e.children&&console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${e.children}\`)`);const r=n.runSync(n.parse(t),t);if("root"!==r.type)throw new TypeError("Expected a `root` node");let o=v.createElement(v.Fragment,{},Yr({options:e,schema:zr,listDepth:0},r));return e.className&&(o=v.createElement("div",{className:e.className},o)),o}ao.defaultProps={transformLinkUri:function(e){const n=(e||"").trim(),t=n.charAt(0);if("#"===t||"/"===t)return n;const r=n.indexOf(":");if(-1===r)return n;let o=-1;for(;++o<Ur.length;){const e=Ur[o];if(r===e.length&&n.slice(0,e.length).toLowerCase()===e)return n}return o=n.indexOf("?"),-1!==o&&r>o?n:(o=n.indexOf("#"),-1!==o&&r>o?n:"javascript:void(0)")}},ao.propTypes={children:dr.string,className:dr.string,allowElement:dr.func,allowedElements:dr.arrayOf(dr.string),disallowedElements:dr.arrayOf(dr.string),unwrapDisallowed:dr.bool,remarkPlugins:dr.arrayOf(dr.oneOfType([dr.object,dr.func,dr.arrayOf(dr.oneOfType([dr.object,dr.func]))])),rehypePlugins:dr.arrayOf(dr.oneOfType([dr.object,dr.func,dr.arrayOf(dr.oneOfType([dr.object,dr.func]))])),sourcePos:dr.bool,rawSourcePos:dr.bool,skipHtml:dr.bool,includeElementIndex:dr.bool,transformLinkUri:dr.oneOfType([dr.func,dr.bool]),linkTarget:dr.oneOfType([dr.func,dr.string]),transformImageUri:dr.func,components:dr.object};const io=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],lo=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],so=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],co=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],uo=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-height","max-width","min-height","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse();var fo="\\.([0-9](_*[0-9])*)",po="[0-9a-fA-F](_*[0-9a-fA-F])*",mo={className:"number",variants:[{begin:`(\\b([0-9](_*[0-9])*)((${fo})|\\.)?|(${fo}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`},{begin:`\\b([0-9](_*[0-9])*)((${fo})[fFdD]?\\b|\\.([fFdD]\\b)?)`},{begin:`(${fo})[fFdD]?\\b`},{begin:"\\b([0-9](_*[0-9])*)[fFdD]\\b"},{begin:`\\b0[xX]((${po})\\.?|(${po})?\\.(${po}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:`\\b0[xX](${po})[lL]?\\b`},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};function go(e,n,t){return-1===t?"":e.replace(n,(r=>go(e,n,t-1)))}const ho="[A-Za-z$_][0-9A-Za-z$_]*",bo=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],yo=["true","false","null","undefined","NaN","Infinity"],vo=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],wo=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],Ao=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],ko=["arguments","this","super","console","window","document","localStorage","module","global"],Co=[].concat(Ao,vo,wo);var _o="\\.([0-9](_*[0-9])*)",xo="[0-9a-fA-F](_*[0-9a-fA-F])*",Eo={className:"number",variants:[{begin:`(\\b([0-9](_*[0-9])*)((${_o})|\\.)?|(${_o}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`},{begin:`\\b([0-9](_*[0-9])*)((${_o})[fFdD]?\\b|\\.([fFdD]\\b)?)`},{begin:`(${_o})[fFdD]?\\b`},{begin:"\\b([0-9](_*[0-9])*)[fFdD]\\b"},{begin:`\\b0[xX]((${xo})\\.?|(${xo})?\\.(${xo}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\b`},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:`\\b0[xX](${xo})[lL]?\\b`},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};const So=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],Bo=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],No=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],Oo=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],Mo=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-height","max-width","min-height","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse(),To=No.concat(Oo),Io=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],Ro=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],Lo=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],Do=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],Po=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-height","max-width","min-height","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse();function zo(e){return e?"string"==typeof e?e:e.source:null}function Fo(e){return jo("(?=",e,")")}function jo(...e){return e.map((e=>zo(e))).join("")}function Uo(...e){const n=function(e){const n=e[e.length-1];return"object"==typeof n&&n.constructor===Object?(e.splice(e.length-1,1),n):{}}(e);return"("+(n.capture?"":"?:")+e.map((e=>zo(e))).join("|")+")"}const $o=e=>jo(/\b/,e,/\w$/.test(e)?/\b/:/\B/),qo=["Protocol","Type"].map($o),Ho=["init","self"].map($o),Go=["Any","Self"],Wo=["actor","associatedtype","async","await",/as\?/,/as!/,"as","break","case","catch","class","continue","convenience","default","defer","deinit","didSet","do","dynamic","else","enum","extension","fallthrough",/fileprivate\(set\)/,"fileprivate","final","for","func","get","guard","if","import","indirect","infix",/init\?/,/init!/,"inout",/internal\(set\)/,"internal","in","is","isolated","nonisolated","lazy","let","mutating","nonmutating",/open\(set\)/,"open","operator","optional","override","postfix","precedencegroup","prefix",/private\(set\)/,"private","protocol",/public\(set\)/,"public","repeat","required","rethrows","return","set","some","static","struct","subscript","super","switch","throws","throw",/try\?/,/try!/,"try","typealias",/unowned\(safe\)/,/unowned\(unsafe\)/,"unowned","var","weak","where","while","willSet"],Ko=["false","nil","true"],Vo=["assignment","associativity","higherThan","left","lowerThan","none","right"],Zo=["#colorLiteral","#column","#dsohandle","#else","#elseif","#endif","#error","#file","#fileID","#fileLiteral","#filePath","#function","#if","#imageLiteral","#keyPath","#line","#selector","#sourceLocation","#warn_unqualified_access","#warning"],Qo=["abs","all","any","assert","assertionFailure","debugPrint","dump","fatalError","getVaList","isKnownUniquelyReferenced","max","min","numericCast","pointwiseMax","pointwiseMin","precondition","preconditionFailure","print","readLine","repeatElement","sequence","stride","swap","swift_unboxFromSwiftValueWithType","transcode","type","unsafeBitCast","unsafeDowncast","withExtendedLifetime","withUnsafeMutablePointer","withUnsafePointer","withVaList","withoutActuallyEscaping","zip"],Xo=Uo(/[/=\-+!*%<>&|^~?]/,/[\u00A1-\u00A7]/,/[\u00A9\u00AB]/,/[\u00AC\u00AE]/,/[\u00B0\u00B1]/,/[\u00B6\u00BB\u00BF\u00D7\u00F7]/,/[\u2016-\u2017]/,/[\u2020-\u2027]/,/[\u2030-\u203E]/,/[\u2041-\u2053]/,/[\u2055-\u205E]/,/[\u2190-\u23FF]/,/[\u2500-\u2775]/,/[\u2794-\u2BFF]/,/[\u2E00-\u2E7F]/,/[\u3001-\u3003]/,/[\u3008-\u3020]/,/[\u3030]/),Yo=Uo(Xo,/[\u0300-\u036F]/,/[\u1DC0-\u1DFF]/,/[\u20D0-\u20FF]/,/[\uFE00-\uFE0F]/,/[\uFE20-\uFE2F]/),Jo=jo(Xo,Yo,"*"),ea=Uo(/[a-zA-Z_]/,/[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,/[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,/[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,/[\u1E00-\u1FFF]/,/[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,/[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,/[\u2C00-\u2DFF\u2E80-\u2FFF]/,/[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,/[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,/[\uFE47-\uFEFE\uFF00-\uFFFD]/),na=Uo(ea,/\d/,/[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/),ta=jo(ea,na,"*"),ra=jo(/[A-Z]/,na,"*"),oa=["autoclosure",jo(/convention\(/,Uo("swift","block","c"),/\)/),"discardableResult","dynamicCallable","dynamicMemberLookup","escaping","frozen","GKInspectable","IBAction","IBDesignable","IBInspectable","IBOutlet","IBSegueAction","inlinable","main","nonobjc","NSApplicationMain","NSCopying","NSManaged",jo(/objc\(/,ta,/\)/),"objc","objcMembers","propertyWrapper","requires_stored_property_inits","resultBuilder","testable","UIApplicationMain","unknown","usableFromInline"],aa=["iOS","iOSApplicationExtension","macOS","macOSApplicationExtension","macCatalyst","macCatalystApplicationExtension","watchOS","watchOSApplicationExtension","tvOS","tvOSApplicationExtension","swift"],ia="[A-Za-z$_][0-9A-Za-z$_]*",la=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],sa=["true","false","null","undefined","NaN","Infinity"],ca=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],ua=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],da=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],fa=["arguments","this","super","console","window","document","localStorage","module","global"],pa=[].concat(da,ca,ua),ma=t(3390);var ga=t(6291);const ha=Object.assign(ba(Error),{eval:ba(EvalError),range:ba(RangeError),reference:ba(ReferenceError),syntax:ba(SyntaxError),type:ba(TypeError),uri:ba(URIError)});function ba(e){return n.displayName=e.displayName||e.name,n;function n(n,...t){const r=n?ga(n,...t):n;return new e(r)}}const ya={}.hasOwnProperty,va="hljs-";function wa(e,n,t={}){let r=t.prefix;if("string"!=typeof e)throw ha("Expected `string` for name, got `%s`",e);if(!ma.getLanguage(e))throw ha("Unknown language: `%s` is not registered",e);if("string"!=typeof n)throw ha("Expected `string` for value, got `%s`",n);null==r&&(r=va),ma.configure({__emitter:Aa,classPrefix:r});const o=ma.highlight(n,{language:e,ignoreIllegals:!0});if(ma.configure({}),o.errorRaised)throw o.errorRaised;return o._emitter.root.data.language=o.language,o._emitter.root.data.relevance=o.relevance,o._emitter.root}class Aa{constructor(e){this.options=e,this.root={type:"root",data:{language:null,relevance:0},children:[]},this.stack=[this.root]}addText(e){if(""===e)return;const n=this.stack[this.stack.length-1],t=n.children[n.children.length-1];t&&"text"===t.type?t.value+=e:n.children.push({type:"text",value:e})}addKeyword(e,n){this.openNode(n),this.addText(e),this.closeNode()}addSublanguage(e,n){const t=this.stack[this.stack.length-1],r=e.root.children;n?t.children.push({type:"element",tagName:"span",properties:{className:[n]},children:r}):t.children.push(...r)}openNode(e){const n={type:"element",tagName:"span",properties:{className:e.split(".").map((e=>this.options.classPrefix+e))},children:[]};this.stack[this.stack.length-1].children.push(n),this.stack.push(n)}closeNode(){this.stack.pop()}closeAllNodes(){}finalize(){}toHTML(){return""}}const ka={highlight:wa,highlightAuto:function(e,n={}){const t=n.subset||ma.listLanguages();let r=n.prefix,o=-1,a={type:"root",data:{language:null,relevance:0},children:[]};if(null==r&&(r=va),"string"!=typeof e)throw ha("Expected `string` for value, got `%s`",e);for(;++o<t.length;){const r=t[o];if(!ma.getLanguage(r))continue;const i=wa(r,e,n);i.data.relevance>a.data.relevance&&(a=i)}return a},registerLanguage:function(e,n){ma.registerLanguage(e,n)},registered:function(e){return Boolean(ma.getLanguage(e))},listLanguages:function(){return ma.listLanguages()},registerAlias:function(e,n){if("string"==typeof e)ma.registerAliases(n,{languageName:e});else{let n;for(n in e)ya.call(e,n)&&ma.registerAliases(e[n],{languageName:n})}}};ka.registerLanguage("arduino",(function(e){const n={type:["boolean","byte","word","String"],built_in:["KeyboardController","MouseController","SoftwareSerial","EthernetServer","EthernetClient","LiquidCrystal","RobotControl","GSMVoiceCall","EthernetUDP","EsploraTFT","HttpClient","RobotMotor","WiFiClient","GSMScanner","FileSystem","Scheduler","GSMServer","YunClient","YunServer","IPAddress","GSMClient","GSMModem","Keyboard","Ethernet","Console","GSMBand","Esplora","Stepper","Process","WiFiUDP","GSM_SMS","Mailbox","USBHost","Firmata","PImage","Client","Server","GSMPIN","FileIO","Bridge","Serial","EEPROM","Stream","Mouse","Audio","Servo","File","Task","GPRS","WiFi","Wire","TFT","GSM","SPI","SD"],_hints:["setup","loop","runShellCommandAsynchronously","analogWriteResolution","retrieveCallingNumber","printFirmwareVersion","analogReadResolution","sendDigitalPortPair","noListenOnLocalhost","readJoystickButton","setFirmwareVersion","readJoystickSwitch","scrollDisplayRight","getVoiceCallStatus","scrollDisplayLeft","writeMicroseconds","delayMicroseconds","beginTransmission","getSignalStrength","runAsynchronously","getAsynchronously","listenOnLocalhost","getCurrentCarrier","readAccelerometer","messageAvailable","sendDigitalPorts","lineFollowConfig","countryNameWrite","runShellCommand","readStringUntil","rewindDirectory","readTemperature","setClockDivider","readLightSensor","endTransmission","analogReference","detachInterrupt","countryNameRead","attachInterrupt","encryptionType","readBytesUntil","robotNameWrite","readMicrophone","robotNameRead","cityNameWrite","userNameWrite","readJoystickY","readJoystickX","mouseReleased","openNextFile","scanNetworks","noInterrupts","digitalWrite","beginSpeaker","mousePressed","isActionDone","mouseDragged","displayLogos","noAutoscroll","addParameter","remoteNumber","getModifiers","keyboardRead","userNameRead","waitContinue","processInput","parseCommand","printVersion","readNetworks","writeMessage","blinkVersion","cityNameRead","readMessage","setDataMode","parsePacket","isListening","setBitOrder","beginPacket","isDirectory","motorsWrite","drawCompass","digitalRead","clearScreen","serialEvent","rightToLeft","setTextSize","leftToRight","requestFrom","keyReleased","compassRead","analogWrite","interrupts","WiFiServer","disconnect","playMelody","parseFloat","autoscroll","getPINUsed","setPINUsed","setTimeout","sendAnalog","readSlider","analogRead","beginWrite","createChar","motorsStop","keyPressed","tempoWrite","readButton","subnetMask","debugPrint","macAddress","writeGreen","randomSeed","attachGPRS","readString","sendString","remotePort","releaseAll","mouseMoved","background","getXChange","getYChange","answerCall","getResult","voiceCall","endPacket","constrain","getSocket","writeJSON","getButton","available","connected","findUntil","readBytes","exitValue","readGreen","writeBlue","startLoop","IPAddress","isPressed","sendSysex","pauseMode","gatewayIP","setCursor","getOemKey","tuneWrite","noDisplay","loadImage","switchPIN","onRequest","onReceive","changePIN","playFile","noBuffer","parseInt","overflow","checkPIN","knobRead","beginTFT","bitClear","updateIR","bitWrite","position","writeRGB","highByte","writeRed","setSpeed","readBlue","noStroke","remoteIP","transfer","shutdown","hangCall","beginSMS","endWrite","attached","maintain","noCursor","checkReg","checkPUK","shiftOut","isValid","shiftIn","pulseIn","connect","println","localIP","pinMode","getIMEI","display","noBlink","process","getBand","running","beginSD","drawBMP","lowByte","setBand","release","bitRead","prepare","pointTo","readRed","setMode","noFill","remove","listen","stroke","detach","attach","noTone","exists","buffer","height","bitSet","circle","config","cursor","random","IRread","setDNS","endSMS","getKey","micros","millis","begin","print","write","ready","flush","width","isPIN","blink","clear","press","mkdir","rmdir","close","point","yield","image","BSSID","click","delay","read","text","move","peek","beep","rect","line","open","seek","fill","size","turn","stop","home","find","step","tone","sqrt","RSSI","SSID","end","bit","tan","cos","sin","pow","map","abs","max","min","get","run","put"],literal:["DIGITAL_MESSAGE","FIRMATA_STRING","ANALOG_MESSAGE","REPORT_DIGITAL","REPORT_ANALOG","INPUT_PULLUP","SET_PIN_MODE","INTERNAL2V56","SYSTEM_RESET","LED_BUILTIN","INTERNAL1V1","SYSEX_START","INTERNAL","EXTERNAL","DEFAULT","OUTPUT","INPUT","HIGH","LOW"]},t=function(e){const n=e.regex,t=e.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="[a-zA-Z_]\\w*::",o="(?!struct)(decltype\\(auto\\)|"+n.optional(r)+"[a-zA-Z_]\\w*"+n.optional("<[^<>]+>")+")",a={className:"type",begin:"\\b[a-z\\d_]*_t\\b"},i={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},e.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},l={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},s={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(i,{className:"string"}),{className:"string",begin:/<.*?>/},t,e.C_BLOCK_COMMENT_MODE]},c={className:"title",begin:n.optional(r)+e.IDENT_RE,relevance:0},u=n.optional(r)+e.IDENT_RE+"\\s*\\(",d={type:["bool","char","char16_t","char32_t","char8_t","double","float","int","long","short","void","wchar_t","unsigned","signed","const","static"],keyword:["alignas","alignof","and","and_eq","asm","atomic_cancel","atomic_commit","atomic_noexcept","auto","bitand","bitor","break","case","catch","class","co_await","co_return","co_yield","compl","concept","const_cast|10","consteval","constexpr","constinit","continue","decltype","default","delete","do","dynamic_cast|10","else","enum","explicit","export","extern","false","final","for","friend","goto","if","import","inline","module","mutable","namespace","new","noexcept","not","not_eq","nullptr","operator","or","or_eq","override","private","protected","public","reflexpr","register","reinterpret_cast|10","requires","return","sizeof","static_assert","static_cast|10","struct","switch","synchronized","template","this","thread_local","throw","transaction_safe","transaction_safe_dynamic","true","try","typedef","typeid","typename","union","using","virtual","volatile","while","xor","xor_eq"],literal:["NULL","false","nullopt","nullptr","true"],built_in:["_Pragma"],_type_hints:["any","auto_ptr","barrier","binary_semaphore","bitset","complex","condition_variable","condition_variable_any","counting_semaphore","deque","false_type","future","imaginary","initializer_list","istringstream","jthread","latch","lock_guard","multimap","multiset","mutex","optional","ostringstream","packaged_task","pair","promise","priority_queue","queue","recursive_mutex","recursive_timed_mutex","scoped_lock","set","shared_future","shared_lock","shared_mutex","shared_timed_mutex","shared_ptr","stack","string_view","stringstream","timed_mutex","thread","true_type","tuple","unique_lock","unique_ptr","unordered_map","unordered_multimap","unordered_multiset","unordered_set","variant","vector","weak_ptr","wstring","wstring_view"]},f={className:"function.dispatch",relevance:0,keywords:{_hint:["abort","abs","acos","apply","as_const","asin","atan","atan2","calloc","ceil","cerr","cin","clog","cos","cosh","cout","declval","endl","exchange","exit","exp","fabs","floor","fmod","forward","fprintf","fputs","free","frexp","fscanf","future","invoke","isalnum","isalpha","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","labs","launder","ldexp","log","log10","make_pair","make_shared","make_shared_for_overwrite","make_tuple","make_unique","malloc","memchr","memcmp","memcpy","memset","modf","move","pow","printf","putchar","puts","realloc","scanf","sin","sinh","snprintf","sprintf","sqrt","sscanf","std","stderr","stdin","stdout","strcat","strchr","strcmp","strcpy","strcspn","strlen","strncat","strncmp","strncpy","strpbrk","strrchr","strspn","strstr","swap","tan","tanh","terminate","to_underlying","tolower","toupper","vfprintf","visit","vprintf","vsprintf"]},begin:n.concat(/\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!switch)/,/(?!while)/,e.IDENT_RE,n.lookahead(/(<[^<>]+>|)\s*\(/))},p=[f,s,a,t,e.C_BLOCK_COMMENT_MODE,l,i],m={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:d,contains:p.concat([{begin:/\(/,end:/\)/,keywords:d,contains:p.concat(["self"]),relevance:0}]),relevance:0},g={className:"function",begin:"("+o+"[\\*&\\s]+)+"+u,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:d,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:"decltype\\(auto\\)",keywords:d,relevance:0},{begin:u,returnBegin:!0,contains:[c],relevance:0},{begin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[i,l]},{relevance:0,match:/,/},{className:"params",begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:[t,e.C_BLOCK_COMMENT_MODE,i,l,a,{begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:["self",t,e.C_BLOCK_COMMENT_MODE,i,l,a]}]},a,t,e.C_BLOCK_COMMENT_MODE,s]};return{name:"C++",aliases:["cc","c++","h++","hpp","hh","hxx","cxx"],keywords:d,illegal:"</",classNameAliases:{"function.dispatch":"built_in"},contains:[].concat(m,g,f,p,[s,{begin:"\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<",end:">",keywords:d,contains:["self",a]},{begin:e.IDENT_RE+"::",keywords:d},{match:[/\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,/\s+/,/\w+/],className:{1:"keyword",3:"title.class"}}])}}(e),r=t.keywords;return r.type=[...r.type,...n.type],r.literal=[...r.literal,...n.literal],r.built_in=[...r.built_in,...n.built_in],r._hints=n._hints,t.name="Arduino",t.aliases=["ino"],t.supersetOf="cpp",t})),ka.registerLanguage("bash",(function(e){const n=e.regex,t={},r={begin:/\$\{/,end:/\}/,contains:["self",{begin:/:-/,contains:[t]}]};Object.assign(t,{className:"variable",variants:[{begin:n.concat(/\$[\w\d#@][\w\d_]*/,"(?![\\w\\d])(?![$])")},r]});const o={className:"subst",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]},a={begin:/<<-?\s*(?=\w+)/,starts:{contains:[e.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,className:"string"})]}},i={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,t,o]};o.contains.push(i);const l={begin:/\$\(\(/,end:/\)\)/,contains:[{begin:/\d+#[0-9a-f]+/,className:"number"},e.NUMBER_MODE,t]},s=e.SHEBANG({binary:`(${["fish","bash","zsh","sh","csh","ksh","tcsh","dash","scsh"].join("|")})`,relevance:10}),c={className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0};return{name:"Bash",aliases:["sh"],keywords:{$pattern:/\b[a-z._-]+\b/,keyword:["if","then","else","elif","fi","for","while","in","do","done","case","esac","function"],literal:["true","false"],built_in:["break","cd","continue","eval","exec","exit","export","getopts","hash","pwd","readonly","return","shift","test","times","trap","umask","unset","alias","bind","builtin","caller","command","declare","echo","enable","help","let","local","logout","mapfile","printf","read","readarray","source","type","typeset","ulimit","unalias","set","shopt","autoload","bg","bindkey","bye","cap","chdir","clone","comparguments","compcall","compctl","compdescribe","compfiles","compgroups","compquote","comptags","comptry","compvalues","dirs","disable","disown","echotc","echoti","emulate","fc","fg","float","functions","getcap","getln","history","integer","jobs","kill","limit","log","noglob","popd","print","pushd","pushln","rehash","sched","setcap","setopt","stat","suspend","ttyctl","unfunction","unhash","unlimit","unsetopt","vared","wait","whence","where","which","zcompile","zformat","zftp","zle","zmodload","zparseopts","zprof","zpty","zregexparse","zsocket","zstyle","ztcp","chcon","chgrp","chown","chmod","cp","dd","df","dir","dircolors","ln","ls","mkdir","mkfifo","mknod","mktemp","mv","realpath","rm","rmdir","shred","sync","touch","truncate","vdir","b2sum","base32","base64","cat","cksum","comm","csplit","cut","expand","fmt","fold","head","join","md5sum","nl","numfmt","od","paste","ptx","pr","sha1sum","sha224sum","sha256sum","sha384sum","sha512sum","shuf","sort","split","sum","tac","tail","tr","tsort","unexpand","uniq","wc","arch","basename","chroot","date","dirname","du","echo","env","expr","factor","groups","hostid","id","link","logname","nice","nohup","nproc","pathchk","pinky","printenv","printf","pwd","readlink","runcon","seq","sleep","stat","stdbuf","stty","tee","test","timeout","tty","uname","unlink","uptime","users","who","whoami","yes"]},contains:[s,e.SHEBANG(),c,l,e.HASH_COMMENT_MODE,a,{match:/(\/[a-z._-]+)+/},i,{className:"",begin:/\\"/},{className:"string",begin:/'/,end:/'/},t]}})),ka.registerLanguage("c",(function(e){const n=e.regex,t=e.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="[a-zA-Z_]\\w*::",o="(decltype\\(auto\\)|"+n.optional(r)+"[a-zA-Z_]\\w*"+n.optional("<[^<>]+>")+")",a={className:"type",variants:[{begin:"\\b[a-z\\d_]*_t\\b"},{match:/\batomic_[a-z]{3,6}\b/}]},i={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},e.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},l={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},s={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(i,{className:"string"}),{className:"string",begin:/<.*?>/},t,e.C_BLOCK_COMMENT_MODE]},c={className:"title",begin:n.optional(r)+e.IDENT_RE,relevance:0},u=n.optional(r)+e.IDENT_RE+"\\s*\\(",d={keyword:["asm","auto","break","case","continue","default","do","else","enum","extern","for","fortran","goto","if","inline","register","restrict","return","sizeof","struct","switch","typedef","union","volatile","while","_Alignas","_Alignof","_Atomic","_Generic","_Noreturn","_Static_assert","_Thread_local","alignas","alignof","noreturn","static_assert","thread_local","_Pragma"],type:["float","double","signed","unsigned","int","short","long","char","void","_Bool","_Complex","_Imaginary","_Decimal32","_Decimal64","_Decimal128","const","static","complex","bool","imaginary"],literal:"true false NULL",built_in:"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"},f=[s,a,t,e.C_BLOCK_COMMENT_MODE,l,i],p={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:d,contains:f.concat([{begin:/\(/,end:/\)/,keywords:d,contains:f.concat(["self"]),relevance:0}]),relevance:0},m={begin:"("+o+"[\\*&\\s]+)+"+u,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:d,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:"decltype\\(auto\\)",keywords:d,relevance:0},{begin:u,returnBegin:!0,contains:[e.inherit(c,{className:"title.function"})],relevance:0},{relevance:0,match:/,/},{className:"params",begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:[t,e.C_BLOCK_COMMENT_MODE,i,l,a,{begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:["self",t,e.C_BLOCK_COMMENT_MODE,i,l,a]}]},a,t,e.C_BLOCK_COMMENT_MODE,s]};return{name:"C",aliases:["h"],keywords:d,disableAutodetect:!0,illegal:"</",contains:[].concat(p,m,f,[s,{begin:e.IDENT_RE+"::",keywords:d},{className:"class",beginKeywords:"enum class struct union",end:/[{;:<>=]/,contains:[{beginKeywords:"final class struct"},e.TITLE_MODE]}]),exports:{preprocessor:s,strings:i,keywords:d}}})),ka.registerLanguage("cpp",(function(e){const n=e.regex,t=e.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="[a-zA-Z_]\\w*::",o="(?!struct)(decltype\\(auto\\)|"+n.optional(r)+"[a-zA-Z_]\\w*"+n.optional("<[^<>]+>")+")",a={className:"type",begin:"\\b[a-z\\d_]*_t\\b"},i={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},e.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},l={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},s={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(i,{className:"string"}),{className:"string",begin:/<.*?>/},t,e.C_BLOCK_COMMENT_MODE]},c={className:"title",begin:n.optional(r)+e.IDENT_RE,relevance:0},u=n.optional(r)+e.IDENT_RE+"\\s*\\(",d={type:["bool","char","char16_t","char32_t","char8_t","double","float","int","long","short","void","wchar_t","unsigned","signed","const","static"],keyword:["alignas","alignof","and","and_eq","asm","atomic_cancel","atomic_commit","atomic_noexcept","auto","bitand","bitor","break","case","catch","class","co_await","co_return","co_yield","compl","concept","const_cast|10","consteval","constexpr","constinit","continue","decltype","default","delete","do","dynamic_cast|10","else","enum","explicit","export","extern","false","final","for","friend","goto","if","import","inline","module","mutable","namespace","new","noexcept","not","not_eq","nullptr","operator","or","or_eq","override","private","protected","public","reflexpr","register","reinterpret_cast|10","requires","return","sizeof","static_assert","static_cast|10","struct","switch","synchronized","template","this","thread_local","throw","transaction_safe","transaction_safe_dynamic","true","try","typedef","typeid","typename","union","using","virtual","volatile","while","xor","xor_eq"],literal:["NULL","false","nullopt","nullptr","true"],built_in:["_Pragma"],_type_hints:["any","auto_ptr","barrier","binary_semaphore","bitset","complex","condition_variable","condition_variable_any","counting_semaphore","deque","false_type","future","imaginary","initializer_list","istringstream","jthread","latch","lock_guard","multimap","multiset","mutex","optional","ostringstream","packaged_task","pair","promise","priority_queue","queue","recursive_mutex","recursive_timed_mutex","scoped_lock","set","shared_future","shared_lock","shared_mutex","shared_timed_mutex","shared_ptr","stack","string_view","stringstream","timed_mutex","thread","true_type","tuple","unique_lock","unique_ptr","unordered_map","unordered_multimap","unordered_multiset","unordered_set","variant","vector","weak_ptr","wstring","wstring_view"]},f={className:"function.dispatch",relevance:0,keywords:{_hint:["abort","abs","acos","apply","as_const","asin","atan","atan2","calloc","ceil","cerr","cin","clog","cos","cosh","cout","declval","endl","exchange","exit","exp","fabs","floor","fmod","forward","fprintf","fputs","free","frexp","fscanf","future","invoke","isalnum","isalpha","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","labs","launder","ldexp","log","log10","make_pair","make_shared","make_shared_for_overwrite","make_tuple","make_unique","malloc","memchr","memcmp","memcpy","memset","modf","move","pow","printf","putchar","puts","realloc","scanf","sin","sinh","snprintf","sprintf","sqrt","sscanf","std","stderr","stdin","stdout","strcat","strchr","strcmp","strcpy","strcspn","strlen","strncat","strncmp","strncpy","strpbrk","strrchr","strspn","strstr","swap","tan","tanh","terminate","to_underlying","tolower","toupper","vfprintf","visit","vprintf","vsprintf"]},begin:n.concat(/\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!switch)/,/(?!while)/,e.IDENT_RE,n.lookahead(/(<[^<>]+>|)\s*\(/))},p=[f,s,a,t,e.C_BLOCK_COMMENT_MODE,l,i],m={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:d,contains:p.concat([{begin:/\(/,end:/\)/,keywords:d,contains:p.concat(["self"]),relevance:0}]),relevance:0},g={className:"function",begin:"("+o+"[\\*&\\s]+)+"+u,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:d,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:"decltype\\(auto\\)",keywords:d,relevance:0},{begin:u,returnBegin:!0,contains:[c],relevance:0},{begin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[i,l]},{relevance:0,match:/,/},{className:"params",begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:[t,e.C_BLOCK_COMMENT_MODE,i,l,a,{begin:/\(/,end:/\)/,keywords:d,relevance:0,contains:["self",t,e.C_BLOCK_COMMENT_MODE,i,l,a]}]},a,t,e.C_BLOCK_COMMENT_MODE,s]};return{name:"C++",aliases:["cc","c++","h++","hpp","hh","hxx","cxx"],keywords:d,illegal:"</",classNameAliases:{"function.dispatch":"built_in"},contains:[].concat(m,g,f,p,[s,{begin:"\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<",end:">",keywords:d,contains:["self",a]},{begin:e.IDENT_RE+"::",keywords:d},{match:[/\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,/\s+/,/\w+/],className:{1:"keyword",3:"title.class"}}])}})),ka.registerLanguage("csharp",(function(e){const n={keyword:["abstract","as","base","break","case","catch","class","const","continue","do","else","event","explicit","extern","finally","fixed","for","foreach","goto","if","implicit","in","interface","internal","is","lock","namespace","new","operator","out","override","params","private","protected","public","readonly","record","ref","return","sealed","sizeof","stackalloc","static","struct","switch","this","throw","try","typeof","unchecked","unsafe","using","virtual","void","volatile","while"].concat(["add","alias","and","ascending","async","await","by","descending","equals","from","get","global","group","init","into","join","let","nameof","not","notnull","on","or","orderby","partial","remove","select","set","unmanaged","value|0","var","when","where","with","yield"]),built_in:["bool","byte","char","decimal","delegate","double","dynamic","enum","float","int","long","nint","nuint","object","sbyte","short","string","ulong","uint","ushort"],literal:["default","false","null","true"]},t=e.inherit(e.TITLE_MODE,{begin:"[a-zA-Z](\\.?\\w)*"}),r={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},o={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},a=e.inherit(o,{illegal:/\n/}),i={className:"subst",begin:/\{/,end:/\}/,keywords:n},l=e.inherit(i,{illegal:/\n/}),s={className:"string",begin:/\$"/,end:'"',illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},e.BACKSLASH_ESCAPE,l]},c={className:"string",begin:/\$@"/,end:'"',contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},i]},u=e.inherit(c,{illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},l]});i.contains=[c,s,o,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,r,e.C_BLOCK_COMMENT_MODE],l.contains=[u,s,a,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,r,e.inherit(e.C_BLOCK_COMMENT_MODE,{illegal:/\n/})];const d={variants:[c,s,o,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},f={begin:"<",end:">",contains:[{beginKeywords:"in out"},t]},p=e.IDENT_RE+"(<"+e.IDENT_RE+"(\\s*,\\s*"+e.IDENT_RE+")*>)?(\\[\\])?",m={begin:"@"+e.IDENT_RE,relevance:0};return{name:"C#",aliases:["cs","c#"],keywords:n,illegal:/::/,contains:[e.COMMENT("///","$",{returnBegin:!0,contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{begin:"\x3c!--|--\x3e"},{begin:"</?",end:">"}]}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",end:"$",keywords:{keyword:"if else elif endif define undef warning error line region endregion pragma checksum"}},d,r,{beginKeywords:"class interface",relevance:0,end:/[{;=]/,illegal:/[^\s:,]/,contains:[{beginKeywords:"where class"},t,f,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[t,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"record",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[t,f,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"meta",begin:"^\\s*\\[(?=[\\w])",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{className:"string",begin:/"/,end:/"/}]},{beginKeywords:"new return throw await else",relevance:0},{className:"function",begin:"("+p+"\\s+)+"+e.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,end:/\s*[{;=]/,excludeEnd:!0,keywords:n,contains:[{beginKeywords:["public","private","protected","static","internal","protected","abstract","async","extern","override","unsafe","virtual","new","sealed","partial"].join(" "),relevance:0},{begin:e.IDENT_RE+"\\s*(<[^=]+>\\s*)?\\(",returnBegin:!0,contains:[e.TITLE_MODE,f],relevance:0},{match:/\(\)/},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,relevance:0,contains:[d,r,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},m]}})),ka.registerLanguage("css",(function(e){const n=e.regex,t=(e=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z][A-Za-z0-9_-]*/}}))(e),r=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE];return{name:"CSS",case_insensitive:!0,illegal:/[=|'\$]/,keywords:{keyframePosition:"from to"},classNameAliases:{keyframePosition:"selector-tag"},contains:[t.BLOCK_COMMENT,{begin:/-(webkit|moz|ms|o)-(?=[a-z])/},t.CSS_NUMBER_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/,relevance:0},{className:"selector-class",begin:"\\.[a-zA-Z-][a-zA-Z0-9_-]*",relevance:0},t.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",variants:[{begin:":("+so.join("|")+")"},{begin:":(:)?("+co.join("|")+")"}]},t.CSS_VARIABLE,{className:"attribute",begin:"\\b("+uo.join("|")+")\\b"},{begin:/:/,end:/[;}{]/,contains:[t.BLOCK_COMMENT,t.HEXCOLOR,t.IMPORTANT,t.CSS_NUMBER_MODE,...r,{begin:/(url|data-uri)\(/,end:/\)/,relevance:0,keywords:{built_in:"url data-uri"},contains:[{className:"string",begin:/[^)]/,endsWithParent:!0,excludeEnd:!0}]},t.FUNCTION_DISPATCH]},{begin:n.lookahead(/@/),end:"[{;]",relevance:0,illegal:/:/,contains:[{className:"keyword",begin:/@-?\w[\w]*(-\w+)*/},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:{$pattern:/[a-z-]+/,keyword:"and or not only",attribute:lo.join(" ")},contains:[{begin:/[a-z-]+(?=:)/,className:"attribute"},...r,t.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:"\\b("+io.join("|")+")\\b"}]}})),ka.registerLanguage("diff",(function(e){const n=e.regex;return{name:"Diff",aliases:["patch"],contains:[{className:"meta",relevance:10,match:n.either(/^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,/^\*\*\* +\d+,\d+ +\*\*\*\*$/,/^--- +\d+,\d+ +----$/)},{className:"comment",variants:[{begin:n.either(/Index: /,/^index/,/={3,}/,/^-{3}/,/^\*{3} /,/^\+{3}/,/^diff --git/),end:/$/},{match:/^\*{15}$/}]},{className:"addition",begin:/^\+/,end:/$/},{className:"deletion",begin:/^-/,end:/$/},{className:"addition",begin:/^!/,end:/$/}]}})),ka.registerLanguage("go",(function(e){const n={keyword:["break","case","chan","const","continue","default","defer","else","fallthrough","for","func","go","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var"],type:["bool","byte","complex64","complex128","error","float32","float64","int8","int16","int32","int64","string","uint8","uint16","uint32","uint64","int","uint","uintptr","rune"],literal:["true","false","iota","nil"],built_in:["append","cap","close","complex","copy","imag","len","make","new","panic","print","println","real","recover","delete"]};return{name:"Go",aliases:["golang"],keywords:n,illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",variants:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{begin:"`",end:"`"}]},{className:"number",variants:[{begin:e.C_NUMBER_RE+"[i]",relevance:1},e.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:"\\s*(\\{|$)",excludeEnd:!0,contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:n,illegal:/["']/}]}]}})),ka.registerLanguage("ini",(function(e){const n=e.regex,t={className:"number",relevance:0,variants:[{begin:/([+-]+)?[\d]+_[\d_]+/},{begin:e.NUMBER_RE}]},r=e.COMMENT();r.variants=[{begin:/;/,end:/$/},{begin:/#/,end:/$/}];const o={className:"variable",variants:[{begin:/\$[\w\d"][\w\d_]*/},{begin:/\$\{(.*?)\}/}]},a={className:"literal",begin:/\bon|off|true|false|yes|no\b/},i={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:"'''",end:"'''",relevance:10},{begin:'"""',end:'"""',relevance:10},{begin:'"',end:'"'},{begin:"'",end:"'"}]},l={begin:/\[/,end:/\]/,contains:[r,a,o,i,t,"self"],relevance:0},s=n.either(/[A-Za-z0-9_-]+/,/"(\\"|[^"])*"/,/'[^']*'/);return{name:"TOML, also INI",aliases:["toml"],case_insensitive:!0,illegal:/\S/,contains:[r,{className:"section",begin:/\[+/,end:/\]+/},{begin:n.concat(s,"(\\s*\\.\\s*",s,")*",n.lookahead(/\s*=\s*[^#\s]/)),className:"attr",starts:{end:/$/,contains:[r,l,a,o,i,t]}}]}})),ka.registerLanguage("java",(function(e){e.regex;const n="[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",t=n+go("(?:<"+n+"~~~(?:\\s*,\\s*"+n+"~~~)*>)?",/~~~/g,2),r={keyword:["synchronized","abstract","private","var","static","if","const ","for","while","strictfp","finally","protected","import","native","final","void","enum","else","break","transient","catch","instanceof","volatile","case","assert","package","default","public","try","switch","continue","throws","protected","public","private","module","requires","exports","do"],literal:["false","true","null"],type:["char","boolean","long","float","int","byte","short","double"],built_in:["super","this"]},o={className:"meta",begin:"@"+n,contains:[{begin:/\(/,end:/\)/,contains:["self"]}]},a={className:"params",begin:/\(/,end:/\)/,keywords:r,relevance:0,contains:[e.C_BLOCK_COMMENT_MODE],endsParent:!0};return{name:"Java",aliases:["jsp"],keywords:r,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),{begin:/import java\.[a-z]+\./,keywords:"import",relevance:2},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{begin:/"""/,end:/"""/,className:"string",contains:[e.BACKSLASH_ESCAPE]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{match:[/\b(?:class|interface|enum|extends|implements|new)/,/\s+/,n],className:{1:"keyword",3:"title.class"}},{begin:[n,/\s+/,n,/\s+/,/=/],className:{1:"type",3:"variable",5:"operator"}},{begin:[/record/,/\s+/,n],className:{1:"keyword",3:"title.class"},contains:[a,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"new throw return else",relevance:0},{begin:["(?:"+t+"\\s+)",e.UNDERSCORE_IDENT_RE,/\s*(?=\()/],className:{2:"title.function"},keywords:r,contains:[{className:"params",begin:/\(/,end:/\)/,keywords:r,relevance:0,contains:[o,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,mo,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},mo,o]}})),ka.registerLanguage("javascript",(function(e){const n=e.regex,t=ho,r={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(e,n)=>{const t=e[0].length+e.index,r=e.input[t];if("<"===r||","===r)return void n.ignoreMatch();let o;">"===r&&(((e,{after:n})=>{const t="</"+e[0].slice(1);return-1!==e.input.indexOf(t,n)})(e,{after:t})||n.ignoreMatch()),(o=e.input.substr(t).match(/^\s+extends\s+/))&&0===o.index&&n.ignoreMatch()}},o={$pattern:ho,keyword:bo,literal:yo,built_in:Co,"variable.language":ko},a="\\.([0-9](_?[0-9])*)",i="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",l={className:"number",variants:[{begin:`(\\b(${i})((${a})|\\.)?|(${a}))[eE][+-]?([0-9](_?[0-9])*)\\b`},{begin:`\\b(${i})\\b((${a})\\b|\\.)?|(${a})\\b`},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},s={className:"subst",begin:"\\$\\{",end:"\\}",keywords:o,contains:[]},c={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,s],subLanguage:"xml"}},u={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,s],subLanguage:"css"}},d={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,s]},f={className:"comment",variants:[e.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,excludeBegin:!0,relevance:0},{className:"variable",begin:t+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]},p=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,c,u,d,l];s.contains=p.concat({begin:/\{/,end:/\}/,keywords:o,contains:["self"].concat(p)});const m=[].concat(f,s.contains),g=m.concat([{begin:/\(/,end:/\)/,keywords:o,contains:["self"].concat(m)}]),h={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:o,contains:g},b={variants:[{match:[/class/,/\s+/,t,/\s+/,/extends/,/\s+/,n.concat(t,"(",n.concat(/\./,t),")*")],scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{match:[/class/,/\s+/,t],scope:{1:"keyword",3:"title.class"}}]},y={relevance:0,match:n.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]+|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+/),className:"title.class",keywords:{_:[...vo,...wo]}},v={variants:[{match:[/function/,/\s+/,t,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],className:{1:"keyword",3:"title.function"},label:"func.def",contains:[h],illegal:/%/},w={match:n.concat(/\b/,function(e){return n.concat("(?!",e.join("|"),")")}([...Ao,"super"]),t,n.lookahead(/\(/)),className:"title.function",relevance:0},A={begin:n.concat(/\./,n.lookahead(n.concat(t,/(?![0-9A-Za-z$_(])/))),end:t,excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},k={match:[/get|set/,/\s+/,t,/(?=\()/],className:{1:"keyword",3:"title.function"},contains:[{begin:/\(\)/},h]},C="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+e.UNDERSCORE_IDENT_RE+")\\s*=>",_={match:[/const|var|let/,/\s+/,t,/\s*/,/=\s*/,n.lookahead(C)],className:{1:"keyword",3:"title.function"},contains:[h]};return{name:"Javascript",aliases:["js","jsx","mjs","cjs"],keywords:o,exports:{PARAMS_CONTAINS:g,CLASS_REFERENCE:y},illegal:/#(?![$_A-z])/,contains:[e.SHEBANG({label:"shebang",binary:"node",relevance:5}),{label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,c,u,d,f,l,y,{className:"attr",begin:t+n.lookahead(":"),relevance:0},_,{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",relevance:0,contains:[f,e.REGEXP_MODE,{className:"function",begin:C,returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:e.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:o,contains:g}]}]},{begin:/,/,relevance:0},{match:/\s+/,relevance:0},{variants:[{begin:"<>",end:"</>"},{match:/<[A-Za-z0-9\\._:-]+\s*\/>/},{begin:r.begin,"on:begin":r.isTrulyOpeningTag,end:r.end}],subLanguage:"xml",contains:[{begin:r.begin,end:r.end,skip:!0,contains:["self"]}]}]},v,{beginKeywords:"while if switch catch for"},{begin:"\\b(?!function)"+e.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,label:"func.def",contains:[h,e.inherit(e.TITLE_MODE,{begin:t,className:"title.function"})]},{match:/\.\.\./,relevance:0},A,{match:"\\$"+t,relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},contains:[h]},w,{relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"},b,k,{match:/\$[(.]/}]}})),ka.registerLanguage("json",(function(e){const n={beginKeywords:["true","false","null"].join(" ")};return{name:"JSON",contains:[{className:"attr",begin:/"(\\.|[^\\"\r\n])*"(?=\s*:)/,relevance:1.01},{match:/[{}[\],:]/,className:"punctuation",relevance:0},e.QUOTE_STRING_MODE,n,e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE],illegal:"\\S"}})),ka.registerLanguage("kotlin",(function(e){const n={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},t={className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"@"},r={className:"subst",begin:/\$\{/,end:/\}/,contains:[e.C_NUMBER_MODE]},o={className:"variable",begin:"\\$"+e.UNDERSCORE_IDENT_RE},a={className:"string",variants:[{begin:'"""',end:'"""(?=[^"])',contains:[o,r]},{begin:"'",end:"'",illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"',illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,o,r]}]};r.contains.push(a);const i={className:"meta",begin:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+e.UNDERSCORE_IDENT_RE+")?"},l={className:"meta",begin:"@"+e.UNDERSCORE_IDENT_RE,contains:[{begin:/\(/,end:/\)/,contains:[e.inherit(a,{className:"string"})]}]},s=Eo,c=e.COMMENT("/\\*","\\*/",{contains:[e.C_BLOCK_COMMENT_MODE]}),u={variants:[{className:"type",begin:e.UNDERSCORE_IDENT_RE},{begin:/\(/,end:/\)/,contains:[]}]},d=u;return d.variants[1].contains=[u],u.variants[1].contains=[d],{name:"Kotlin",aliases:["kt","kts"],keywords:n,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,c,{className:"keyword",begin:/\b(break|continue|return|this)\b/,starts:{contains:[{className:"symbol",begin:/@\w+/}]}},t,i,l,{className:"function",beginKeywords:"fun",end:"[(]|$",returnBegin:!0,excludeEnd:!0,keywords:n,relevance:5,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"type",begin:/</,end:/>/,keywords:"reified",relevance:0},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:n,relevance:0,contains:[{begin:/:/,end:/[=,\/]/,endsWithParent:!0,contains:[u,e.C_LINE_COMMENT_MODE,c],relevance:0},e.C_LINE_COMMENT_MODE,c,i,l,a,e.C_NUMBER_MODE]},c]},{className:"class",beginKeywords:"class interface trait",end:/[:\{(]|$/,excludeEnd:!0,illegal:"extends implements",contains:[{beginKeywords:"public protected internal private constructor"},e.UNDERSCORE_TITLE_MODE,{className:"type",begin:/</,end:/>/,excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:/[,:]\s*/,end:/[<\(,]|$/,excludeBegin:!0,returnEnd:!0},i,l]},a,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:"\n"},s]}})),ka.registerLanguage("less",(function(e){const n=(e=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z][A-Za-z0-9_-]*/}}))(e),t=To,r="([\\w-]+|@\\{[\\w-]+\\})",o=[],a=[],i=function(e){return{className:"string",begin:"~?"+e+".*?"+e}},l=function(e,n,t){return{className:e,begin:n,relevance:t}},s={$pattern:/[a-z-]+/,keyword:"and or not only",attribute:Bo.join(" ")},c={begin:"\\(",end:"\\)",contains:a,keywords:s,relevance:0};a.push(e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,i("'"),i('"'),n.CSS_NUMBER_MODE,{begin:"(url|data-uri)\\(",starts:{className:"string",end:"[\\)\\n]",excludeEnd:!0}},n.HEXCOLOR,c,l("variable","@@?[\\w-]+",10),l("variable","@\\{[\\w-]+\\}"),l("built_in","~?`[^`]*?`"),{className:"attribute",begin:"[\\w-]+\\s*:",end:":",returnBegin:!0,excludeEnd:!0},n.IMPORTANT);const u=a.concat({begin:/\{/,end:/\}/,contains:o}),d={beginKeywords:"when",endsWithParent:!0,contains:[{beginKeywords:"and not"}].concat(a)},f={begin:r+"\\s*:",returnBegin:!0,end:/[;}]/,relevance:0,contains:[{begin:/-(webkit|moz|ms|o)-/},n.CSS_VARIABLE,{className:"attribute",begin:"\\b("+Mo.join("|")+")\\b",end:/(?=:)/,starts:{endsWithParent:!0,illegal:"[<=$]",relevance:0,contains:a}}]},p={className:"keyword",begin:"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",starts:{end:"[;{}]",keywords:s,returnEnd:!0,contains:a,relevance:0}},m={className:"variable",variants:[{begin:"@[\\w-]+\\s*:",relevance:15},{begin:"@[\\w-]+"}],starts:{end:"[;}]",returnEnd:!0,contains:u}},g={variants:[{begin:"[\\.#:&\\[>]",end:"[;{}]"},{begin:r,end:/\{/}],returnBegin:!0,returnEnd:!0,illegal:"[<='$\"]",relevance:0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,d,l("keyword","all\\b"),l("variable","@\\{[\\w-]+\\}"),{begin:"\\b("+So.join("|")+")\\b",className:"selector-tag"},n.CSS_NUMBER_MODE,l("selector-tag",r,0),l("selector-id","#"+r),l("selector-class","\\."+r,0),l("selector-tag","&",0),n.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",begin:":("+No.join("|")+")"},{className:"selector-pseudo",begin:":(:)?("+Oo.join("|")+")"},{begin:/\(/,end:/\)/,relevance:0,contains:u},{begin:"!important"},n.FUNCTION_DISPATCH]},h={begin:`[\\w-]+:(:)?(${t.join("|")})`,returnBegin:!0,contains:[g]};return o.push(e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,p,m,h,f,g),{name:"Less",case_insensitive:!0,illegal:"[=>'/<($\"]",contains:o}})),ka.registerLanguage("lua",(function(e){const n="\\[=*\\[",t="\\]=*\\]",r={begin:n,end:t,contains:["self"]},o=[e.COMMENT("--(?!\\[=*\\[)","$"),e.COMMENT("--\\[=*\\[",t,{contains:[r],relevance:10})];return{name:"Lua",keywords:{$pattern:e.UNDERSCORE_IDENT_RE,literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"},contains:o.concat([{className:"function",beginKeywords:"function",end:"\\)",contains:[e.inherit(e.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{className:"params",begin:"\\(",endsWithParent:!0,contains:o}].concat(o)},e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:n,end:t,contains:[r],relevance:5}])}})),ka.registerLanguage("makefile",(function(e){const n={className:"variable",variants:[{begin:"\\$\\("+e.UNDERSCORE_IDENT_RE+"\\)",contains:[e.BACKSLASH_ESCAPE]},{begin:/\$[@%<?\^\+\*]/}]},t={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n]},r={className:"variable",begin:/\$\([\w-]+\s/,end:/\)/,keywords:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},contains:[n]},o={begin:"^"+e.UNDERSCORE_IDENT_RE+"\\s*(?=[:+?]?=)"},a={className:"section",begin:/^[^\s]+:/,end:/$/,contains:[n]};return{name:"Makefile",aliases:["mk","mak","make"],keywords:{$pattern:/[\w-]+/,keyword:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"},contains:[e.HASH_COMMENT_MODE,n,t,r,o,{className:"meta",begin:/^\.PHONY:/,end:/$/,keywords:{$pattern:/[\.\w]+/,keyword:".PHONY"}},a]}})),ka.registerLanguage("markdown",(function(e){const n={begin:/<\/?[A-Za-z_]/,end:">",subLanguage:"xml",relevance:0},t={variants:[{begin:/\[.+?\]\[.*?\]/,relevance:0},{begin:/\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,relevance:2},{begin:e.regex.concat(/\[.+?\]\(/,/[A-Za-z][A-Za-z0-9+.-]*/,/:\/\/.*?\)/),relevance:2},{begin:/\[.+?\]\([./?&#].*?\)/,relevance:1},{begin:/\[.*?\]\(.*?\)/,relevance:0}],returnBegin:!0,contains:[{match:/\[(?=\])/},{className:"string",relevance:0,begin:"\\[",end:"\\]",excludeBegin:!0,returnEnd:!0},{className:"link",relevance:0,begin:"\\]\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"symbol",relevance:0,begin:"\\]\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0}]},r={className:"strong",contains:[],variants:[{begin:/_{2}/,end:/_{2}/},{begin:/\*{2}/,end:/\*{2}/}]},o={className:"emphasis",contains:[],variants:[{begin:/\*(?!\*)/,end:/\*/},{begin:/_(?!_)/,end:/_/,relevance:0}]};r.contains.push(o),o.contains.push(r);let a=[n,t];return r.contains=r.contains.concat(a),o.contains=o.contains.concat(a),a=a.concat(r,o),{name:"Markdown",aliases:["md","mkdown","mkd"],contains:[{className:"section",variants:[{begin:"^#{1,6}",end:"$",contains:a},{begin:"(?=^.+?\\n[=-]{2,}$)",contains:[{begin:"^[=-]*$"},{begin:"^",end:"\\n",contains:a}]}]},n,{className:"bullet",begin:"^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)",end:"\\s+",excludeEnd:!0},r,o,{className:"quote",begin:"^>\\s+",contains:a,end:"$"},{className:"code",variants:[{begin:"(`{3,})[^`](.|\\n)*?\\1`*[ ]*"},{begin:"(~{3,})[^~](.|\\n)*?\\1~*[ ]*"},{begin:"```",end:"```+[ ]*$"},{begin:"~~~",end:"~~~+[ ]*$"},{begin:"`.+?`"},{begin:"(?=^( {4}|\\t))",contains:[{begin:"^( {4}|\\t)",end:"(\\n)$"}],relevance:0}]},{begin:"^[-\\*]{3,}",end:"$"},t,{begin:/^\[[^\n]+\]:/,returnBegin:!0,contains:[{className:"symbol",begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0},{className:"link",begin:/:\s*/,end:/$/,excludeBegin:!0}]}]}})),ka.registerLanguage("objectivec",(function(e){const n=/[a-zA-Z@][a-zA-Z0-9_]*/,t={$pattern:n,keyword:["@interface","@class","@protocol","@implementation"]};return{name:"Objective-C",aliases:["mm","objc","obj-c","obj-c++","objective-c++"],keywords:{$pattern:n,keyword:["int","float","while","char","export","sizeof","typedef","const","struct","for","union","unsigned","long","volatile","static","bool","mutable","if","do","return","goto","void","enum","else","break","extern","asm","case","short","default","double","register","explicit","signed","typename","this","switch","continue","wchar_t","inline","readonly","assign","readwrite","self","@synchronized","id","typeof","nonatomic","super","unichar","IBOutlet","IBAction","strong","weak","copy","in","out","inout","bycopy","byref","oneway","__strong","__weak","__block","__autoreleasing","@private","@protected","@public","@try","@property","@end","@throw","@catch","@finally","@autoreleasepool","@synthesize","@dynamic","@selector","@optional","@required","@encode","@package","@import","@defs","@compatibility_alias","__bridge","__bridge_transfer","__bridge_retained","__bridge_retain","__covariant","__contravariant","__kindof","_Nonnull","_Nullable","_Null_unspecified","__FUNCTION__","__PRETTY_FUNCTION__","__attribute__","getter","setter","retain","unsafe_unretained","nonnull","nullable","null_unspecified","null_resettable","class","instancetype","NS_DESIGNATED_INITIALIZER","NS_UNAVAILABLE","NS_REQUIRES_SUPER","NS_RETURNS_INNER_POINTER","NS_INLINE","NS_AVAILABLE","NS_DEPRECATED","NS_ENUM","NS_OPTIONS","NS_SWIFT_UNAVAILABLE","NS_ASSUME_NONNULL_BEGIN","NS_ASSUME_NONNULL_END","NS_REFINED_FOR_SWIFT","NS_SWIFT_NAME","NS_SWIFT_NOTHROW","NS_DURING","NS_HANDLER","NS_ENDHANDLER","NS_VALUERETURN","NS_VOIDRETURN"],literal:["false","true","FALSE","TRUE","nil","YES","NO","NULL"],built_in:["BOOL","dispatch_once_t","dispatch_queue_t","dispatch_sync","dispatch_async","dispatch_once"]},illegal:"</",contains:[{className:"built_in",begin:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"string",variants:[{begin:'@"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]}]},{className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{keyword:"if else elif endif define undef warning error line pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(e.QUOTE_STRING_MODE,{className:"string"}),{className:"string",begin:/<.*?>/,end:/$/,illegal:"\\n"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"class",begin:"("+t.keyword.join("|")+")\\b",end:/(\{|$)/,excludeEnd:!0,keywords:t,contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"\\."+e.UNDERSCORE_IDENT_RE,relevance:0}]}})),ka.registerLanguage("perl",(function(e){const n=e.regex,t=/[dualxmsipngr]{0,12}/,r={$pattern:/[\w.]+/,keyword:["abs","accept","alarm","and","atan2","bind","binmode","bless","break","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","continue","cos","crypt","dbmclose","dbmopen","defined","delete","die","do","dump","each","else","elsif","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","eval","exec","exists","exit","exp","fcntl","fileno","flock","for","foreach","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","goto","grep","gt","hex","if","index","int","ioctl","join","keys","kill","last","lc","lcfirst","length","link","listen","local","localtime","log","lstat","lt","ma","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","ne","next","no","not","oct","open","opendir","or","ord","our","pack","package","pipe","pop","pos","print","printf","prototype","push","q|0","qq","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","require","reset","return","reverse","rewinddir","rindex","rmdir","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sin","sleep","socket","socketpair","sort","splice","split","sprintf","sqrt","srand","stat","state","study","sub","substr","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unless","unlink","unpack","unshift","untie","until","use","utime","values","vec","wait","waitpid","wantarray","warn","when","while","write","x|0","xor","y|0"].join(" ")},o={className:"subst",begin:"[$@]\\{",end:"\\}",keywords:r},a={begin:/->\{/,end:/\}/},i={variants:[{begin:/\$\d/},{begin:n.concat(/[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,"(?![A-Za-z])(?![@$%])")},{begin:/[$%@][^\s\w{]/,relevance:0}]},l=[e.BACKSLASH_ESCAPE,o,i],s=[/!/,/\//,/\|/,/\?/,/'/,/"/,/#/],c=(e,r,o="\\1")=>{const a="\\1"===o?o:n.concat(o,r);return n.concat(n.concat("(?:",e,")"),r,/(?:\\.|[^\\\/])*?/,a,/(?:\\.|[^\\\/])*?/,o,t)},u=(e,r,o)=>n.concat(n.concat("(?:",e,")"),r,/(?:\\.|[^\\\/])*?/,o,t),d=[i,e.HASH_COMMENT_MODE,e.COMMENT(/^=\w/,/=cut/,{endsWithParent:!0}),a,{className:"string",contains:l,variants:[{begin:"q[qwxr]?\\s*\\(",end:"\\)",relevance:5},{begin:"q[qwxr]?\\s*\\[",end:"\\]",relevance:5},{begin:"q[qwxr]?\\s*\\{",end:"\\}",relevance:5},{begin:"q[qwxr]?\\s*\\|",end:"\\|",relevance:5},{begin:"q[qwxr]?\\s*<",end:">",relevance:5},{begin:"qw\\s+q",end:"q",relevance:5},{begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"'},{begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE]},{begin:/\{\w+\}/,relevance:0},{begin:"-?\\w+\\s*=>",relevance:0}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\/\\/|"+e.RE_STARTERS_RE+"|\\b(split|return|print|reverse|grep)\\b)\\s*",keywords:"split return print reverse grep",relevance:0,contains:[e.HASH_COMMENT_MODE,{className:"regexp",variants:[{begin:c("s|tr|y",n.either(...s,{capture:!0}))},{begin:c("s|tr|y","\\(","\\)")},{begin:c("s|tr|y","\\[","\\]")},{begin:c("s|tr|y","\\{","\\}")}],relevance:2},{className:"regexp",variants:[{begin:/(m|qr)\/\//,relevance:0},{begin:u("(?:m|qr)?",/\//,/\//)},{begin:u("m|qr",n.either(...s,{capture:!0}),/\1/)},{begin:u("m|qr",/\(/,/\)/)},{begin:u("m|qr",/\[/,/\]/)},{begin:u("m|qr",/\{/,/\}/)}]}]},{className:"function",beginKeywords:"sub",end:"(\\s*\\(.*?\\))?[;{]",excludeEnd:!0,relevance:5,contains:[e.TITLE_MODE]},{begin:"-\\w\\b",relevance:0},{begin:"^__DATA__$",end:"^__END__$",subLanguage:"mojolicious",contains:[{begin:"^@@.*",end:"$",className:"comment"}]}];return o.contains=d,a.contains=d,{name:"Perl",aliases:["pl","pm"],keywords:r,contains:d}})),ka.registerLanguage("php",(function(e){const n={className:"variable",begin:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*(?![A-Za-z0-9])(?![$])"},t={className:"meta",variants:[{begin:/<\?php/,relevance:10},{begin:/<\?[=]?/},{begin:/\?>/}]},r={className:"subst",variants:[{begin:/\$\w+/},{begin:/\{\$/,end:/\}/}]},o=e.inherit(e.APOS_STRING_MODE,{illegal:null}),a=e.inherit(e.QUOTE_STRING_MODE,{illegal:null,contains:e.QUOTE_STRING_MODE.contains.concat(r)}),i=e.END_SAME_AS_BEGIN({begin:/<<<[ \t]*(\w+)\n/,end:/[ \t]*(\w+)\b/,contains:e.QUOTE_STRING_MODE.contains.concat(r)}),l={className:"string",contains:[e.BACKSLASH_ESCAPE,t],variants:[e.inherit(o,{begin:"b'",end:"'"}),e.inherit(a,{begin:'b"',end:'"'}),a,o,i]},s={className:"number",variants:[{begin:"\\b0b[01]+(?:_[01]+)*\\b"},{begin:"\\b0o[0-7]+(?:_[0-7]+)*\\b"},{begin:"\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b"},{begin:"(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:e[+-]?\\d+)?"}],relevance:0},c={keyword:"__CLASS__ __DIR__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ die echo exit include include_once print require require_once array abstract and as binary bool boolean break callable case catch class clone const continue declare default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile enum eval extends final finally float for foreach from global goto if implements instanceof insteadof int integer interface isset iterable list match|0 mixed new object or private protected public real return string switch throw trait try unset use var void while xor yield",literal:"false null true",built_in:"Error|0 AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException UnhandledMatchError ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Stringable Throwable Traversable WeakReference WeakMap Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass"};return{case_insensitive:!0,keywords:c,contains:[e.HASH_COMMENT_MODE,e.COMMENT("//","$",{contains:[t]}),e.COMMENT("/\\*","\\*/",{contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.COMMENT("__halt_compiler.+?;",!1,{endsWithParent:!0,keywords:"__halt_compiler"}),t,{className:"keyword",begin:/\$this\b/},n,{begin:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{className:"function",relevance:0,beginKeywords:"fn function",end:/[;{]/,excludeEnd:!0,illegal:"[$%\\[]",contains:[{beginKeywords:"use"},e.UNDERSCORE_TITLE_MODE,{begin:"=>",endsParent:!0},{className:"params",begin:"\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0,keywords:c,contains:["self",n,e.C_BLOCK_COMMENT_MODE,l,s]}]},{className:"class",variants:[{beginKeywords:"enum",illegal:/[($"]/},{beginKeywords:"class interface trait",illegal:/[:($"]/}],relevance:0,end:/\{/,excludeEnd:!0,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",relevance:0,end:";",illegal:/[.']/,contains:[e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"use",relevance:0,end:";",contains:[e.UNDERSCORE_TITLE_MODE]},l,s]}})),ka.registerLanguage("php-template",(function(e){return{name:"PHP template",subLanguage:"xml",contains:[{begin:/<\?(php|=)?/,end:/\?>/,subLanguage:"php",contains:[{begin:"/\\*",end:"\\*/",skip:!0},{begin:'b"',end:'"',skip:!0},{begin:"b'",end:"'",skip:!0},e.inherit(e.APOS_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null,className:null,contains:null,skip:!0})]}]}})),ka.registerLanguage("plaintext",(function(e){return{name:"Plain text",aliases:["text","txt"],disableAutodetect:!0}})),ka.registerLanguage("python",(function(e){const n=e.regex,t=/[\p{XID_Start}_]\p{XID_Continue}*/u,r={$pattern:/[A-Za-z]\w+|__\w+__/,keyword:["and","as","assert","async","await","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal|10","not","or","pass","raise","return","try","while","with","yield"],built_in:["__import__","abs","all","any","ascii","bin","bool","breakpoint","bytearray","bytes","callable","chr","classmethod","compile","complex","delattr","dict","dir","divmod","enumerate","eval","exec","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","isinstance","issubclass","iter","len","list","locals","map","max","memoryview","min","next","object","oct","open","ord","pow","print","property","range","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","vars","zip"],literal:["__debug__","Ellipsis","False","None","NotImplemented","True"],type:["Any","Callable","Coroutine","Dict","List","Literal","Generic","Optional","Sequence","Set","Tuple","Type","Union"]},o={className:"meta",begin:/^(>>>|\.\.\.) /},a={className:"subst",begin:/\{/,end:/\}/,keywords:r,illegal:/#/},i={begin:/\{\{/,relevance:0},l={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,o],relevance:10},{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,o],relevance:10},{begin:/([fF][rR]|[rR][fF]|[fF])'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,o,i,a]},{begin:/([fF][rR]|[rR][fF]|[fF])"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,o,i,a]},{begin:/([uU]|[rR])'/,end:/'/,relevance:10},{begin:/([uU]|[rR])"/,end:/"/,relevance:10},{begin:/([bB]|[bB][rR]|[rR][bB])'/,end:/'/},{begin:/([bB]|[bB][rR]|[rR][bB])"/,end:/"/},{begin:/([fF][rR]|[rR][fF]|[fF])'/,end:/'/,contains:[e.BACKSLASH_ESCAPE,i,a]},{begin:/([fF][rR]|[rR][fF]|[fF])"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,i,a]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},s="[0-9](_?[0-9])*",c=`(\\b(${s}))?\\.(${s})|\\b(${s})\\.`,u={className:"number",relevance:0,variants:[{begin:`(\\b(${s})|(${c}))[eE][+-]?(${s})[jJ]?\\b`},{begin:`(${c})[jJ]?`},{begin:"\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b"},{begin:"\\b0[bB](_?[01])+[lL]?\\b"},{begin:"\\b0[oO](_?[0-7])+[lL]?\\b"},{begin:"\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b"},{begin:`\\b(${s})[jJ]\\b`}]},d={className:"comment",begin:n.lookahead(/# type:/),end:/$/,keywords:r,contains:[{begin:/# type:/},{begin:/#/,end:/\b\B/,endsWithParent:!0}]},f={className:"params",variants:[{className:"",begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:r,contains:["self",o,u,l,e.HASH_COMMENT_MODE]}]};return a.contains=[l,u,o],{name:"Python",aliases:["py","gyp","ipython"],unicodeRegex:!0,keywords:r,illegal:/(<\/|->|\?)|=>/,contains:[o,u,{begin:/\bself\b/},{beginKeywords:"if",relevance:0},l,d,e.HASH_COMMENT_MODE,{match:[/def/,/\s+/,t],scope:{1:"keyword",3:"title.function"},contains:[f]},{variants:[{match:[/class/,/\s+/,t,/\s*/,/\(\s*/,t,/\s*\)/]},{match:[/class/,/\s+/,t]}],scope:{1:"keyword",3:"title.class",6:"title.class.inherited"}},{className:"meta",begin:/^[\t ]*@/,end:/(?=#)|$/,contains:[u,f,l]}]}})),ka.registerLanguage("python-repl",(function(e){return{aliases:["pycon"],contains:[{className:"meta",starts:{end:/ |$/,starts:{end:"$",subLanguage:"python"}},variants:[{begin:/^>>>(?=[ ]|$)/},{begin:/^\.\.\.(?=[ ]|$)/}]}]}})),ka.registerLanguage("r",(function(e){const n=e.regex,t=/(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/,r=n.either(/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,/0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,/(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/),o=/[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/,a=n.either(/[()]/,/[{}]/,/\[\[/,/[[\]]/,/\\/,/,/);return{name:"R",keywords:{$pattern:t,keyword:"function if in break next repeat else for while",literal:"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",built_in:"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"},contains:[e.COMMENT(/#'/,/$/,{contains:[{scope:"doctag",match:/@examples/,starts:{end:n.lookahead(n.either(/\n^#'\s*(?=@[a-zA-Z]+)/,/\n^(?!#')/)),endsParent:!0}},{scope:"doctag",begin:"@param",end:/$/,contains:[{scope:"variable",variants:[{match:t},{match:/`(?:\\.|[^`\\])+`/}],endsParent:!0}]},{scope:"doctag",match:/@[a-zA-Z]+/},{scope:"keyword",match:/\\[a-zA-Z]+/}]}),e.HASH_COMMENT_MODE,{scope:"string",contains:[e.BACKSLASH_ESCAPE],variants:[e.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\(/,end:/\)(-*)"/}),e.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\{/,end:/\}(-*)"/}),e.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\[/,end:/\](-*)"/}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\(/,end:/\)(-*)'/}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\{/,end:/\}(-*)'/}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\[/,end:/\](-*)'/}),{begin:'"',end:'"',relevance:0},{begin:"'",end:"'",relevance:0}]},{relevance:0,variants:[{scope:{1:"operator",2:"number"},match:[o,r]},{scope:{1:"operator",2:"number"},match:[/%[^%]*%/,r]},{scope:{1:"punctuation",2:"number"},match:[a,r]},{scope:{2:"number"},match:[/[^a-zA-Z0-9._]|^/,r]}]},{scope:{3:"operator"},match:[t,/\s+/,/<-/,/\s+/]},{scope:"operator",relevance:0,variants:[{match:o},{match:/%[^%]*%/}]},{scope:"punctuation",relevance:0,match:a},{begin:"`",end:"`",contains:[{begin:/\\./}]}]}})),ka.registerLanguage("ruby",(function(e){const n=e.regex,t="([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)",r={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor __FILE__",built_in:"proc lambda",literal:"true false nil"},o={className:"doctag",begin:"@[A-Za-z]+"},a={begin:"#<",end:">"},i=[e.COMMENT("#","$",{contains:[o]}),e.COMMENT("^=begin","^=end",{contains:[o],relevance:10}),e.COMMENT("^__END__","\\n$")],l={className:"subst",begin:/#\{/,end:/\}/,keywords:r},s={className:"string",contains:[e.BACKSLASH_ESCAPE,l],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:/%[qQwWx]?\(/,end:/\)/},{begin:/%[qQwWx]?\[/,end:/\]/},{begin:/%[qQwWx]?\{/,end:/\}/},{begin:/%[qQwWx]?</,end:/>/},{begin:/%[qQwWx]?\//,end:/\//},{begin:/%[qQwWx]?%/,end:/%/},{begin:/%[qQwWx]?-/,end:/-/},{begin:/%[qQwWx]?\|/,end:/\|/},{begin:/\B\?(\\\d{1,3})/},{begin:/\B\?(\\x[A-Fa-f0-9]{1,2})/},{begin:/\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/},{begin:/\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/},{begin:/\B\?\\(c|C-)[\x20-\x7e]/},{begin:/\B\?\\?\S/},{begin:n.concat(/<<[-~]?'?/,n.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)),contains:[e.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,contains:[e.BACKSLASH_ESCAPE,l]})]}]},c="[0-9](_?[0-9])*",u={className:"number",relevance:0,variants:[{begin:`\\b([1-9](_?[0-9])*|0)(\\.(${c}))?([eE][+-]?(${c})|r)?i?\\b`},{begin:"\\b0[dD][0-9](_?[0-9])*r?i?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*r?i?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*r?i?\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b"},{begin:"\\b0(_?[0-7])+r?i?\\b"}]},d={className:"params",begin:"\\(",end:"\\)",endsParent:!0,keywords:r},f=[s,{className:"class",beginKeywords:"class module",end:"$|;",illegal:/=/,contains:[e.inherit(e.TITLE_MODE,{begin:"[A-Za-z_]\\w*(::\\w+)*(\\?|!)?"}),{begin:"<\\s*",contains:[{begin:"("+e.IDENT_RE+"::)?"+e.IDENT_RE,relevance:0}]}].concat(i)},{className:"function",begin:n.concat(/def\s+/,n.lookahead(t+"\\s*(\\(|;|$)")),relevance:0,keywords:"def",end:"$|;",contains:[e.inherit(e.TITLE_MODE,{begin:t}),d].concat(i)},{begin:e.IDENT_RE+"::"},{className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"(!|\\?)?:",relevance:0},{className:"symbol",begin:":(?!\\s)",contains:[s,{begin:t}],relevance:0},u,{className:"variable",begin:"(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"},{className:"params",begin:/\|/,end:/\|/,relevance:0,keywords:r},{begin:"("+e.RE_STARTERS_RE+"|unless)\\s*",keywords:"unless",contains:[{className:"regexp",contains:[e.BACKSLASH_ESCAPE,l],illegal:/\n/,variants:[{begin:"/",end:"/[a-z]*"},{begin:/%r\{/,end:/\}[a-z]*/},{begin:"%r\\(",end:"\\)[a-z]*"},{begin:"%r!",end:"![a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}].concat(a,i),relevance:0}].concat(a,i);l.contains=f,d.contains=f;const p=[{begin:/^\s*=>/,starts:{end:"$",contains:f}},{className:"meta",begin:"^([>?]>|[\\w#]+\\(\\w+\\):\\d+:\\d+>|(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>)(?=[ ])",starts:{end:"$",contains:f}}];return i.unshift(a),{name:"Ruby",aliases:["rb","gemspec","podspec","thor","irb"],keywords:r,illegal:/\/\*/,contains:[e.SHEBANG({binary:"ruby"})].concat(p).concat(i).concat(f)}})),ka.registerLanguage("rust",(function(e){const n=e.regex,t={className:"title.function.invoke",relevance:0,begin:n.concat(/\b/,/(?!let\b)/,e.IDENT_RE,n.lookahead(/\s*\(/))},r="([ui](8|16|32|64|128|size)|f(32|64))?",o=["drop ","Copy","Send","Sized","Sync","Drop","Fn","FnMut","FnOnce","ToOwned","Clone","Debug","PartialEq","PartialOrd","Eq","Ord","AsRef","AsMut","Into","From","Default","Iterator","Extend","IntoIterator","DoubleEndedIterator","ExactSizeIterator","SliceConcatExt","ToString","assert!","assert_eq!","bitflags!","bytes!","cfg!","col!","concat!","concat_idents!","debug_assert!","debug_assert_eq!","env!","panic!","file!","format!","format_args!","include_bin!","include_str!","line!","local_data_key!","module_path!","option_env!","print!","println!","select!","stringify!","try!","unimplemented!","unreachable!","vec!","write!","writeln!","macro_rules!","assert_ne!","debug_assert_ne!"];return{name:"Rust",aliases:["rs"],keywords:{$pattern:e.IDENT_RE+"!?",type:["i8","i16","i32","i64","i128","isize","u8","u16","u32","u64","u128","usize","f32","f64","str","char","bool","Box","Option","Result","String","Vec"],keyword:["abstract","as","async","await","become","box","break","const","continue","crate","do","dyn","else","enum","extern","false","final","fn","for","if","impl","in","let","loop","macro","match","mod","move","mut","override","priv","pub","ref","return","self","Self","static","struct","super","trait","true","try","type","typeof","unsafe","unsized","use","virtual","where","while","yield"],literal:["true","false","Some","None","Ok","Err"],built_in:o},illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:["self"]}),e.inherit(e.QUOTE_STRING_MODE,{begin:/b?"/,illegal:null}),{className:"string",variants:[{begin:/b?r(#*)"(.|\n)*?"\1(?!#)/},{begin:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{className:"symbol",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:"number",variants:[{begin:"\\b0b([01_]+)"+r},{begin:"\\b0o([0-7_]+)"+r},{begin:"\\b0x([A-Fa-f0-9_]+)"+r},{begin:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+r}],relevance:0},{begin:[/fn/,/\s+/,e.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.function"}},{className:"meta",begin:"#!?\\[",end:"\\]",contains:[{className:"string",begin:/"/,end:/"/}]},{begin:[/let/,/\s+/,/(?:mut\s+)?/,e.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"keyword",4:"variable"}},{begin:[/for/,/\s+/,e.UNDERSCORE_IDENT_RE,/\s+/,/in/],className:{1:"keyword",3:"variable",5:"keyword"}},{begin:[/type/,/\s+/,e.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.class"}},{begin:[/(?:trait|enum|struct|union|impl|for)/,/\s+/,e.UNDERSCORE_IDENT_RE],className:{1:"keyword",3:"title.class"}},{begin:e.IDENT_RE+"::",keywords:{keyword:"Self",built_in:o}},{className:"punctuation",begin:"->"},t]}})),ka.registerLanguage("scss",(function(e){const n=(e=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z][A-Za-z0-9_-]*/}}))(e),t=Do,r=Lo,o="@[a-z-]+",a={className:"variable",begin:"(\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\b"};return{name:"SCSS",case_insensitive:!0,illegal:"[=/|']",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,n.CSS_NUMBER_MODE,{className:"selector-id",begin:"#[A-Za-z0-9_-]+",relevance:0},{className:"selector-class",begin:"\\.[A-Za-z0-9_-]+",relevance:0},n.ATTRIBUTE_SELECTOR_MODE,{className:"selector-tag",begin:"\\b("+Io.join("|")+")\\b",relevance:0},{className:"selector-pseudo",begin:":("+r.join("|")+")"},{className:"selector-pseudo",begin:":(:)?("+t.join("|")+")"},a,{begin:/\(/,end:/\)/,contains:[n.CSS_NUMBER_MODE]},n.CSS_VARIABLE,{className:"attribute",begin:"\\b("+Po.join("|")+")\\b"},{begin:"\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"},{begin:/:/,end:/[;}{]/,contains:[n.BLOCK_COMMENT,a,n.HEXCOLOR,n.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,n.IMPORTANT]},{begin:"@(page|font-face)",keywords:{$pattern:o,keyword:"@page @font-face"}},{begin:"@",end:"[{;]",returnBegin:!0,keywords:{$pattern:/[a-z-]+/,keyword:"and or not only",attribute:Ro.join(" ")},contains:[{begin:o,className:"keyword"},{begin:/[a-z-]+(?=:)/,className:"attribute"},a,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,n.HEXCOLOR,n.CSS_NUMBER_MODE]},n.FUNCTION_DISPATCH]}})),ka.registerLanguage("shell",(function(e){return{name:"Shell Session",aliases:["console","shellsession"],contains:[{className:"meta",begin:/^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,starts:{end:/[^\\](?=\s*$)/,subLanguage:"bash"}}]}})),ka.registerLanguage("sql",(function(e){const n=e.regex,t=e.COMMENT("--","$"),r=["true","false","unknown"],o=["bigint","binary","blob","boolean","char","character","clob","date","dec","decfloat","decimal","float","int","integer","interval","nchar","nclob","national","numeric","real","row","smallint","time","timestamp","varchar","varying","varbinary"],a=["abs","acos","array_agg","asin","atan","avg","cast","ceil","ceiling","coalesce","corr","cos","cosh","count","covar_pop","covar_samp","cume_dist","dense_rank","deref","element","exp","extract","first_value","floor","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","last_value","lead","listagg","ln","log","log10","lower","max","min","mod","nth_value","ntile","nullif","percent_rank","percentile_cont","percentile_disc","position","position_regex","power","rank","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","row_number","sin","sinh","sqrt","stddev_pop","stddev_samp","substring","substring_regex","sum","tan","tanh","translate","translate_regex","treat","trim","trim_array","unnest","upper","value_of","var_pop","var_samp","width_bucket"],i=["create table","insert into","primary key","foreign key","not null","alter table","add constraint","grouping sets","on overflow","character set","respect nulls","ignore nulls","nulls first","nulls last","depth first","breadth first"],l=a,s=["abs","acos","all","allocate","alter","and","any","are","array","array_agg","array_max_cardinality","as","asensitive","asin","asymmetric","at","atan","atomic","authorization","avg","begin","begin_frame","begin_partition","between","bigint","binary","blob","boolean","both","by","call","called","cardinality","cascaded","case","cast","ceil","ceiling","char","char_length","character","character_length","check","classifier","clob","close","coalesce","collate","collect","column","commit","condition","connect","constraint","contains","convert","copy","corr","corresponding","cos","cosh","count","covar_pop","covar_samp","create","cross","cube","cume_dist","current","current_catalog","current_date","current_default_transform_group","current_path","current_role","current_row","current_schema","current_time","current_timestamp","current_path","current_role","current_transform_group_for_type","current_user","cursor","cycle","date","day","deallocate","dec","decimal","decfloat","declare","default","define","delete","dense_rank","deref","describe","deterministic","disconnect","distinct","double","drop","dynamic","each","element","else","empty","end","end_frame","end_partition","end-exec","equals","escape","every","except","exec","execute","exists","exp","external","extract","false","fetch","filter","first_value","float","floor","for","foreign","frame_row","free","from","full","function","fusion","get","global","grant","group","grouping","groups","having","hold","hour","identity","in","indicator","initial","inner","inout","insensitive","insert","int","integer","intersect","intersection","interval","into","is","join","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","language","large","last_value","lateral","lead","leading","left","like","like_regex","listagg","ln","local","localtime","localtimestamp","log","log10","lower","match","match_number","match_recognize","matches","max","member","merge","method","min","minute","mod","modifies","module","month","multiset","national","natural","nchar","nclob","new","no","none","normalize","not","nth_value","ntile","null","nullif","numeric","octet_length","occurrences_regex","of","offset","old","omit","on","one","only","open","or","order","out","outer","over","overlaps","overlay","parameter","partition","pattern","per","percent","percent_rank","percentile_cont","percentile_disc","period","portion","position","position_regex","power","precedes","precision","prepare","primary","procedure","ptf","range","rank","reads","real","recursive","ref","references","referencing","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","release","result","return","returns","revoke","right","rollback","rollup","row","row_number","rows","running","savepoint","scope","scroll","search","second","seek","select","sensitive","session_user","set","show","similar","sin","sinh","skip","smallint","some","specific","specifictype","sql","sqlexception","sqlstate","sqlwarning","sqrt","start","static","stddev_pop","stddev_samp","submultiset","subset","substring","substring_regex","succeeds","sum","symmetric","system","system_time","system_user","table","tablesample","tan","tanh","then","time","timestamp","timezone_hour","timezone_minute","to","trailing","translate","translate_regex","translation","treat","trigger","trim","trim_array","true","truncate","uescape","union","unique","unknown","unnest","update","upper","user","using","value","values","value_of","var_pop","var_samp","varbinary","varchar","varying","versioning","when","whenever","where","width_bucket","window","with","within","without","year","add","asc","collation","desc","final","first","last","view"].filter((e=>!a.includes(e))),c={begin:n.concat(/\b/,n.either(...l),/\s*\(/),relevance:0,keywords:{built_in:l}};return{name:"SQL",case_insensitive:!0,illegal:/[{}]|<\//,keywords:{$pattern:/\b[\w\.]+/,keyword:function(e,{exceptions:n,when:t}={}){const r=t;return n=n||[],e.map((e=>e.match(/\|\d+$/)||n.includes(e)?e:r(e)?`${e}|0`:e))}(s,{when:e=>e.length<3}),literal:r,type:o,built_in:["current_catalog","current_date","current_default_transform_group","current_path","current_role","current_schema","current_transform_group_for_type","current_user","session_user","system_time","system_user","current_time","localtime","current_timestamp","localtimestamp"]},contains:[{begin:n.either(...i),relevance:0,keywords:{$pattern:/[\w\.]+/,keyword:s.concat(i),literal:r,type:o}},{className:"type",begin:n.either("double precision","large object","with timezone","without timezone")},c,{className:"variable",begin:/@[a-z0-9]+/},{className:"string",variants:[{begin:/'/,end:/'/,contains:[{begin:/''/}]}]},{begin:/"/,end:/"/,contains:[{begin:/""/}]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,{className:"operator",begin:/[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,relevance:0}]}})),ka.registerLanguage("swift",(function(e){const n={match:/\s+/,relevance:0},t=e.COMMENT("/\\*","\\*/",{contains:["self"]}),r=[e.C_LINE_COMMENT_MODE,t],o={match:[/\./,Uo(...qo,...Ho)],className:{2:"keyword"}},a={match:jo(/\./,Uo(...Wo)),relevance:0},i=Wo.filter((e=>"string"==typeof e)).concat(["_|0"]),l={variants:[{className:"keyword",match:Uo(...Wo.filter((e=>"string"!=typeof e)).concat(Go).map($o),...Ho)}]},s={$pattern:Uo(/\b\w+/,/#\w+/),keyword:i.concat(Zo),literal:Ko},c=[o,a,l],u=[{match:jo(/\./,Uo(...Qo)),relevance:0},{className:"built_in",match:jo(/\b/,Uo(...Qo),/(?=\()/)}],d={match:/->/,relevance:0},f=[d,{className:"operator",relevance:0,variants:[{match:Jo},{match:`\\.(\\.|${Yo})+`}]}],p="([0-9a-fA-F]_*)+",m={className:"number",relevance:0,variants:[{match:"\\b(([0-9]_*)+)(\\.(([0-9]_*)+))?([eE][+-]?(([0-9]_*)+))?\\b"},{match:`\\b0x(${p})(\\.(${p}))?([pP][+-]?(([0-9]_*)+))?\\b`},{match:/\b0o([0-7]_*)+\b/},{match:/\b0b([01]_*)+\b/}]},g=(e="")=>({className:"subst",variants:[{match:jo(/\\/,e,/[0\\tnr"']/)},{match:jo(/\\/,e,/u\{[0-9a-fA-F]{1,8}\}/)}]}),h=(e="")=>({className:"subst",match:jo(/\\/,e,/[\t ]*(?:[\r\n]|\r\n)/)}),b=(e="")=>({className:"subst",label:"interpol",begin:jo(/\\/,e,/\(/),end:/\)/}),y=(e="")=>({begin:jo(e,/"""/),end:jo(/"""/,e),contains:[g(e),h(e),b(e)]}),v=(e="")=>({begin:jo(e,/"/),end:jo(/"/,e),contains:[g(e),b(e)]}),w={className:"string",variants:[y(),y("#"),y("##"),y("###"),v(),v("#"),v("##"),v("###")]},A={match:jo(/`/,ta,/`/)},k=[A,{className:"variable",match:/\$\d+/},{className:"variable",match:`\\$${na}+`}],C=[{match:/(@|#)available/,className:"keyword",starts:{contains:[{begin:/\(/,end:/\)/,keywords:aa,contains:[...f,m,w]}]}},{className:"keyword",match:jo(/@/,Uo(...oa))},{className:"meta",match:jo(/@/,ta)}],_={match:Fo(/\b[A-Z]/),relevance:0,contains:[{className:"type",match:jo(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/,na,"+")},{className:"type",match:ra,relevance:0},{match:/[?!]+/,relevance:0},{match:/\.\.\./,relevance:0},{match:jo(/\s+&\s+/,Fo(ra)),relevance:0}]},x={begin:/</,end:/>/,keywords:s,contains:[...r,...c,...C,d,_]};_.contains.push(x);const E={begin:/\(/,end:/\)/,relevance:0,keywords:s,contains:["self",{match:jo(ta,/\s*:/),keywords:"_|0",relevance:0},...r,...c,...u,...f,m,w,...k,...C,_]},S={begin:/</,end:/>/,contains:[...r,_]},B={begin:/\(/,end:/\)/,keywords:s,contains:[{begin:Uo(Fo(jo(ta,/\s*:/)),Fo(jo(ta,/\s+/,ta,/\s*:/))),end:/:/,relevance:0,contains:[{className:"keyword",match:/\b_\b/},{className:"params",match:ta}]},...r,...c,...f,m,w,...C,_,E],endsParent:!0,illegal:/["']/},N={match:[/func/,/\s+/,Uo(A.match,ta,Jo)],className:{1:"keyword",3:"title.function"},contains:[S,B,n],illegal:[/\[/,/%/]},O={match:[/\b(?:subscript|init[?!]?)/,/\s*(?=[<(])/],className:{1:"keyword"},contains:[S,B,n],illegal:/\[|%/},M={match:[/operator/,/\s+/,Jo],className:{1:"keyword",3:"title"}},T={begin:[/precedencegroup/,/\s+/,ra],className:{1:"keyword",3:"title"},contains:[_],keywords:[...Vo,...Ko],end:/}/};for(const e of w.variants){const n=e.contains.find((e=>"interpol"===e.label));n.keywords=s;const t=[...c,...u,...f,m,w,...k];n.contains=[...t,{begin:/\(/,end:/\)/,contains:["self",...t]}]}return{name:"Swift",keywords:s,contains:[...r,N,O,{beginKeywords:"struct protocol class extension enum actor",end:"\\{",excludeEnd:!0,keywords:s,contains:[e.inherit(e.TITLE_MODE,{className:"title.class",begin:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/}),...c]},M,T,{beginKeywords:"import",end:/$/,contains:[...r],relevance:0},...c,...u,...f,m,w,...k,...C,_,E]}})),ka.registerLanguage("typescript",(function(e){const n=function(e){const n=e.regex,t=ia,r={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(e,n)=>{const t=e[0].length+e.index,r=e.input[t];if("<"===r||","===r)return void n.ignoreMatch();let o;">"===r&&(((e,{after:n})=>{const t="</"+e[0].slice(1);return-1!==e.input.indexOf(t,n)})(e,{after:t})||n.ignoreMatch()),(o=e.input.substr(t).match(/^\s+extends\s+/))&&0===o.index&&n.ignoreMatch()}},o={$pattern:ia,keyword:la,literal:sa,built_in:pa,"variable.language":fa},a="\\.([0-9](_?[0-9])*)",i="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",l={className:"number",variants:[{begin:`(\\b(${i})((${a})|\\.)?|(${a}))[eE][+-]?([0-9](_?[0-9])*)\\b`},{begin:`\\b(${i})\\b((${a})\\b|\\.)?|(${a})\\b`},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},s={className:"subst",begin:"\\$\\{",end:"\\}",keywords:o,contains:[]},c={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,s],subLanguage:"xml"}},u={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,s],subLanguage:"css"}},d={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,s]},f={className:"comment",variants:[e.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,excludeBegin:!0,relevance:0},{className:"variable",begin:t+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]},p=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,c,u,d,l];s.contains=p.concat({begin:/\{/,end:/\}/,keywords:o,contains:["self"].concat(p)});const m=[].concat(f,s.contains),g=m.concat([{begin:/\(/,end:/\)/,keywords:o,contains:["self"].concat(m)}]),h={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:o,contains:g},b={variants:[{match:[/class/,/\s+/,t,/\s+/,/extends/,/\s+/,n.concat(t,"(",n.concat(/\./,t),")*")],scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{match:[/class/,/\s+/,t],scope:{1:"keyword",3:"title.class"}}]},y={relevance:0,match:n.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]+|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+/),className:"title.class",keywords:{_:[...ca,...ua]}},v={variants:[{match:[/function/,/\s+/,t,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],className:{1:"keyword",3:"title.function"},label:"func.def",contains:[h],illegal:/%/},w={match:n.concat(/\b/,function(e){return n.concat("(?!",e.join("|"),")")}([...da,"super"]),t,n.lookahead(/\(/)),className:"title.function",relevance:0},A={begin:n.concat(/\./,n.lookahead(n.concat(t,/(?![0-9A-Za-z$_(])/))),end:t,excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},k={match:[/get|set/,/\s+/,t,/(?=\()/],className:{1:"keyword",3:"title.function"},contains:[{begin:/\(\)/},h]},C="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+e.UNDERSCORE_IDENT_RE+")\\s*=>",_={match:[/const|var|let/,/\s+/,t,/\s*/,/=\s*/,n.lookahead(C)],className:{1:"keyword",3:"title.function"},contains:[h]};return{name:"Javascript",aliases:["js","jsx","mjs","cjs"],keywords:o,exports:{PARAMS_CONTAINS:g,CLASS_REFERENCE:y},illegal:/#(?![$_A-z])/,contains:[e.SHEBANG({label:"shebang",binary:"node",relevance:5}),{label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,c,u,d,f,l,y,{className:"attr",begin:t+n.lookahead(":"),relevance:0},_,{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",relevance:0,contains:[f,e.REGEXP_MODE,{className:"function",begin:C,returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:e.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:o,contains:g}]}]},{begin:/,/,relevance:0},{match:/\s+/,relevance:0},{variants:[{begin:"<>",end:"</>"},{match:/<[A-Za-z0-9\\._:-]+\s*\/>/},{begin:r.begin,"on:begin":r.isTrulyOpeningTag,end:r.end}],subLanguage:"xml",contains:[{begin:r.begin,end:r.end,skip:!0,contains:["self"]}]}]},v,{beginKeywords:"while if switch catch for"},{begin:"\\b(?!function)"+e.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,label:"func.def",contains:[h,e.inherit(e.TITLE_MODE,{begin:t,className:"title.function"})]},{match:/\.\.\./,relevance:0},A,{match:"\\$"+t,relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},contains:[h]},w,{relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"},b,k,{match:/\$[(.]/}]}}(e),t=["any","void","number","boolean","string","object","never","enum"],r={beginKeywords:"namespace",end:/\{/,excludeEnd:!0,contains:[n.exports.CLASS_REFERENCE]},o={beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:{keyword:"interface extends",built_in:t},contains:[n.exports.CLASS_REFERENCE]},a={$pattern:ia,keyword:la.concat(["type","namespace","typedef","interface","public","private","protected","implements","declare","abstract","readonly"]),literal:sa,built_in:pa.concat(t),"variable.language":fa},i={className:"meta",begin:"@[A-Za-z$_][0-9A-Za-z$_]*"},l=(e,n,t)=>{const r=e.contains.findIndex((e=>e.label===n));if(-1===r)throw new Error("can not find mode to replace");e.contains.splice(r,1,t)};return Object.assign(n.keywords,a),n.exports.PARAMS_CONTAINS.push(i),n.contains=n.contains.concat([i,r,o]),l(n,"shebang",e.SHEBANG()),l(n,"use_strict",{className:"meta",relevance:10,begin:/^\s*['"]use strict['"]/}),n.contains.find((e=>"func.def"===e.label)).relevance=0,Object.assign(n,{name:"TypeScript",aliases:["ts","tsx"]}),n})),ka.registerLanguage("vbnet",(function(e){const n=e.regex,t=/\d{1,2}\/\d{1,2}\/\d{4}/,r=/\d{4}-\d{1,2}-\d{1,2}/,o=/(\d|1[012])(:\d+){0,2} *(AM|PM)/,a=/\d{1,2}(:\d{1,2}){1,2}/,i={className:"literal",variants:[{begin:n.concat(/# */,n.either(r,t),/ *#/)},{begin:n.concat(/# */,a,/ *#/)},{begin:n.concat(/# */,o,/ *#/)},{begin:n.concat(/# */,n.either(r,t),/ +/,n.either(o,a),/ *#/)}]},l=e.COMMENT(/'''/,/$/,{contains:[{className:"doctag",begin:/<\/?/,end:/>/}]}),s=e.COMMENT(null,/$/,{variants:[{begin:/'/},{begin:/([\t ]|^)REM(?=\s)/}]});return{name:"Visual Basic .NET",aliases:["vb"],case_insensitive:!0,classNameAliases:{label:"symbol"},keywords:{keyword:"addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",built_in:"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort",type:"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort",literal:"true false nothing"},illegal:"//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",contains:[{className:"string",begin:/"(""|[^/n])"C\b/},{className:"string",begin:/"/,end:/"/,illegal:/\n/,contains:[{begin:/""/}]},i,{className:"number",relevance:0,variants:[{begin:/\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/},{begin:/\b\d[\d_]*((U?[SIL])|[%&])?/},{begin:/&H[\dA-F_]+((U?[SIL])|[%&])?/},{begin:/&O[0-7_]+((U?[SIL])|[%&])?/},{begin:/&B[01_]+((U?[SIL])|[%&])?/}]},{className:"label",begin:/^\w+:/},l,s,{className:"meta",begin:/[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,end:/$/,keywords:{keyword:"const disable else elseif enable end externalsource if region then"},contains:[s]}]}})),ka.registerLanguage("xml",(function(e){const n=e.regex,t=n.concat(/[A-Z_]/,n.optional(/[A-Z0-9_.-]*:/),/[A-Z0-9_.-]*/),r={className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},o={begin:/\s/,contains:[{className:"keyword",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\n/}]},a=e.inherit(o,{begin:/\(/,end:/\)/}),i=e.inherit(e.APOS_STRING_MODE,{className:"string"}),l=e.inherit(e.QUOTE_STRING_MODE,{className:"string"}),s={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:/[A-Za-z0-9._:-]+/,relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[r]},{begin:/'/,end:/'/,contains:[r]},{begin:/[^\s"'=<>`]+/}]}]}]};return{name:"HTML, XML",aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],case_insensitive:!0,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,relevance:10,contains:[o,l,i,a,{begin:/\[/,end:/\]/,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,contains:[o,a,l,i]}]}]},e.COMMENT(/<!--/,/-->/,{relevance:10}),{begin:/<!\[CDATA\[/,end:/\]\]>/,relevance:10},r,{className:"meta",begin:/<\?xml/,end:/\?>/,relevance:10},{className:"tag",begin:/<style(?=\s|>)/,end:/>/,keywords:{name:"style"},contains:[s],starts:{end:/<\/style>/,returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:/<script(?=\s|>)/,end:/>/,keywords:{name:"script"},contains:[s],starts:{end:/<\/script>/,returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{className:"tag",begin:/<>|<\/>/},{className:"tag",begin:n.concat(/</,n.lookahead(n.concat(t,n.either(/\/>/,/>/,/\s/)))),end:/\/?>/,contains:[{className:"name",begin:t,relevance:0,starts:s}]},{className:"tag",begin:n.concat(/<\//,n.lookahead(n.concat(t,/>/))),contains:[{className:"name",begin:t,relevance:0},{begin:/>/,relevance:0,endsParent:!0}]}]}})),ka.registerLanguage("yaml",(function(e){const n="true false yes no null",t="[\\w#;/?:@&=+$,.~*'()[\\]]+",r={className:"string",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/\S+/}],contains:[e.BACKSLASH_ESCAPE,{className:"template-variable",variants:[{begin:/\{\{/,end:/\}\}/},{begin:/%\{/,end:/\}/}]}]},o=e.inherit(r,{variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/[^\s,{}[\]]+/}]}),a={end:",",endsWithParent:!0,excludeEnd:!0,keywords:n,relevance:0},i={begin:/\{/,end:/\}/,contains:[a],illegal:"\\n",relevance:0},l={begin:"\\[",end:"\\]",contains:[a],illegal:"\\n",relevance:0},s=[{className:"attr",variants:[{begin:"\\w[\\w :\\/.-]*:(?=[ \t]|$)"},{begin:'"\\w[\\w :\\/.-]*":(?=[ \t]|$)'},{begin:"'\\w[\\w :\\/.-]*':(?=[ \t]|$)"}]},{className:"meta",begin:"^---\\s*$",relevance:10},{className:"string",begin:"[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"},{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:"!\\w+!"+t},{className:"type",begin:"!<"+t+">"},{className:"type",begin:"!"+t},{className:"type",begin:"!!"+t},{className:"meta",begin:"&"+e.UNDERSCORE_IDENT_RE+"$"},{className:"meta",begin:"\\*"+e.UNDERSCORE_IDENT_RE+"$"},{className:"bullet",begin:"-(?=[ ]|$)",relevance:0},e.HASH_COMMENT_MODE,{beginKeywords:n,keywords:{literal:n}},{className:"number",begin:"\\b[0-9]{4}(-[0-9][0-9]){0,2}([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?(\\.[0-9]*)?([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\\b"},{className:"number",begin:e.C_NUMBER_RE+"\\b",relevance:0},i,l,r],c=[...s];return c.pop(),c.push(o),a.contains=c,{name:"YAML",case_insensitive:!0,aliases:["yml"],contains:s}}));const Ca=function(e){if(null==e)return xa;if("string"==typeof e)return n=e,function(e){return xa(e)&&e.tagName===n};var n;if("object"==typeof e)return function(e){const n=[];let t=-1;for(;++t<e.length;)n[t]=Ca(e[t]);return _a((function(...e){let t=-1;for(;++t<n.length;)if(n[t].call(this,...e))return!0;return!1}))}(e);if("function"==typeof e)return _a(e);throw new Error("Expected function, string, or array as test")};function _a(e){return function(n,...t){return xa(n)&&Boolean(e.call(this,n,...t))}}function xa(e){return Boolean(e&&"object"==typeof e&&"element"===e.type&&"string"==typeof e.tagName)}var Ea=function(e,n,t){var r=zt(t);if(!e||!e.type||!e.children)throw new Error("Expected parent node");if("number"==typeof n){if(n<0||n===Number.POSITIVE_INFINITY)throw new Error("Expected positive finite number as index")}else if((n=e.children.indexOf(n))<0)throw new Error("Expected child node or index");for(;++n<e.children.length;)if(r(e.children[n],n,e))return e.children[n];return null};const Sa=/\n/g,Ba=/[\t ]+/g,Na=Ca("br"),Oa=Ca("p"),Ma=Ca(["th","td"]),Ta=Ca("tr"),Ia=Ca(["datalist","head","noembed","noframes","noscript","rp","script","style","template","title",function(e){return Boolean((e.properties||{}).hidden)},function(e){return"dialog"===e.tagName&&!(e.properties||{}).open}]),Ra=Ca(["address","article","aside","blockquote","body","caption","center","dd","dialog","dir","dl","dt","div","figure","figcaption","footer","form,","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","legend","listing","main","menu","nav","ol","p","plaintext","pre","section","ul","xmp"]);function La(e,n={}){const t=e.children||[],r=Ra(e),o=ja(e,{whitespace:n.whitespace||"normal",breakBefore:!1,breakAfter:!1});let a,i,l,s=-1;if("text"===e.type||"comment"===e.type)return Pa(e,{whitespace:o,breakBefore:!0,breakAfter:!0});for(a=[];++s<t.length;)a=a.concat(Da(t[s],e,{whitespace:o,breakBefore:s?null:r,breakAfter:s<t.length-1?Na(t[s+1]):r}));s=-1;const c=[];for(;++s<a.length;)i=a[s],"number"==typeof i?void 0!==l&&i>l&&(l=i):i&&(l&&c.push("\n".repeat(l)),l=0,c.push(i));return c.join("")}function Da(e,n,t){return"element"===e.type?function(e,n,t){const r=ja(e,t),o=e.children||[];let a,i,l=-1,s=[];if(Ia(e))return s;for(Na(e)||Ta(e)&&Ea(n,e,Ta)?i="\n":Oa(e)?(a=2,i=2):Ra(e)&&(a=1,i=1);++l<o.length;)s=s.concat(Da(o[l],e,{whitespace:r,breakBefore:l?void 0:a,breakAfter:l<o.length-1?Na(o[l+1]):i}));return Ma(e)&&Ea(n,e,Ma)&&s.push("\t"),a&&s.unshift(a),i&&s.push(i),s}(e,n,t):"text"===e.type?["normal"===t.whitespace?Pa(e,t):za(e)]:[]}function Pa(e,n){const t=String(e.value),r=[],o=[];let a,i,l,s=0,c=-1;for(;s<t.length;)Sa.lastIndex=s,a=Sa.exec(t),i=a?a.index:t.length,r.push(Fa(t.slice(s,i).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g,""),n.breakBefore,n.breakAfter)),s=i+1;for(;++c<r.length;)8203===r[c].charCodeAt(r[c].length-1)||c<r.length-1&&8203===r[c+1].charCodeAt(0)?(o.push(r[c]),l=""):r[c]&&(l&&o.push(l),o.push(r[c]),l=" ");return o.join("")}function za(e){return String(e.value)}function Fa(e,n,t){const r=[];let o,a,i=0;for(;i<e.length;)Ba.lastIndex=i,o=Ba.exec(e),a=o?o.index:e.length,i||a||!o||n||r.push(""),i!==a&&r.push(e.slice(i,a)),i=o?a+o[0].length:a;return i===a||t||r.push(""),r.join(" ")}function ja(e,n){let t;if("element"===e.type)switch(t=e.properties||{},e.tagName){case"listing":case"plaintext":case"xmp":return"pre";case"nobr":return"nowrap";case"pre":return t.wrap?"pre-wrap":"pre";case"td":case"th":return t.noWrap?"nowrap":n.whitespace;case"textarea":return"pre-wrap"}return n.whitespace}const Ua={}.hasOwnProperty;function $a(e={}){const{aliases:n,languages:t,prefix:r,plainText:o,ignoreMissing:a,subset:i}=e;let l="hljs";if(n&&ka.registerAlias(n),t){let e;for(e in t)Ua.call(t,e)&&ka.registerLanguage(e,t[e])}if(r){const e=r.indexOf("-");l=e>-1?r.slice(0,e):r}return e=>{Ut(e,"element",((e,n,t)=>{const s=t;if(!s||!("tagName"in s)||"pre"!==s.tagName||"code"!==e.tagName||!e.properties)return;const c=function(e){const n=e.properties&&e.properties.className;let t=-1;if(Array.isArray(n))for(;++t<n.length;){const e=String(n[t]);if("no-highlight"===e||"nohighlight"===e)return!1;if("lang-"===e.slice(0,5))return e.slice(5);if("language-"===e.slice(0,9))return e.slice(9)}}(e);if(!1===c||!c&&!1===i||c&&o&&o.includes(c))return;let u;Array.isArray(e.properties.className)||(e.properties.className=[]),e.properties.className.includes(l)||e.properties.className.unshift(l);try{u=c?ka.highlight(c,La(s),{prefix:r}):ka.highlightAuto(La(s),{prefix:r,subset:i})}catch(e){const n=e;if(!a||!/Unknown language/.test(n.message))throw e;return}!c&&u.data.language&&e.properties.className.push("language-"+u.data.language),Array.isArray(u.children)&&u.children.length>0&&(e.children=u.children)}))}}var qa=t(4804),Ha={};Ha.styleTagTransform=h(),Ha.setAttributes=f(),Ha.insert=u().bind(null,"head"),Ha.domAPI=s(),Ha.insertStyleElement=m(),i()(qa.Z,Ha),qa.Z&&qa.Z.locals&&qa.Z.locals;var Ga=function(){return Ga=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},Ga.apply(this,arguments)};const Wa=function(e){var n=e.body,t=e.user,o=e.createdAt;return(0,r.jsxs)("div",Ga({className:"comment"},{children:[(0,r.jsx)("div",Ga({className:"comment__header"},{children:(0,r.jsxs)("p",Ga({className:"comment__title"},{children:[t," ",(0,r.jsxs)("span",{children:["commented on: ",se(o)]},void 0)]}),void 0)}),void 0),(0,r.jsx)("div",Ga({className:"comment__body markdown-body"},{children:(0,r.jsx)(ao,{children:n,rehypePlugins:[$a]},void 0)}),void 0)]}),void 0)};var Ka=function(){return Ka=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},Ka.apply(this,arguments)};const Va=function(){var e=function(){let{matches:e}=(0,v.useContext)(O),n=e[e.length-1];return n?n.params:{}}(),n=(0,v.useState)(void 0),t=n[0],o=n[1],a=(0,v.useState)(!0),i=a[0],l=a[1],s=(0,v.useState)(""),c=s[0],u=s[1],d=(0,v.useState)(void 0),f=d[0],p=d[1],m=(0,v.useState)(""),g=m[0],h=m[1],b=function(e){u(e||"Error completing request")};return(0,v.useEffect)((function(){if(e&&e.owner&&e.repo&&e.id){var n=e.owner,t=e.repo,r=e.id;h(function(e,n){return"".concat(fe).concat(e,"/").concat(n)}(n,t)),function(e,n,t){return ue()({url:"".concat(de,"/repos/").concat(e,"/").concat(n,"/issues/").concat(t)}).then((function(e){return{status:200,data:e.data}})).catch((function(e){return{status:400,errMessage:e.toJSON().message}}))}(n,t,r).then((function(e){if(l(!1),200===e.status){if(o(e.data),e.data&&e.data.comments>0){(n=e.data.comments_url,ue()({url:n}).then((function(e){return{status:200,data:e.data}})).catch((function(e){return{status:400,errMessage:e.toJSON().message}}))).then((function(e){200===e.status&&e.data&&p(e.data)}))}}else b(e.errMessage);var n}))}else l(!1),b()}),[]),(0,r.jsxs)("div",Ka({className:"issue ".concat(i&&"issue--fetching")},{children:[i&&(0,r.jsx)(ae,{},void 0),(0,r.jsxs)("div",Ka({className:"issue__container"},{children:[""!==c&&(0,r.jsx)("p",{children:c},void 0),t&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(te,Ka({to:"/issues?repo=".concat(g),className:"issue__link"},{children:"Go to Issues List"}),void 0),(0,r.jsx)("h1",Ka({className:"issue__title"},{children:t.title}),void 0),(0,r.jsxs)("p",Ka({className:"issue__text"},{children:[(0,r.jsx)("span",{children:"Created On:"},void 0)," ",se(t.created_at)]}),void 0),(0,r.jsxs)("p",Ka({className:"issue__text issue__state issue__state--".concat(t.state)},{children:[(0,r.jsx)("span",{children:"Status:"},void 0)," ",t.state]}),void 0),(0,r.jsx)("hr",{className:"issue__divider"},void 0),(0,r.jsx)("section",Ka({className:"issue__content markdown-body"},{children:(0,r.jsx)(ao,{children:t.body,rehypePlugins:[$a]},void 0)}),void 0),(0,r.jsxs)("section",Ka({className:"issue__comments"},{children:[(0,r.jsx)("p",Ka({className:"issue__subtitle"},{children:"Comments"}),void 0),f&&(0,r.jsx)("div",Ka({className:"issue__comments-container"},{children:f.map((function(e){return(0,r.jsx)(Wa,{body:e.body,user:e.user.login,createdAt:e.created_at},e.id)}))}),void 0)]}),void 0)]},void 0),!f&&!i&&(0,r.jsx)("p",{children:"This issue has no comments."},void 0)]}),void 0)]}),void 0)};var Za=function(){return Za=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},Za.apply(this,arguments)};o.render((0,r.jsx)((function(){return(0,r.jsx)("div",Za({className:"App"},{children:(0,r.jsx)(ne,Za({basename:"/tripadvisor"},{children:(0,r.jsxs)(L,{children:[(0,r.jsx)(I,{path:"/",element:(0,r.jsx)(M,{replace:!0,to:"/issues"},void 0)},void 0),(0,r.jsx)(I,{path:"issues",element:(0,r.jsx)(ge,{},void 0)},void 0),(0,r.jsx)(I,{path:"issue/:owner/:repo/:id",element:(0,r.jsx)(Va,{},void 0)},void 0)]},void 0)}),void 0)}),void 0)}),{},void 0),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,